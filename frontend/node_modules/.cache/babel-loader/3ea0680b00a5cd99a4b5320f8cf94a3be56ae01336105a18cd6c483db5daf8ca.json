{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppointmentForm = () => {\n  _s();\n  const {\n    appointmentId\n  } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredCustomers, setFilteredCustomers] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    customerName: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: ''\n  });\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n\n        // Fetch customers (using mock data for now)\n        const customersData = [{\n          _id: 'cust1',\n          name: 'John Smith',\n          email: 'john@example.com',\n          phone: '555-123-4567'\n        }, {\n          _id: 'cust2',\n          name: 'Mary Johnson',\n          email: 'mary@example.com',\n          phone: '555-234-5678'\n        }, {\n          _id: 'cust3',\n          name: 'David Williams',\n          email: 'david@example.com',\n          phone: '555-345-6789'\n        }, {\n          _id: 'cust4',\n          name: 'Sarah Miller',\n          email: 'sarah@example.com',\n          phone: '555-456-7890'\n        }, {\n          _id: 'cust5',\n          name: 'James Brown',\n          email: 'james@example.com',\n          phone: '555-567-8901'\n        }, {\n          _id: 'cust6',\n          name: 'Jennifer Davis',\n          email: 'jennifer@example.com',\n          phone: '555-678-9012'\n        }, {\n          _id: 'cust7',\n          name: 'Michael Wilson',\n          email: 'michael@example.com',\n          phone: '555-789-0123'\n        }, {\n          _id: 'cust8',\n          name: 'Linda Martinez',\n          email: 'linda@example.com',\n          phone: '555-890-1234'\n        }, {\n          _id: 'cust9',\n          name: 'Robert Taylor',\n          email: 'robert@example.com',\n          phone: '555-901-2345'\n        }, {\n          _id: 'cust10',\n          name: 'Elizabeth Anderson',\n          email: 'elizabeth@example.com',\n          phone: '555-012-3456'\n        }];\n        setCustomers(customersData);\n        setFilteredCustomers(customersData);\n\n        // Pets data removed\n\n        // If editing, fetch appointment data\n        if (isEditing) {\n          var _appointment$client, _appointment$service, _appointment$client2, _appointment$notes;\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n\n          // Set customer\n          if ((_appointment$client = appointment.client) !== null && _appointment$client !== void 0 && _appointment$client._id) {\n            setSelectedCustomer(appointment.client._id);\n          }\n\n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n\n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          setFormData({\n            serviceId: ((_appointment$service = appointment.service) === null || _appointment$service === void 0 ? void 0 : _appointment$service._id) || '',\n            customerId: ((_appointment$client2 = appointment.client) === null || _appointment$client2 === void 0 ? void 0 : _appointment$client2._id) || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: ((_appointment$notes = appointment.notes) === null || _appointment$notes === void 0 ? void 0 : _appointment$notes.client) || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFormData();\n  }, [appointmentId, isEditing]);\n\n  // Filter customers based on search term\n  useEffect(() => {\n    if (searchTerm.trim() === '') {\n      setFilteredCustomers(customers);\n      return;\n    }\n    const lowercasedFilter = searchTerm.toLowerCase();\n    const filtered = customers.filter(customer => {\n      return customer.name.toLowerCase().includes(lowercasedFilter) || customer.email.toLowerCase().includes(lowercasedFilter) || customer.phone.toLowerCase().includes(lowercasedFilter);\n    });\n    setFilteredCustomers(filtered);\n    setShowDropdown(true);\n  }, [searchTerm, customers]);\n\n  // Update customer selection\n  useEffect(() => {\n    if (selectedCustomer) {\n      const customer = customers.find(c => c._id === selectedCustomer);\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        customerName: customer ? customer.name : ''\n      }));\n    }\n  }, [selectedCustomer, customers]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleCustomerSearch = e => {\n    setSearchTerm(e.target.value);\n    setFormData({\n      ...formData,\n      customerName: e.target.value,\n      customerId: ''\n    });\n  };\n  const handleSelectCustomer = customer => {\n    setSelectedCustomer(customer._id);\n    setSearchTerm(customer.name);\n    setFormData({\n      ...formData,\n      customerId: customer._id,\n      customerName: customer.name\n    });\n    setShowDropdown(false);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n\n      // Find selected customer and service details for richer data storage\n      const selectedCustomer = customers.find(cust => cust._id === formData.customerId) || {};\n      const selectedService = services.find(svc => svc._id === formData.serviceId) || {};\n      const appointmentData = {\n        service: {\n          _id: formData.serviceId,\n          title: selectedService.title || 'Unknown Service'\n        },\n        client: {\n          _id: formData.customerId,\n          name: selectedCustomer.name || 'Unknown Customer',\n          email: selectedCustomer.email || ''\n        },\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes\n        },\n        status: 'pending',\n        location: 'In-store'\n      };\n\n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n\n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error saving appointment:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: isEditing ? 'Edit Appointment' : 'New Appointment',\n      backLink: \"/appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      style: {\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"serviceId\",\n              children: \"Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"serviceId\",\n              name: \"serviceId\",\n              className: \"form-control\",\n              value: formData.serviceId,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a service\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this), services.map(service => {\n                var _service$price;\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: service._id,\n                  children: [service.title, \" ($\", ((_service$price = service.price) === null || _service$price === void 0 ? void 0 : _service$price.amount) || 0, \")\"]\n                }, service._id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 19\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"customerId\",\n              children: \"Customer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"customerId\",\n              name: \"customerId\",\n              className: \"form-control\",\n              value: formData.customerId,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a customer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this), customers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: customer._id,\n                children: [customer.name, \" (\", customer.email, \")\"]\n              }, customer._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              style: {\n                flex: 1,\n                marginRight: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"date\",\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                id: \"date\",\n                name: \"date\",\n                className: \"form-control\",\n                value: formData.date,\n                onChange: handleInputChange,\n                required: true,\n                min: new Date().toISOString().split('T')[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              style: {\n                flex: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"time\",\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"time\",\n                id: \"time\",\n                name: \"time\",\n                className: \"form-control\",\n                value: formData.time,\n                onChange: handleInputChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"duration\",\n              children: \"Duration (minutes)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"duration\",\n              name: \"duration\",\n              className: \"form-control\",\n              value: formData.duration,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"15\",\n                children: \"15 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"30\",\n                children: \"30 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"45\",\n                children: \"45 minutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"60\",\n                children: \"1 hour\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"90\",\n                children: \"1.5 hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"120\",\n                children: \"2 hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"180\",\n                children: \"3 hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"240\",\n                children: \"4 hours\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"notes\",\n              children: \"Notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"notes\",\n              name: \"notes\",\n              className: \"form-control\",\n              value: formData.notes,\n              onChange: handleInputChange,\n              rows: \"2\",\n              placeholder: \"Add any special instructions or notes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            style: {\n              display: 'flex',\n              justifyContent: 'flex-end',\n              gap: '10px',\n              marginTop: '20px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-outline-secondary\",\n              onClick: () => navigate('/appointments'),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: isEditing ? 'Update Appointment' : 'Create Appointment'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_s(AppointmentForm, \"DlPSepf/allsJVWVZEXQRLCcxoo=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AppointmentForm;\nexport default AppointmentForm;\nvar _c;\n$RefreshReg$(_c, \"AppointmentForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","toast","PageHeader","LoadingSpinner","api","jsxDEV","_jsxDEV","AppointmentForm","_s","appointmentId","navigate","isEditing","loading","setLoading","services","setServices","customers","setCustomers","selectedCustomer","setSelectedCustomer","searchTerm","setSearchTerm","filteredCustomers","setFilteredCustomers","showDropdown","setShowDropdown","formData","setFormData","serviceId","customerId","customerName","date","time","duration","notes","fetchFormData","servicesResponse","getServices","data","customersData","_id","name","email","phone","_appointment$client","_appointment$service","_appointment$client2","_appointment$notes","appointmentResponse","getBooking","appointment","booking","client","appointmentDate","Date","startTime","formattedDate","toISOString","split","formattedTime","toTimeString","slice","endTime","durationMinutes","Math","round","service","error","console","trim","lowercasedFilter","toLowerCase","filtered","filter","customer","includes","find","c","prev","handleInputChange","e","value","target","handleCustomerSearch","handleSelectCustomer","handleSubmit","preventDefault","getTime","cust","selectedService","svc","appointmentData","title","status","location","updateBooking","success","createBooking","_error$response","_error$response$data","response","fileName","_jsxFileName","lineNumber","columnNumber","className","children","backLink","style","maxWidth","margin","onSubmit","htmlFor","id","onChange","required","map","_service$price","price","amount","flex","marginRight","type","min","rows","placeholder","display","justifyContent","gap","marginTop","onClick","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\n\nconst AppointmentForm = () => {\n  const { appointmentId } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  \n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredCustomers, setFilteredCustomers] = useState([]);\n  const [showDropdown, setShowDropdown] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    customerName: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: '',\n  });\n\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n        \n        // Fetch customers (using mock data for now)\n        const customersData = [\n          { _id: 'cust1', name: 'John Smith', email: 'john@example.com', phone: '555-123-4567' },\n          { _id: 'cust2', name: 'Mary Johnson', email: 'mary@example.com', phone: '555-234-5678' },\n          { _id: 'cust3', name: 'David Williams', email: 'david@example.com', phone: '555-345-6789' },\n          { _id: 'cust4', name: 'Sarah Miller', email: 'sarah@example.com', phone: '555-456-7890' },\n          { _id: 'cust5', name: 'James Brown', email: 'james@example.com', phone: '555-567-8901' },\n          { _id: 'cust6', name: 'Jennifer Davis', email: 'jennifer@example.com', phone: '555-678-9012' },\n          { _id: 'cust7', name: 'Michael Wilson', email: 'michael@example.com', phone: '555-789-0123' },\n          { _id: 'cust8', name: 'Linda Martinez', email: 'linda@example.com', phone: '555-890-1234' },\n          { _id: 'cust9', name: 'Robert Taylor', email: 'robert@example.com', phone: '555-901-2345' },\n          { _id: 'cust10', name: 'Elizabeth Anderson', email: 'elizabeth@example.com', phone: '555-012-3456' },\n        ];\n        setCustomers(customersData);\n        setFilteredCustomers(customersData);\n        \n        // Pets data removed\n        \n        // If editing, fetch appointment data\n        if (isEditing) {\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n          \n          // Set customer\n          if (appointment.client?._id) {\n            setSelectedCustomer(appointment.client._id);\n          }\n          \n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n          \n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          \n          setFormData({\n            serviceId: appointment.service?._id || '',\n            customerId: appointment.client?._id || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: appointment.notes?.client || '',\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchFormData();\n  }, [appointmentId, isEditing]);\n  \n  // Filter customers based on search term\n  useEffect(() => {\n    if (searchTerm.trim() === '') {\n      setFilteredCustomers(customers);\n      return;\n    }\n    \n    const lowercasedFilter = searchTerm.toLowerCase();\n    const filtered = customers.filter(customer => {\n      return (\n        customer.name.toLowerCase().includes(lowercasedFilter) ||\n        customer.email.toLowerCase().includes(lowercasedFilter) ||\n        customer.phone.toLowerCase().includes(lowercasedFilter)\n      );\n    });\n    \n    setFilteredCustomers(filtered);\n    setShowDropdown(true);\n  }, [searchTerm, customers]);\n  \n  // Update customer selection\n  useEffect(() => {\n    if (selectedCustomer) {\n      const customer = customers.find(c => c._id === selectedCustomer);\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        customerName: customer ? customer.name : '',\n      }));\n    }\n  }, [selectedCustomer, customers]);\n  \n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n  \n  const handleCustomerSearch = (e) => {\n    setSearchTerm(e.target.value);\n    setFormData({\n      ...formData,\n      customerName: e.target.value,\n      customerId: '',\n    });\n  };\n  \n  const handleSelectCustomer = (customer) => {\n    setSelectedCustomer(customer._id);\n    setSearchTerm(customer.name);\n    setFormData({\n      ...formData,\n      customerId: customer._id,\n      customerName: customer.name,\n    });\n    setShowDropdown(false);\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n      \n      // Find selected customer and service details for richer data storage\n      const selectedCustomer = customers.find(cust => cust._id === formData.customerId) || {};\n      const selectedService = services.find(svc => svc._id === formData.serviceId) || {};\n      \n      const appointmentData = {\n        service: {\n          _id: formData.serviceId,\n          title: selectedService.title || 'Unknown Service'\n        },\n        client: {\n          _id: formData.customerId,\n          name: selectedCustomer.name || 'Unknown Customer',\n          email: selectedCustomer.email || ''\n        },\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes,\n        },\n        status: 'pending',\n        location: 'In-store'\n      };\n      \n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n      \n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      console.error('Error saving appointment:', error);\n      toast.error(error.response?.data?.error || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  return (\n    <div className=\"page-container\">\n      <PageHeader \n        title={isEditing ? 'Edit Appointment' : 'New Appointment'} \n        backLink=\"/appointments\"\n      />\n      \n      <div className=\"card\" style={{ maxWidth: '600px', margin: '0 auto' }}>\n        <div className=\"card-body\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"serviceId\">Service</label>\n              <select \n                id=\"serviceId\" \n                name=\"serviceId\" \n                className=\"form-control\"\n                value={formData.serviceId}\n                onChange={handleInputChange}\n                required\n              >\n                <option value=\"\">Select a service</option>\n                {services.map(service => (\n                  <option key={service._id} value={service._id}>\n                    {service.title} (${service.price?.amount || 0})\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"customerId\">Customer</label>\n              <select \n                id=\"customerId\" \n                name=\"customerId\" \n                className=\"form-control\"\n                value={formData.customerId}\n                onChange={handleInputChange}\n                required\n              >\n                <option value=\"\">Select a customer</option>\n                {customers.map(customer => (\n                  <option key={customer._id} value={customer._id}>\n                    {customer.name} ({customer.email})\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\" style={{ flex: 1, marginRight: '10px' }}>\n                <label htmlFor=\"date\">Date</label>\n                <input \n                  type=\"date\" \n                  id=\"date\" \n                  name=\"date\" \n                  className=\"form-control\"\n                  value={formData.date}\n                  onChange={handleInputChange}\n                  required\n                  min={new Date().toISOString().split('T')[0]}\n                />\n              </div>\n              <div className=\"form-group\" style={{ flex: 1 }}>\n                <label htmlFor=\"time\">Time</label>\n                <input \n                  type=\"time\" \n                  id=\"time\" \n                  name=\"time\" \n                  className=\"form-control\"\n                  value={formData.time}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"duration\">Duration (minutes)</label>\n              <select\n                id=\"duration\" \n                name=\"duration\" \n                className=\"form-control\"\n                value={formData.duration}\n                onChange={handleInputChange}\n                required\n              >\n                <option value=\"15\">15 minutes</option>\n                <option value=\"30\">30 minutes</option>\n                <option value=\"45\">45 minutes</option>\n                <option value=\"60\">1 hour</option>\n                <option value=\"90\">1.5 hours</option>\n                <option value=\"120\">2 hours</option>\n                <option value=\"180\">3 hours</option>\n                <option value=\"240\">4 hours</option>\n              </select>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"notes\">Notes</label>\n              <textarea \n                id=\"notes\" \n                name=\"notes\" \n                className=\"form-control\"\n                value={formData.notes}\n                onChange={handleInputChange}\n                rows=\"2\"\n                placeholder=\"Add any special instructions or notes\"\n              ></textarea>\n            </div>\n            \n            <div className=\"form-actions\" style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px', marginTop: '20px' }}>\n              <button \n                type=\"button\" \n                className=\"btn btn-outline-secondary\"\n                onClick={() => navigate('/appointments')}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                {isEditing ? 'Update Appointment' : 'Create Appointment'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppointmentForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}