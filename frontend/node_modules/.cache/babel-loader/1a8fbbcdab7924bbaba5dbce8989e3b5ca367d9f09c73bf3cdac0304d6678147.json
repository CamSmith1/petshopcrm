{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/BusinessContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Create context for business management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BusinessContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the business context\nexport const useBusiness = () => {\n  _s();\n  return useContext(BusinessContext);\n};\n\n// Provider component\n_s(useBusiness, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const BusinessProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated,\n    currentUser\n  } = useAuth();\n\n  // Business state\n  const [businessProfile, setBusinessProfile] = useState(null);\n  const [services, setServices] = useState([]);\n  const [serviceCategories, setServiceCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [staff, setStaff] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [businessLoading, setBusinessLoading] = useState(false);\n  const [businessError, setBusinessError] = useState(null);\n\n  // Fetch business profile on authentication\n  useEffect(() => {\n    const fetchBusinessProfile = async () => {\n      if (!isAuthenticated || !currentUser) return;\n      try {\n        setBusinessLoading(true);\n        setBusinessError(null);\n        const response = await api.get('/business/profile');\n        if (response.data && response.data.business) {\n          setBusinessProfile(response.data.business);\n        }\n      } catch (error) {\n        console.error('Error fetching business profile:', error);\n        setBusinessError('Failed to load business profile');\n      } finally {\n        setBusinessLoading(false);\n      }\n    };\n    fetchBusinessProfile();\n  }, [isAuthenticated, currentUser]);\n\n  // Service management\n  const fetchServices = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.category) queryParams.append('category', options.category);\n      if (options.active !== undefined) queryParams.append('active', options.active);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/services${query}`);\n      if (response.data && response.data.services) {\n        setServices(response.data.services);\n        return response.data.services;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      setBusinessError('Failed to load services');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const createService = async serviceData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.post('/services', serviceData);\n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => [...prevServices, response.data.service]);\n        return {\n          success: true,\n          service: response.data.service\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to create service'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.error('Error creating service:', error);\n      setBusinessError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create service');\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const updateService = async (serviceId, serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put(`/services/${serviceId}`, serviceData);\n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => prevServices.map(service => service._id === serviceId ? response.data.service : service));\n        return {\n          success: true,\n          service: response.data.service\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update service'\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      console.error('Error updating service:', error);\n      setBusinessError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update service');\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const deleteService = async serviceId => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      await api.delete(`/services/${serviceId}`);\n\n      // Update services list\n      setServices(prevServices => prevServices.filter(service => service._id !== serviceId));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n      console.error('Error deleting service:', error);\n      setBusinessError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete service');\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to delete service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Service category management\n  const fetchServiceCategories = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/service-categories');\n      if (response.data && response.data.categories) {\n        setServiceCategories(response.data.categories);\n        return response.data.categories;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching service categories:', error);\n      setBusinessError('Failed to load service categories');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const createServiceCategory = async categoryData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.post('/service-categories', categoryData);\n      if (response.data && response.data.category) {\n        // Update categories list\n        setServiceCategories(prevCategories => [...prevCategories, response.data.category]);\n        return {\n          success: true,\n          category: response.data.category\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to create service category'\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data, _error$response8, _error$response8$data;\n      console.error('Error creating service category:', error);\n      setBusinessError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to create service category');\n      return {\n        success: false,\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to create service category'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Staff management\n  const fetchStaff = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/staff');\n      if (response.data && response.data.staff) {\n        setStaff(response.data.staff);\n        return response.data.staff;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching staff:', error);\n      setBusinessError('Failed to load staff');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Customer management\n  const fetchCustomers = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.search) queryParams.append('search', options.search);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/customers${query}`);\n      if (response.data && response.data.customers) {\n        setCustomers(response.data.customers);\n        return {\n          customers: response.data.customers,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      return {\n        customers: [],\n        total: 0,\n        pages: 0\n      };\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      setBusinessError('Failed to load customers');\n      return {\n        customers: [],\n        total: 0,\n        pages: 0\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Appointment management\n  const fetchAppointments = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.startDate) queryParams.append('startDate', options.startDate);\n      if (options.endDate) queryParams.append('endDate', options.endDate);\n      if (options.status) queryParams.append('status', options.status);\n      if (options.serviceId) queryParams.append('serviceId', options.serviceId);\n      if (options.staffId) queryParams.append('staffId', options.staffId);\n      if (options.customerId) queryParams.append('customerId', options.customerId);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/appointments${query}`);\n      if (response.data && response.data.appointments) {\n        setAppointments(response.data.appointments);\n        return {\n          appointments: response.data.appointments,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      return {\n        appointments: [],\n        total: 0,\n        pages: 0\n      };\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      setBusinessError('Failed to load appointments');\n      return {\n        appointments: [],\n        total: 0,\n        pages: 0\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Business profile management\n  const updateBusinessProfile = async profileData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put('/business/profile', profileData);\n      if (response.data && response.data.business) {\n        setBusinessProfile(response.data.business);\n        return {\n          success: true,\n          business: response.data.business\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update business profile'\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data, _error$response10, _error$response10$dat;\n      console.error('Error updating business profile:', error);\n      setBusinessError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to update business profile');\n      return {\n        success: false,\n        error: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to update business profile'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Widget integration\n  const getWidgetSettings = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/widget/settings');\n      if (response.data && response.data.settings) {\n        return {\n          success: true,\n          settings: response.data.settings\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to get widget settings'\n      };\n    } catch (error) {\n      var _error$response11, _error$response11$dat, _error$response12, _error$response12$dat;\n      console.error('Error getting widget settings:', error);\n      setBusinessError(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || 'Failed to get widget settings');\n      return {\n        success: false,\n        error: ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || 'Failed to get widget settings'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const updateWidgetSettings = async settingsData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put('/widget/settings', settingsData);\n      if (response.data && response.data.settings) {\n        return {\n          success: true,\n          settings: response.data.settings\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update widget settings'\n      };\n    } catch (error) {\n      var _error$response13, _error$response13$dat, _error$response14, _error$response14$dat;\n      console.error('Error updating widget settings:', error);\n      setBusinessError(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.message) || 'Failed to update widget settings');\n      return {\n        success: false,\n        error: ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || 'Failed to update widget settings'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BusinessContext.Provider, {\n    value: {\n      // Business profile\n      businessProfile,\n      updateBusinessProfile,\n      // Service management\n      services,\n      fetchServices,\n      createService,\n      updateService,\n      deleteService,\n      // Service categories\n      serviceCategories,\n      fetchServiceCategories,\n      createServiceCategory,\n      // Staff management\n      staff,\n      fetchStaff,\n      // Customer management\n      customers,\n      fetchCustomers,\n      // Appointment management\n      appointments,\n      fetchAppointments,\n      // Widget integration\n      getWidgetSettings,\n      updateWidgetSettings,\n      // Loading and error states\n      businessLoading,\n      businessError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n};\n_s2(BusinessProvider, \"nEUlmwNdRD0hI1ktQnb90KsllVQ=\", false, function () {\n  return [useAuth];\n});\n_c = BusinessProvider;\nexport default BusinessContext;\nvar _c;\n$RefreshReg$(_c, \"BusinessProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","api","useAuth","jsxDEV","_jsxDEV","BusinessContext","useBusiness","_s","BusinessProvider","children","_s2","isAuthenticated","currentUser","businessProfile","setBusinessProfile","services","setServices","serviceCategories","setServiceCategories","locations","setLocations","staff","setStaff","customers","setCustomers","appointments","setAppointments","businessLoading","setBusinessLoading","businessError","setBusinessError","fetchBusinessProfile","response","get","data","business","error","console","fetchServices","options","queryParams","URLSearchParams","category","append","active","undefined","sortBy","limit","query","toString","createService","serviceData","post","service","prevServices","success","_error$response","_error$response$data","_error$response2","_error$response2$data","message","updateService","serviceId","put","map","_id","_error$response3","_error$response3$data","_error$response4","_error$response4$data","deleteService","delete","filter","_error$response5","_error$response5$data","_error$response6","_error$response6$data","fetchServiceCategories","categories","createServiceCategory","categoryData","prevCategories","_error$response7","_error$response7$data","_error$response8","_error$response8$data","fetchStaff","fetchCustomers","search","page","total","pages","fetchAppointments","startDate","endDate","status","staffId","customerId","updateBusinessProfile","profileData","_error$response9","_error$response9$data","_error$response10","_error$response10$dat","getWidgetSettings","settings","_error$response11","_error$response11$dat","_error$response12","_error$response12$dat","updateWidgetSettings","settingsData","_error$response13","_error$response13$dat","_error$response14","_error$response14$dat","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/BusinessContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Create context for business management\nconst BusinessContext = createContext();\n\n// Custom hook to use the business context\nexport const useBusiness = () => useContext(BusinessContext);\n\n// Provider component\nexport const BusinessProvider = ({ children }) => {\n  const { isAuthenticated, currentUser } = useAuth();\n  \n  // Business state\n  const [businessProfile, setBusinessProfile] = useState(null);\n  const [services, setServices] = useState([]);\n  const [serviceCategories, setServiceCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [staff, setStaff] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [businessLoading, setBusinessLoading] = useState(false);\n  const [businessError, setBusinessError] = useState(null);\n  \n  // Fetch business profile on authentication\n  useEffect(() => {\n    const fetchBusinessProfile = async () => {\n      if (!isAuthenticated || !currentUser) return;\n      \n      try {\n        setBusinessLoading(true);\n        setBusinessError(null);\n        \n        const response = await api.get('/business/profile');\n        \n        if (response.data && response.data.business) {\n          setBusinessProfile(response.data.business);\n        }\n      } catch (error) {\n        console.error('Error fetching business profile:', error);\n        setBusinessError('Failed to load business profile');\n      } finally {\n        setBusinessLoading(false);\n      }\n    };\n    \n    fetchBusinessProfile();\n  }, [isAuthenticated, currentUser]);\n  \n  // Service management\n  const fetchServices = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.category) queryParams.append('category', options.category);\n      if (options.active !== undefined) queryParams.append('active', options.active);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/services${query}`);\n      \n      if (response.data && response.data.services) {\n        setServices(response.data.services);\n        return response.data.services;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      setBusinessError('Failed to load services');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const createService = async (serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.post('/services', serviceData);\n      \n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => [...prevServices, response.data.service]);\n        return { success: true, service: response.data.service };\n      }\n      \n      return { success: false, error: 'Failed to create service' };\n    } catch (error) {\n      console.error('Error creating service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to create service');\n      return { success: false, error: error.response?.data?.message || 'Failed to create service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const updateService = async (serviceId, serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put(`/services/${serviceId}`, serviceData);\n      \n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => \n          prevServices.map(service => \n            service._id === serviceId ? response.data.service : service\n          )\n        );\n        return { success: true, service: response.data.service };\n      }\n      \n      return { success: false, error: 'Failed to update service' };\n    } catch (error) {\n      console.error('Error updating service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update service');\n      return { success: false, error: error.response?.data?.message || 'Failed to update service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const deleteService = async (serviceId) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      await api.delete(`/services/${serviceId}`);\n      \n      // Update services list\n      setServices(prevServices => \n        prevServices.filter(service => service._id !== serviceId)\n      );\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to delete service');\n      return { success: false, error: error.response?.data?.message || 'Failed to delete service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Service category management\n  const fetchServiceCategories = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/service-categories');\n      \n      if (response.data && response.data.categories) {\n        setServiceCategories(response.data.categories);\n        return response.data.categories;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching service categories:', error);\n      setBusinessError('Failed to load service categories');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const createServiceCategory = async (categoryData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.post('/service-categories', categoryData);\n      \n      if (response.data && response.data.category) {\n        // Update categories list\n        setServiceCategories(prevCategories => [...prevCategories, response.data.category]);\n        return { success: true, category: response.data.category };\n      }\n      \n      return { success: false, error: 'Failed to create service category' };\n    } catch (error) {\n      console.error('Error creating service category:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to create service category');\n      return { success: false, error: error.response?.data?.message || 'Failed to create service category' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Staff management\n  const fetchStaff = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/staff');\n      \n      if (response.data && response.data.staff) {\n        setStaff(response.data.staff);\n        return response.data.staff;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching staff:', error);\n      setBusinessError('Failed to load staff');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Customer management\n  const fetchCustomers = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.search) queryParams.append('search', options.search);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/customers${query}`);\n      \n      if (response.data && response.data.customers) {\n        setCustomers(response.data.customers);\n        return {\n          customers: response.data.customers,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      \n      return { customers: [], total: 0, pages: 0 };\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      setBusinessError('Failed to load customers');\n      return { customers: [], total: 0, pages: 0 };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Appointment management\n  const fetchAppointments = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.startDate) queryParams.append('startDate', options.startDate);\n      if (options.endDate) queryParams.append('endDate', options.endDate);\n      if (options.status) queryParams.append('status', options.status);\n      if (options.serviceId) queryParams.append('serviceId', options.serviceId);\n      if (options.staffId) queryParams.append('staffId', options.staffId);\n      if (options.customerId) queryParams.append('customerId', options.customerId);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/appointments${query}`);\n      \n      if (response.data && response.data.appointments) {\n        setAppointments(response.data.appointments);\n        return {\n          appointments: response.data.appointments,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      \n      return { appointments: [], total: 0, pages: 0 };\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      setBusinessError('Failed to load appointments');\n      return { appointments: [], total: 0, pages: 0 };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Business profile management\n  const updateBusinessProfile = async (profileData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put('/business/profile', profileData);\n      \n      if (response.data && response.data.business) {\n        setBusinessProfile(response.data.business);\n        return { success: true, business: response.data.business };\n      }\n      \n      return { success: false, error: 'Failed to update business profile' };\n    } catch (error) {\n      console.error('Error updating business profile:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update business profile');\n      return { success: false, error: error.response?.data?.message || 'Failed to update business profile' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Widget integration\n  const getWidgetSettings = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/widget/settings');\n      \n      if (response.data && response.data.settings) {\n        return { success: true, settings: response.data.settings };\n      }\n      \n      return { success: false, error: 'Failed to get widget settings' };\n    } catch (error) {\n      console.error('Error getting widget settings:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to get widget settings');\n      return { success: false, error: error.response?.data?.message || 'Failed to get widget settings' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const updateWidgetSettings = async (settingsData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put('/widget/settings', settingsData);\n      \n      if (response.data && response.data.settings) {\n        return { success: true, settings: response.data.settings };\n      }\n      \n      return { success: false, error: 'Failed to update widget settings' };\n    } catch (error) {\n      console.error('Error updating widget settings:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update widget settings');\n      return { success: false, error: error.response?.data?.message || 'Failed to update widget settings' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  return (\n    <BusinessContext.Provider\n      value={{\n        // Business profile\n        businessProfile,\n        updateBusinessProfile,\n        \n        // Service management\n        services,\n        fetchServices,\n        createService,\n        updateService,\n        deleteService,\n        \n        // Service categories\n        serviceCategories,\n        fetchServiceCategories,\n        createServiceCategory,\n        \n        // Staff management\n        staff,\n        fetchStaff,\n        \n        // Customer management\n        customers,\n        fetchCustomers,\n        \n        // Appointment management\n        appointments,\n        fetchAppointments,\n        \n        // Widget integration\n        getWidgetSettings,\n        updateWidgetSettings,\n        \n        // Loading and error states\n        businessLoading,\n        businessError\n      }}\n    >\n      {children}\n    </BusinessContext.Provider>\n  );\n};\n\nexport default BusinessContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}