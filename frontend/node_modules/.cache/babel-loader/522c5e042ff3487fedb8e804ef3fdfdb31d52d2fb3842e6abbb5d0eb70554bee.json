{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create a context for theme management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the theme context\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// Theme provider component\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Check local storage for saved theme preference or use system preference\n  const getInitialTheme = () => {\n    const savedTheme = localStorage.getItem('bookingpro-theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check for system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    return 'light';\n  };\n  const [theme, setTheme] = useState(getInitialTheme);\n\n  // Update theme in local storage when it changes\n  useEffect(() => {\n    localStorage.setItem('bookingpro-theme', theme);\n    // Apply theme to body element\n    if (theme === 'dark') {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [theme]);\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  // Set specific theme\n  const setSpecificTheme = newTheme => {\n    if (newTheme === 'light' || newTheme === 'dark') {\n      setTheme(newTheme);\n    }\n  };\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = e => {\n      // Only change theme if user hasn't manually set a preference\n      if (!localStorage.getItem('bookingpro-theme')) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme,\n      setTheme: setSpecificTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"o5rFCRk3YRezGGNCZN87x/VFgQo=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","getInitialTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","theme","setTheme","setItem","document","body","classList","add","remove","toggleTheme","prevTheme","setSpecificTheme","newTheme","mediaQuery","handleChange","e","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create a context for theme management\nconst ThemeContext = createContext();\n\n// Custom hook to use the theme context\nexport const useTheme = () => useContext(ThemeContext);\n\n// Theme provider component\nexport const ThemeProvider = ({ children }) => {\n  // Check local storage for saved theme preference or use system preference\n  const getInitialTheme = () => {\n    const savedTheme = localStorage.getItem('bookingpro-theme');\n    \n    if (savedTheme) {\n      return savedTheme;\n    }\n    \n    // Check for system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'light';\n  };\n  \n  const [theme, setTheme] = useState(getInitialTheme);\n  \n  // Update theme in local storage when it changes\n  useEffect(() => {\n    localStorage.setItem('bookingpro-theme', theme);\n    // Apply theme to body element\n    if (theme === 'dark') {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [theme]);\n  \n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  \n  // Set specific theme\n  const setSpecificTheme = (newTheme) => {\n    if (newTheme === 'light' || newTheme === 'dark') {\n      setTheme(newTheme);\n    }\n  };\n  \n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e) => {\n      // Only change theme if user hasn't manually set a preference\n      if (!localStorage.getItem('bookingpro-theme')) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    \n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n  \n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme: setSpecificTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,YAAY,CAAC;AAAA;;AAEtD;AAAAE,EAAA,CAFaD,QAAQ;AAGrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IAE3D,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIG,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAClF,OAAO,MAAM;IACf;IAEA,OAAO,OAAO;EAChB,CAAC;EAED,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAACW,eAAe,CAAC;;EAEnD;EACAT,SAAS,CAAC,MAAM;IACdW,YAAY,CAACO,OAAO,CAAC,kBAAkB,EAAEF,KAAK,CAAC;IAC/C;IACA,IAAIA,KAAK,KAAK,MAAM,EAAE;MACpBG,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,CAAC;IAC3C,CAAC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,YAAY,CAAC;IAC9C;EACF,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBP,QAAQ,CAACQ,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;IACrC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAC/CV,QAAQ,CAACU,QAAQ,CAAC;IACpB;EACF,CAAC;;EAED;EACA3B,SAAS,CAAC,MAAM;IACd,MAAM4B,UAAU,GAAGf,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IAEpE,MAAMe,YAAY,GAAIC,CAAC,IAAK;MAC1B;MACA,IAAI,CAACnB,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC,EAAE;QAC7CK,QAAQ,CAACa,CAAC,CAACf,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;MACxC;IACF,CAAC;IAEDa,UAAU,CAACG,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAEnD,OAAO,MAAM;MACXD,UAAU,CAACI,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA,CAACC,YAAY,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAElB,KAAK;MAAEQ,WAAW;MAAEP,QAAQ,EAAES;IAAiB,CAAE;IAAAnB,QAAA,EAC9EA;EAAQ;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC9B,GAAA,CAjEWF,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}