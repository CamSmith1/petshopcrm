{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/pages/CustomFields.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport Card from '../components/common/Card';\nimport EmptyState from '../components/common/EmptyState';\nimport Modal from '../components/common/Modal';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomFields = () => {\n  _s();\n  const [fields, setFields] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    label: '',\n    type: 'text',\n    required: false,\n    options: [],\n    appliesTo: 'pet',\n    // pet, customer, service, appointment\n    description: ''\n  });\n  const [newOption, setNewOption] = useState('');\n\n  // Field type options\n  const fieldTypes = [{\n    id: 'text',\n    name: 'Text'\n  }, {\n    id: 'number',\n    name: 'Number'\n  }, {\n    id: 'select',\n    name: 'Dropdown'\n  }, {\n    id: 'checkbox',\n    name: 'Checkbox'\n  }, {\n    id: 'radio',\n    name: 'Radio Buttons'\n  }, {\n    id: 'date',\n    name: 'Date'\n  }, {\n    id: 'textarea',\n    name: 'Text Area'\n  }];\n\n  // Applies to options\n  const entityTypes = [{\n    id: 'pet',\n    name: 'Pet'\n  }, {\n    id: 'customer',\n    name: 'Customer'\n  }, {\n    id: 'service',\n    name: 'Service'\n  }, {\n    id: 'appointment',\n    name: 'Appointment'\n  }];\n  useEffect(() => {\n    const fetchCustomFields = async () => {\n      try {\n        setLoading(true);\n\n        // In a real app, this would be an API call\n        // Mock data for demonstration\n        await new Promise(resolve => setTimeout(resolve, 800));\n        const mockFields = [{\n          id: '1',\n          name: 'allergies',\n          label: 'Allergies',\n          type: 'textarea',\n          required: false,\n          options: [],\n          appliesTo: 'pet',\n          description: 'List any known allergies for the pet'\n        }, {\n          id: '2',\n          name: 'microchip_id',\n          label: 'Microchip ID',\n          type: 'text',\n          required: false,\n          options: [],\n          appliesTo: 'pet',\n          description: 'The pet\\'s microchip identification number'\n        }, {\n          id: '3',\n          name: 'coat_type',\n          label: 'Coat Type',\n          type: 'select',\n          required: true,\n          options: ['Short', 'Medium', 'Long', 'Double', 'Curly', 'Wire'],\n          appliesTo: 'pet',\n          description: 'The type of coat the pet has'\n        }, {\n          id: '4',\n          name: 'emergency_contact',\n          label: 'Emergency Contact',\n          type: 'text',\n          required: true,\n          options: [],\n          appliesTo: 'customer',\n          description: 'Name and phone number for emergency contact'\n        }];\n        setFields(mockFields);\n      } catch (error) {\n        console.error('Error fetching custom fields:', error);\n        toast.error('Failed to load custom fields');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCustomFields();\n  }, []);\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      label: '',\n      type: 'text',\n      required: false,\n      options: [],\n      appliesTo: 'pet',\n      description: ''\n    });\n    setNewOption('');\n  };\n  const handleAddOption = () => {\n    if (!newOption.trim()) return;\n    setFormData(prev => ({\n      ...prev,\n      options: [...prev.options, newOption.trim()]\n    }));\n    setNewOption('');\n  };\n  const handleRemoveOption = index => {\n    setFormData(prev => ({\n      ...prev,\n      options: prev.options.filter((_, i) => i !== index)\n    }));\n  };\n  const validateForm = () => {\n    if (!formData.name.trim()) {\n      toast.error('Field name is required');\n      return false;\n    }\n    if (!formData.label.trim()) {\n      toast.error('Field label is required');\n      return false;\n    }\n\n    // Check for spaces and special characters in name\n    if (!/^[a-z0-9_]+$/.test(formData.name)) {\n      toast.error('Field name can only contain lowercase letters, numbers, and underscores');\n      return false;\n    }\n\n    // Check if dropdown/radio has options\n    if (['select', 'radio'].includes(formData.type) && formData.options.length === 0) {\n      toast.error(`${formData.type === 'select' ? 'Dropdown' : 'Radio buttons'} must have at least one option`);\n      return false;\n    }\n    return true;\n  };\n  const handleAddField = async () => {\n    try {\n      if (!validateForm()) return;\n\n      // In a real app, this would be an API call\n      // Mock adding for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const newField = {\n        id: Date.now().toString(),\n        ...formData\n      };\n      setFields(prev => [...prev, newField]);\n      resetForm();\n      setShowAddModal(false);\n      toast.success('Custom field added successfully');\n    } catch (error) {\n      console.error('Error adding custom field:', error);\n      toast.error('Failed to add custom field');\n    }\n  };\n  const handleEditField = field => {\n    setSelectedField(field);\n    setFormData({\n      name: field.name,\n      label: field.label,\n      type: field.type,\n      required: field.required,\n      options: [...field.options],\n      appliesTo: field.appliesTo,\n      description: field.description\n    });\n    setShowEditModal(true);\n  };\n  const handleUpdateField = async () => {\n    try {\n      if (!validateForm()) return;\n\n      // In a real app, this would be an API call\n      // Mock updating for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      setFields(prev => prev.map(field => field.id === selectedField.id ? {\n        ...field,\n        ...formData\n      } : field));\n      resetForm();\n      setShowEditModal(false);\n      setSelectedField(null);\n      toast.success('Custom field updated successfully');\n    } catch (error) {\n      console.error('Error updating custom field:', error);\n      toast.error('Failed to update custom field');\n    }\n  };\n  const handleDeleteField = async fieldId => {\n    if (window.confirm('Are you sure you want to delete this custom field? This may affect existing records.')) {\n      try {\n        // In a real app, this would be an API call\n        // Mock deleting for demonstration\n        await new Promise(resolve => setTimeout(resolve, 500));\n        setFields(prev => prev.filter(field => field.id !== fieldId));\n        toast.success('Custom field deleted successfully');\n      } catch (error) {\n        console.error('Error deleting custom field:', error);\n        toast.error('Failed to delete custom field');\n      }\n    }\n  };\n  const getEntityName = entityId => {\n    const entity = entityTypes.find(type => type.id === entityId);\n    return entity ? entity.name : 'Unknown';\n  };\n  const getTypeName = typeId => {\n    const type = fieldTypes.find(type => type.id === typeId);\n    return type ? type.name : 'Unknown';\n  };\n  const renderAddEditModalContent = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          className: \"form-label\",\n          children: \"Field Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          className: \"form-control\",\n          value: formData.name,\n          onChange: handleInputChange,\n          placeholder: \"e.g. microchip_id\",\n          disabled: showEditModal // Can't change name when editing\n          ,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"form-text text-muted\",\n          children: \"Use only lowercase letters, numbers, and underscores. This is used internally.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"label\",\n          className: \"form-label\",\n          children: \"Display Label\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"label\",\n          name: \"label\",\n          className: \"form-control\",\n          value: formData.label,\n          onChange: handleInputChange,\n          placeholder: \"e.g. Microchip ID\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"form-text text-muted\",\n          children: \"This is what users will see on forms.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"type\",\n          className: \"form-label\",\n          children: \"Field Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"type\",\n          name: \"type\",\n          className: \"form-control\",\n          value: formData.type,\n          onChange: handleInputChange,\n          disabled: showEditModal // Can't change type when editing\n          ,\n          required: true,\n          children: fieldTypes.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: type.id,\n            children: type.name\n          }, type.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"appliesTo\",\n          className: \"form-label\",\n          children: \"Applies To\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"appliesTo\",\n          name: \"appliesTo\",\n          className: \"form-control\",\n          value: formData.appliesTo,\n          onChange: handleInputChange,\n          disabled: showEditModal // Can't change entity when editing\n          ,\n          required: true,\n          children: entityTypes.map(entity => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: entity.id,\n            children: entity.name\n          }, entity.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        className: \"form-label\",\n        children: \"Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"description\",\n        name: \"description\",\n        className: \"form-control\",\n        value: formData.description,\n        onChange: handleInputChange,\n        placeholder: \"Describe the purpose of this field...\",\n        rows: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"required\",\n          name: \"required\",\n          checked: formData.required,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"required\",\n          children: \"Required Field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), ['select', 'radio'].includes(formData.type) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"form-label\",\n        children: \"Options\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-list\",\n        children: formData.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn-close\",\n            onClick: () => handleRemoveOption(index),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-add\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: newOption,\n          onChange: e => setNewOption(e.target.value),\n          placeholder: \"Add new option\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: handleAddOption,\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  const renderAddModal = () => /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: showAddModal,\n    onClose: () => setShowAddModal(false),\n    title: \"Add Custom Field\",\n    footer: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => setShowAddModal(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleAddField,\n        children: \"Add Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true),\n    children: renderAddEditModalContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n  const renderEditModal = () => /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: showEditModal,\n    onClose: () => {\n      setShowEditModal(false);\n      setSelectedField(null);\n      resetForm();\n    },\n    title: \"Edit Custom Field\",\n    footer: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary\",\n        onClick: () => {\n          setShowEditModal(false);\n          setSelectedField(null);\n          resetForm();\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleUpdateField,\n        children: \"Update Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true),\n    children: renderAddEditModalContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 433,\n    columnNumber: 5\n  }, this);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-fields-page\",\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Custom Fields\",\n      subtitle: \"Create and manage custom fields for pets, customers, services, and appointments\",\n      actions: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => {\n          resetForm();\n          setShowAddModal(true);\n        },\n        children: \"Add Field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), fields.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-3\",\n      children: fields.map(field => /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"field-badges\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge badge-primary\",\n              children: getEntityName(field.appliesTo)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 19\n            }, this), field.required && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"badge badge-warning\",\n              children: \"Required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-label\",\n              children: \"Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 508,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-value\",\n              children: field.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-label\",\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-value\",\n              children: getTypeName(field.type)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 17\n          }, this), field.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-label\",\n              children: \"Description:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-value\",\n              children: field.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 19\n          }, this), ['select', 'radio'].includes(field.type) && field.options.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detail-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-label\",\n              children: \"Options:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"detail-value\",\n              children: field.options.join(', ')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary btn-sm\",\n            onClick: () => handleEditField(field),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger btn-sm\",\n            onClick: () => handleDeleteField(field.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 15\n        }, this)]\n      }, field.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EmptyState, {\n      title: \"No Custom Fields\",\n      message: \"You haven't created any custom fields yet. Custom fields allow you to collect additional information about pets, customers, services, and appointments.\",\n      actionText: \"Add Field\",\n      onActionClick: () => {\n        resetForm();\n        setShowAddModal(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this), renderAddModal(), renderEditModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomFields, \"IPC/giXHqU2jCAHq/kNlkdDd4ZM=\");\n_c = CustomFields;\nexport default CustomFields;\nvar _c;\n$RefreshReg$(_c, \"CustomFields\");","map":{"version":3,"names":["React","useState","useEffect","toast","Card","EmptyState","Modal","PageHeader","LoadingSpinner","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomFields","_s","fields","setFields","loading","setLoading","showAddModal","setShowAddModal","showEditModal","setShowEditModal","selectedField","setSelectedField","formData","setFormData","name","label","type","required","options","appliesTo","description","newOption","setNewOption","fieldTypes","id","entityTypes","fetchCustomFields","Promise","resolve","setTimeout","mockFields","error","console","handleInputChange","e","value","checked","target","prev","resetForm","handleAddOption","trim","handleRemoveOption","index","filter","_","i","validateForm","test","includes","length","handleAddField","newField","Date","now","toString","success","handleEditField","field","handleUpdateField","map","handleDeleteField","fieldId","window","confirm","getEntityName","entityId","entity","find","getTypeName","typeId","renderAddEditModalContent","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","disabled","rows","option","onClick","renderAddModal","isOpen","onClose","title","footer","renderEditModal","subtitle","actions","join","message","actionText","onActionClick","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/CustomFields.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport Card from '../components/common/Card';\nimport EmptyState from '../components/common/EmptyState';\nimport Modal from '../components/common/Modal';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\n\nconst CustomFields = () => {\n  const [fields, setFields] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    label: '',\n    type: 'text',\n    required: false,\n    options: [],\n    appliesTo: 'pet', // pet, customer, service, appointment\n    description: ''\n  });\n  const [newOption, setNewOption] = useState('');\n  \n  // Field type options\n  const fieldTypes = [\n    { id: 'text', name: 'Text' },\n    { id: 'number', name: 'Number' },\n    { id: 'select', name: 'Dropdown' },\n    { id: 'checkbox', name: 'Checkbox' },\n    { id: 'radio', name: 'Radio Buttons' },\n    { id: 'date', name: 'Date' },\n    { id: 'textarea', name: 'Text Area' }\n  ];\n  \n  // Applies to options\n  const entityTypes = [\n    { id: 'pet', name: 'Pet' },\n    { id: 'customer', name: 'Customer' },\n    { id: 'service', name: 'Service' },\n    { id: 'appointment', name: 'Appointment' }\n  ];\n  \n  useEffect(() => {\n    const fetchCustomFields = async () => {\n      try {\n        setLoading(true);\n        \n        // In a real app, this would be an API call\n        // Mock data for demonstration\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        const mockFields = [\n          {\n            id: '1',\n            name: 'allergies',\n            label: 'Allergies',\n            type: 'textarea',\n            required: false,\n            options: [],\n            appliesTo: 'pet',\n            description: 'List any known allergies for the pet'\n          },\n          {\n            id: '2',\n            name: 'microchip_id',\n            label: 'Microchip ID',\n            type: 'text',\n            required: false,\n            options: [],\n            appliesTo: 'pet',\n            description: 'The pet\\'s microchip identification number'\n          },\n          {\n            id: '3',\n            name: 'coat_type',\n            label: 'Coat Type',\n            type: 'select',\n            required: true,\n            options: ['Short', 'Medium', 'Long', 'Double', 'Curly', 'Wire'],\n            appliesTo: 'pet',\n            description: 'The type of coat the pet has'\n          },\n          {\n            id: '4',\n            name: 'emergency_contact',\n            label: 'Emergency Contact',\n            type: 'text',\n            required: true,\n            options: [],\n            appliesTo: 'customer',\n            description: 'Name and phone number for emergency contact'\n          }\n        ];\n        \n        setFields(mockFields);\n      } catch (error) {\n        console.error('Error fetching custom fields:', error);\n        toast.error('Failed to load custom fields');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchCustomFields();\n  }, []);\n  \n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  const resetForm = () => {\n    setFormData({\n      name: '',\n      label: '',\n      type: 'text',\n      required: false,\n      options: [],\n      appliesTo: 'pet',\n      description: ''\n    });\n    setNewOption('');\n  };\n  \n  const handleAddOption = () => {\n    if (!newOption.trim()) return;\n    \n    setFormData(prev => ({\n      ...prev,\n      options: [...prev.options, newOption.trim()]\n    }));\n    \n    setNewOption('');\n  };\n  \n  const handleRemoveOption = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      options: prev.options.filter((_, i) => i !== index)\n    }));\n  };\n  \n  const validateForm = () => {\n    if (!formData.name.trim()) {\n      toast.error('Field name is required');\n      return false;\n    }\n    \n    if (!formData.label.trim()) {\n      toast.error('Field label is required');\n      return false;\n    }\n    \n    // Check for spaces and special characters in name\n    if (!/^[a-z0-9_]+$/.test(formData.name)) {\n      toast.error('Field name can only contain lowercase letters, numbers, and underscores');\n      return false;\n    }\n    \n    // Check if dropdown/radio has options\n    if (['select', 'radio'].includes(formData.type) && formData.options.length === 0) {\n      toast.error(`${formData.type === 'select' ? 'Dropdown' : 'Radio buttons'} must have at least one option`);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  const handleAddField = async () => {\n    try {\n      if (!validateForm()) return;\n      \n      // In a real app, this would be an API call\n      // Mock adding for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const newField = {\n        id: Date.now().toString(),\n        ...formData\n      };\n      \n      setFields(prev => [...prev, newField]);\n      resetForm();\n      setShowAddModal(false);\n      toast.success('Custom field added successfully');\n    } catch (error) {\n      console.error('Error adding custom field:', error);\n      toast.error('Failed to add custom field');\n    }\n  };\n  \n  const handleEditField = (field) => {\n    setSelectedField(field);\n    setFormData({\n      name: field.name,\n      label: field.label,\n      type: field.type,\n      required: field.required,\n      options: [...field.options],\n      appliesTo: field.appliesTo,\n      description: field.description\n    });\n    setShowEditModal(true);\n  };\n  \n  const handleUpdateField = async () => {\n    try {\n      if (!validateForm()) return;\n      \n      // In a real app, this would be an API call\n      // Mock updating for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      setFields(prev => \n        prev.map(field => \n          field.id === selectedField.id ? { ...field, ...formData } : field\n        )\n      );\n      \n      resetForm();\n      setShowEditModal(false);\n      setSelectedField(null);\n      toast.success('Custom field updated successfully');\n    } catch (error) {\n      console.error('Error updating custom field:', error);\n      toast.error('Failed to update custom field');\n    }\n  };\n  \n  const handleDeleteField = async (fieldId) => {\n    if (window.confirm('Are you sure you want to delete this custom field? This may affect existing records.')) {\n      try {\n        // In a real app, this would be an API call\n        // Mock deleting for demonstration\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        setFields(prev => prev.filter(field => field.id !== fieldId));\n        toast.success('Custom field deleted successfully');\n      } catch (error) {\n        console.error('Error deleting custom field:', error);\n        toast.error('Failed to delete custom field');\n      }\n    }\n  };\n  \n  const getEntityName = (entityId) => {\n    const entity = entityTypes.find(type => type.id === entityId);\n    return entity ? entity.name : 'Unknown';\n  };\n  \n  const getTypeName = (typeId) => {\n    const type = fieldTypes.find(type => type.id === typeId);\n    return type ? type.name : 'Unknown';\n  };\n  \n  const renderAddEditModalContent = () => (\n    <>\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"name\" className=\"form-label\">Field Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            className=\"form-control\"\n            value={formData.name}\n            onChange={handleInputChange}\n            placeholder=\"e.g. microchip_id\"\n            disabled={showEditModal} // Can't change name when editing\n            required\n          />\n          <small className=\"form-text text-muted\">\n            Use only lowercase letters, numbers, and underscores. This is used internally.\n          </small>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"label\" className=\"form-label\">Display Label</label>\n          <input\n            type=\"text\"\n            id=\"label\"\n            name=\"label\"\n            className=\"form-control\"\n            value={formData.label}\n            onChange={handleInputChange}\n            placeholder=\"e.g. Microchip ID\"\n            required\n          />\n          <small className=\"form-text text-muted\">\n            This is what users will see on forms.\n          </small>\n        </div>\n      </div>\n      \n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"type\" className=\"form-label\">Field Type</label>\n          <select\n            id=\"type\"\n            name=\"type\"\n            className=\"form-control\"\n            value={formData.type}\n            onChange={handleInputChange}\n            disabled={showEditModal} // Can't change type when editing\n            required\n          >\n            {fieldTypes.map(type => (\n              <option key={type.id} value={type.id}>\n                {type.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"appliesTo\" className=\"form-label\">Applies To</label>\n          <select\n            id=\"appliesTo\"\n            name=\"appliesTo\"\n            className=\"form-control\"\n            value={formData.appliesTo}\n            onChange={handleInputChange}\n            disabled={showEditModal} // Can't change entity when editing\n            required\n          >\n            {entityTypes.map(entity => (\n              <option key={entity.id} value={entity.id}>\n                {entity.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"description\" className=\"form-label\">Description</label>\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          className=\"form-control\"\n          value={formData.description}\n          onChange={handleInputChange}\n          placeholder=\"Describe the purpose of this field...\"\n          rows={2}\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <div className=\"custom-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"required\"\n            name=\"required\"\n            checked={formData.required}\n            onChange={handleInputChange}\n          />\n          <label htmlFor=\"required\">Required Field</label>\n        </div>\n      </div>\n      \n      {['select', 'radio'].includes(formData.type) && (\n        <div className=\"form-group\">\n          <label className=\"form-label\">Options</label>\n          <div className=\"options-list\">\n            {formData.options.map((option, index) => (\n              <div key={index} className=\"option-item\">\n                <span>{option}</span>\n                <button \n                  type=\"button\" \n                  className=\"btn-close\"\n                  onClick={() => handleRemoveOption(index)}\n                >\n                  &times;\n                </button>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"options-add\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={newOption}\n              onChange={(e) => setNewOption(e.target.value)}\n              placeholder=\"Add new option\"\n            />\n            <button \n              type=\"button\" \n              className=\"btn btn-secondary\"\n              onClick={handleAddOption}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n  \n  const renderAddModal = () => (\n    <Modal\n      isOpen={showAddModal}\n      onClose={() => setShowAddModal(false)}\n      title=\"Add Custom Field\"\n      footer={\n        <>\n          <button \n            className=\"btn btn-secondary\" \n            onClick={() => setShowAddModal(false)}\n          >\n            Cancel\n          </button>\n          <button \n            className=\"btn btn-primary\" \n            onClick={handleAddField}\n          >\n            Add Field\n          </button>\n        </>\n      }\n    >\n      {renderAddEditModalContent()}\n    </Modal>\n  );\n  \n  const renderEditModal = () => (\n    <Modal\n      isOpen={showEditModal}\n      onClose={() => {\n        setShowEditModal(false);\n        setSelectedField(null);\n        resetForm();\n      }}\n      title=\"Edit Custom Field\"\n      footer={\n        <>\n          <button \n            className=\"btn btn-secondary\" \n            onClick={() => {\n              setShowEditModal(false);\n              setSelectedField(null);\n              resetForm();\n            }}\n          >\n            Cancel\n          </button>\n          <button \n            className=\"btn btn-primary\" \n            onClick={handleUpdateField}\n          >\n            Update Field\n          </button>\n        </>\n      }\n    >\n      {renderAddEditModalContent()}\n    </Modal>\n  );\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  return (\n    <div className=\"custom-fields-page\">\n      <PageHeader\n        title=\"Custom Fields\"\n        subtitle=\"Create and manage custom fields for pets, customers, services, and appointments\"\n        actions={\n          <button \n            className=\"btn btn-primary\" \n            onClick={() => {\n              resetForm();\n              setShowAddModal(true);\n            }}\n          >\n            Add Field\n          </button>\n        }\n      />\n      \n      {fields.length > 0 ? (\n        <div className=\"grid grid-3\">\n          {fields.map(field => (\n            <Card key={field.id}>\n              <div className=\"field-header\">\n                <h3>{field.label}</h3>\n                <div className=\"field-badges\">\n                  <span className=\"badge badge-primary\">\n                    {getEntityName(field.appliesTo)}\n                  </span>\n                  {field.required && (\n                    <span className=\"badge badge-warning\">\n                      Required\n                    </span>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"field-details\">\n                <div className=\"detail-item\">\n                  <span className=\"detail-label\">Name:</span>\n                  <span className=\"detail-value\">{field.name}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"detail-label\">Type:</span>\n                  <span className=\"detail-value\">{getTypeName(field.type)}</span>\n                </div>\n                \n                {field.description && (\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Description:</span>\n                    <span className=\"detail-value\">{field.description}</span>\n                  </div>\n                )}\n                \n                {['select', 'radio'].includes(field.type) && field.options.length > 0 && (\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Options:</span>\n                    <span className=\"detail-value\">\n                      {field.options.join(', ')}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"field-actions\">\n                <button \n                  className=\"btn btn-secondary btn-sm\" \n                  onClick={() => handleEditField(field)}\n                >\n                  Edit\n                </button>\n                <button \n                  className=\"btn btn-danger btn-sm\" \n                  onClick={() => handleDeleteField(field.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <EmptyState\n          title=\"No Custom Fields\"\n          message=\"You haven't created any custom fields yet. Custom fields allow you to collect additional information about pets, customers, services, and appointments.\"\n          actionText=\"Add Field\"\n          onActionClick={() => {\n            resetForm();\n            setShowAddModal(true);\n          }}\n        />\n      )}\n      \n      {renderAddModal()}\n      {renderEditModal()}\n    </div>\n  );\n};\n\nexport default CustomFields;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}