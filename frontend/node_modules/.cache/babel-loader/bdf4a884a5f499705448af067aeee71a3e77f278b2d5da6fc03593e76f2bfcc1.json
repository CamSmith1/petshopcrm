{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/BusinessContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Create context for business management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BusinessContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the business context\nexport const useBusiness = () => {\n  _s();\n  const context = useContext(BusinessContext);\n\n  // For development mode, provide a mock business context if real context is not available\n  if (process.env.NODE_ENV === 'development' && !context) {\n    console.warn('Business context not found, using development fallback');\n    return {\n      // Business profile\n      businessProfile: {\n        id: 'dev-business-123',\n        name: 'Development Business',\n        email: 'dev-business@example.com',\n        phone: '555-123-4567',\n        address: {\n          street: '123 Dev St',\n          city: 'Development City',\n          state: 'DS',\n          zipCode: '12345',\n          country: 'DevLand'\n        },\n        businessHours: {\n          monday: {\n            isOpen: true,\n            start: '09:00',\n            end: '17:00'\n          },\n          tuesday: {\n            isOpen: true,\n            start: '09:00',\n            end: '17:00'\n          },\n          wednesday: {\n            isOpen: true,\n            start: '09:00',\n            end: '17:00'\n          },\n          thursday: {\n            isOpen: true,\n            start: '09:00',\n            end: '17:00'\n          },\n          friday: {\n            isOpen: true,\n            start: '09:00',\n            end: '17:00'\n          },\n          saturday: {\n            isOpen: false,\n            start: '',\n            end: ''\n          },\n          sunday: {\n            isOpen: false,\n            start: '',\n            end: ''\n          }\n        }\n      },\n      updateBusinessProfile: async () => ({\n        success: true\n      }),\n      // Mock service management\n      services: [],\n      fetchServices: async () => [],\n      createService: async () => ({\n        success: true\n      }),\n      updateService: async () => ({\n        success: true\n      }),\n      deleteService: async () => ({\n        success: true\n      }),\n      // Mock service categories\n      serviceCategories: [],\n      fetchServiceCategories: async () => [],\n      createServiceCategory: async () => ({\n        success: true\n      }),\n      // Mock staff management\n      staff: [],\n      fetchStaff: async () => [],\n      // Mock customer management\n      customers: [],\n      fetchCustomers: async () => ({\n        customers: [],\n        total: 0,\n        pages: 0\n      }),\n      // Mock appointment management\n      appointments: [],\n      fetchAppointments: async () => ({\n        appointments: [],\n        total: 0,\n        pages: 0\n      }),\n      // Mock widget integration\n      getWidgetSettings: async () => ({\n        success: true,\n        settings: {}\n      }),\n      updateWidgetSettings: async () => ({\n        success: true\n      }),\n      // Loading and error states\n      businessLoading: false,\n      businessError: null\n    };\n  }\n  return context;\n};\n\n// Provider component\n_s(useBusiness, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const BusinessProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isAuthenticated,\n    currentUser\n  } = useAuth();\n\n  // Business state\n  const [businessProfile, setBusinessProfile] = useState(null);\n  const [services, setServices] = useState([]);\n  const [serviceCategories, setServiceCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [staff, setStaff] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [businessLoading, setBusinessLoading] = useState(false);\n  const [businessError, setBusinessError] = useState(null);\n\n  // Fetch business profile on authentication\n  useEffect(() => {\n    const fetchBusinessProfile = async () => {\n      if (!isAuthenticated || !currentUser) return;\n      try {\n        setBusinessLoading(true);\n        setBusinessError(null);\n        const response = await api.get('/business/profile');\n        if (response.data && response.data.business) {\n          setBusinessProfile(response.data.business);\n        }\n      } catch (error) {\n        console.error('Error fetching business profile:', error);\n        setBusinessError('Failed to load business profile');\n      } finally {\n        setBusinessLoading(false);\n      }\n    };\n    fetchBusinessProfile();\n  }, [isAuthenticated, currentUser]);\n\n  // Service management\n  const fetchServices = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.category) queryParams.append('category', options.category);\n      if (options.active !== undefined) queryParams.append('active', options.active);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/services${query}`);\n      if (response.data && response.data.services) {\n        setServices(response.data.services);\n        return response.data.services;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      setBusinessError('Failed to load services');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const createService = async serviceData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.post('/services', serviceData);\n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => [...prevServices, response.data.service]);\n        return {\n          success: true,\n          service: response.data.service\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to create service'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.error('Error creating service:', error);\n      setBusinessError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create service');\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const updateService = async (serviceId, serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put(`/services/${serviceId}`, serviceData);\n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => prevServices.map(service => service._id === serviceId ? response.data.service : service));\n        return {\n          success: true,\n          service: response.data.service\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update service'\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      console.error('Error updating service:', error);\n      setBusinessError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update service');\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const deleteService = async serviceId => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      await api.delete(`/services/${serviceId}`);\n\n      // Update services list\n      setServices(prevServices => prevServices.filter(service => service._id !== serviceId));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n      console.error('Error deleting service:', error);\n      setBusinessError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete service');\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to delete service'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Service category management\n  const fetchServiceCategories = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/service-categories');\n      if (response.data && response.data.categories) {\n        setServiceCategories(response.data.categories);\n        return response.data.categories;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching service categories:', error);\n      setBusinessError('Failed to load service categories');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const createServiceCategory = async categoryData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.post('/service-categories', categoryData);\n      if (response.data && response.data.category) {\n        // Update categories list\n        setServiceCategories(prevCategories => [...prevCategories, response.data.category]);\n        return {\n          success: true,\n          category: response.data.category\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to create service category'\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data, _error$response8, _error$response8$data;\n      console.error('Error creating service category:', error);\n      setBusinessError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to create service category');\n      return {\n        success: false,\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to create service category'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Staff management\n  const fetchStaff = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/staff');\n      if (response.data && response.data.staff) {\n        setStaff(response.data.staff);\n        return response.data.staff;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching staff:', error);\n      setBusinessError('Failed to load staff');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Customer management\n  const fetchCustomers = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.search) queryParams.append('search', options.search);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/customers${query}`);\n      if (response.data && response.data.customers) {\n        setCustomers(response.data.customers);\n        return {\n          customers: response.data.customers,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      return {\n        customers: [],\n        total: 0,\n        pages: 0\n      };\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      setBusinessError('Failed to load customers');\n      return {\n        customers: [],\n        total: 0,\n        pages: 0\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Appointment management\n  const fetchAppointments = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n\n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.startDate) queryParams.append('startDate', options.startDate);\n      if (options.endDate) queryParams.append('endDate', options.endDate);\n      if (options.status) queryParams.append('status', options.status);\n      if (options.serviceId) queryParams.append('serviceId', options.serviceId);\n      if (options.staffId) queryParams.append('staffId', options.staffId);\n      if (options.customerId) queryParams.append('customerId', options.customerId);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      const response = await api.get(`/appointments${query}`);\n      if (response.data && response.data.appointments) {\n        setAppointments(response.data.appointments);\n        return {\n          appointments: response.data.appointments,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      return {\n        appointments: [],\n        total: 0,\n        pages: 0\n      };\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      setBusinessError('Failed to load appointments');\n      return {\n        appointments: [],\n        total: 0,\n        pages: 0\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Business profile management\n  const updateBusinessProfile = async profileData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put('/business/profile', profileData);\n      if (response.data && response.data.business) {\n        setBusinessProfile(response.data.business);\n        return {\n          success: true,\n          business: response.data.business\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update business profile'\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data, _error$response10, _error$response10$dat;\n      console.error('Error updating business profile:', error);\n      setBusinessError(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to update business profile');\n      return {\n        success: false,\n        error: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Failed to update business profile'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n\n  // Widget integration\n  const getWidgetSettings = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.get('/widget/settings');\n      if (response.data && response.data.settings) {\n        return {\n          success: true,\n          settings: response.data.settings\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to get widget settings'\n      };\n    } catch (error) {\n      var _error$response11, _error$response11$dat, _error$response12, _error$response12$dat;\n      console.error('Error getting widget settings:', error);\n      setBusinessError(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || 'Failed to get widget settings');\n      return {\n        success: false,\n        error: ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || 'Failed to get widget settings'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  const updateWidgetSettings = async settingsData => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      const response = await api.put('/widget/settings', settingsData);\n      if (response.data && response.data.settings) {\n        return {\n          success: true,\n          settings: response.data.settings\n        };\n      }\n      return {\n        success: false,\n        error: 'Failed to update widget settings'\n      };\n    } catch (error) {\n      var _error$response13, _error$response13$dat, _error$response14, _error$response14$dat;\n      console.error('Error updating widget settings:', error);\n      setBusinessError(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.message) || 'Failed to update widget settings');\n      return {\n        success: false,\n        error: ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || 'Failed to update widget settings'\n      };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BusinessContext.Provider, {\n    value: {\n      // Business profile\n      businessProfile,\n      updateBusinessProfile,\n      // Service management\n      services,\n      fetchServices,\n      createService,\n      updateService,\n      deleteService,\n      // Service categories\n      serviceCategories,\n      fetchServiceCategories,\n      createServiceCategory,\n      // Staff management\n      staff,\n      fetchStaff,\n      // Customer management\n      customers,\n      fetchCustomers,\n      // Appointment management\n      appointments,\n      fetchAppointments,\n      // Widget integration\n      getWidgetSettings,\n      updateWidgetSettings,\n      // Loading and error states\n      businessLoading,\n      businessError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this);\n};\n_s2(BusinessProvider, \"nEUlmwNdRD0hI1ktQnb90KsllVQ=\", false, function () {\n  return [useAuth];\n});\n_c = BusinessProvider;\nexport default BusinessContext;\nvar _c;\n$RefreshReg$(_c, \"BusinessProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","api","useAuth","jsxDEV","_jsxDEV","BusinessContext","useBusiness","_s","context","process","env","NODE_ENV","console","warn","businessProfile","id","name","email","phone","address","street","city","state","zipCode","country","businessHours","monday","isOpen","start","end","tuesday","wednesday","thursday","friday","saturday","sunday","updateBusinessProfile","success","services","fetchServices","createService","updateService","deleteService","serviceCategories","fetchServiceCategories","createServiceCategory","staff","fetchStaff","customers","fetchCustomers","total","pages","appointments","fetchAppointments","getWidgetSettings","settings","updateWidgetSettings","businessLoading","businessError","BusinessProvider","children","_s2","isAuthenticated","currentUser","setBusinessProfile","setServices","setServiceCategories","locations","setLocations","setStaff","setCustomers","setAppointments","setBusinessLoading","setBusinessError","fetchBusinessProfile","response","get","data","business","error","options","queryParams","URLSearchParams","category","append","active","undefined","sortBy","limit","query","toString","serviceData","post","service","prevServices","_error$response","_error$response$data","_error$response2","_error$response2$data","message","serviceId","put","map","_id","_error$response3","_error$response3$data","_error$response4","_error$response4$data","delete","filter","_error$response5","_error$response5$data","_error$response6","_error$response6$data","categories","categoryData","prevCategories","_error$response7","_error$response7$data","_error$response8","_error$response8$data","search","page","startDate","endDate","status","staffId","customerId","profileData","_error$response9","_error$response9$data","_error$response10","_error$response10$dat","_error$response11","_error$response11$dat","_error$response12","_error$response12$dat","settingsData","_error$response13","_error$response13$dat","_error$response14","_error$response14$dat","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/BusinessContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport api from '../services/api';\nimport { useAuth } from './AuthContext';\n\n// Create context for business management\nconst BusinessContext = createContext();\n\n// Custom hook to use the business context\nexport const useBusiness = () => {\n  const context = useContext(BusinessContext);\n  \n  // For development mode, provide a mock business context if real context is not available\n  if (process.env.NODE_ENV === 'development' && !context) {\n    console.warn('Business context not found, using development fallback');\n    return {\n      // Business profile\n      businessProfile: {\n        id: 'dev-business-123',\n        name: 'Development Business',\n        email: 'dev-business@example.com',\n        phone: '555-123-4567',\n        address: {\n          street: '123 Dev St',\n          city: 'Development City',\n          state: 'DS',\n          zipCode: '12345',\n          country: 'DevLand'\n        },\n        businessHours: {\n          monday: { isOpen: true, start: '09:00', end: '17:00' },\n          tuesday: { isOpen: true, start: '09:00', end: '17:00' },\n          wednesday: { isOpen: true, start: '09:00', end: '17:00' },\n          thursday: { isOpen: true, start: '09:00', end: '17:00' },\n          friday: { isOpen: true, start: '09:00', end: '17:00' },\n          saturday: { isOpen: false, start: '', end: '' },\n          sunday: { isOpen: false, start: '', end: '' }\n        },\n      },\n      updateBusinessProfile: async () => ({ success: true }),\n      \n      // Mock service management\n      services: [],\n      fetchServices: async () => [],\n      createService: async () => ({ success: true }),\n      updateService: async () => ({ success: true }),\n      deleteService: async () => ({ success: true }),\n      \n      // Mock service categories\n      serviceCategories: [],\n      fetchServiceCategories: async () => [],\n      createServiceCategory: async () => ({ success: true }),\n      \n      // Mock staff management\n      staff: [],\n      fetchStaff: async () => [],\n      \n      // Mock customer management\n      customers: [],\n      fetchCustomers: async () => ({ customers: [], total: 0, pages: 0 }),\n      \n      // Mock appointment management\n      appointments: [],\n      fetchAppointments: async () => ({ appointments: [], total: 0, pages: 0 }),\n      \n      // Mock widget integration\n      getWidgetSettings: async () => ({ success: true, settings: {} }),\n      updateWidgetSettings: async () => ({ success: true }),\n      \n      // Loading and error states\n      businessLoading: false,\n      businessError: null\n    };\n  }\n  \n  return context;\n};\n\n// Provider component\nexport const BusinessProvider = ({ children }) => {\n  const { isAuthenticated, currentUser } = useAuth();\n  \n  // Business state\n  const [businessProfile, setBusinessProfile] = useState(null);\n  const [services, setServices] = useState([]);\n  const [serviceCategories, setServiceCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [staff, setStaff] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [businessLoading, setBusinessLoading] = useState(false);\n  const [businessError, setBusinessError] = useState(null);\n  \n  // Fetch business profile on authentication\n  useEffect(() => {\n    const fetchBusinessProfile = async () => {\n      if (!isAuthenticated || !currentUser) return;\n      \n      try {\n        setBusinessLoading(true);\n        setBusinessError(null);\n        \n        const response = await api.get('/business/profile');\n        \n        if (response.data && response.data.business) {\n          setBusinessProfile(response.data.business);\n        }\n      } catch (error) {\n        console.error('Error fetching business profile:', error);\n        setBusinessError('Failed to load business profile');\n      } finally {\n        setBusinessLoading(false);\n      }\n    };\n    \n    fetchBusinessProfile();\n  }, [isAuthenticated, currentUser]);\n  \n  // Service management\n  const fetchServices = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.category) queryParams.append('category', options.category);\n      if (options.active !== undefined) queryParams.append('active', options.active);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/services${query}`);\n      \n      if (response.data && response.data.services) {\n        setServices(response.data.services);\n        return response.data.services;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      setBusinessError('Failed to load services');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const createService = async (serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.post('/services', serviceData);\n      \n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => [...prevServices, response.data.service]);\n        return { success: true, service: response.data.service };\n      }\n      \n      return { success: false, error: 'Failed to create service' };\n    } catch (error) {\n      console.error('Error creating service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to create service');\n      return { success: false, error: error.response?.data?.message || 'Failed to create service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const updateService = async (serviceId, serviceData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put(`/services/${serviceId}`, serviceData);\n      \n      if (response.data && response.data.service) {\n        // Update services list\n        setServices(prevServices => \n          prevServices.map(service => \n            service._id === serviceId ? response.data.service : service\n          )\n        );\n        return { success: true, service: response.data.service };\n      }\n      \n      return { success: false, error: 'Failed to update service' };\n    } catch (error) {\n      console.error('Error updating service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update service');\n      return { success: false, error: error.response?.data?.message || 'Failed to update service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const deleteService = async (serviceId) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      await api.delete(`/services/${serviceId}`);\n      \n      // Update services list\n      setServices(prevServices => \n        prevServices.filter(service => service._id !== serviceId)\n      );\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to delete service');\n      return { success: false, error: error.response?.data?.message || 'Failed to delete service' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Service category management\n  const fetchServiceCategories = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/service-categories');\n      \n      if (response.data && response.data.categories) {\n        setServiceCategories(response.data.categories);\n        return response.data.categories;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching service categories:', error);\n      setBusinessError('Failed to load service categories');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const createServiceCategory = async (categoryData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.post('/service-categories', categoryData);\n      \n      if (response.data && response.data.category) {\n        // Update categories list\n        setServiceCategories(prevCategories => [...prevCategories, response.data.category]);\n        return { success: true, category: response.data.category };\n      }\n      \n      return { success: false, error: 'Failed to create service category' };\n    } catch (error) {\n      console.error('Error creating service category:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to create service category');\n      return { success: false, error: error.response?.data?.message || 'Failed to create service category' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Staff management\n  const fetchStaff = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/staff');\n      \n      if (response.data && response.data.staff) {\n        setStaff(response.data.staff);\n        return response.data.staff;\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error fetching staff:', error);\n      setBusinessError('Failed to load staff');\n      return [];\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Customer management\n  const fetchCustomers = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.search) queryParams.append('search', options.search);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/customers${query}`);\n      \n      if (response.data && response.data.customers) {\n        setCustomers(response.data.customers);\n        return {\n          customers: response.data.customers,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      \n      return { customers: [], total: 0, pages: 0 };\n    } catch (error) {\n      console.error('Error fetching customers:', error);\n      setBusinessError('Failed to load customers');\n      return { customers: [], total: 0, pages: 0 };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Appointment management\n  const fetchAppointments = async (options = {}) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      // Build query parameters\n      const queryParams = new URLSearchParams();\n      if (options.startDate) queryParams.append('startDate', options.startDate);\n      if (options.endDate) queryParams.append('endDate', options.endDate);\n      if (options.status) queryParams.append('status', options.status);\n      if (options.serviceId) queryParams.append('serviceId', options.serviceId);\n      if (options.staffId) queryParams.append('staffId', options.staffId);\n      if (options.customerId) queryParams.append('customerId', options.customerId);\n      if (options.sortBy) queryParams.append('sortBy', options.sortBy);\n      if (options.limit) queryParams.append('limit', options.limit);\n      if (options.page) queryParams.append('page', options.page);\n      \n      const query = queryParams.toString() ? `?${queryParams.toString()}` : '';\n      \n      const response = await api.get(`/appointments${query}`);\n      \n      if (response.data && response.data.appointments) {\n        setAppointments(response.data.appointments);\n        return {\n          appointments: response.data.appointments,\n          total: response.data.total,\n          pages: response.data.pages\n        };\n      }\n      \n      return { appointments: [], total: 0, pages: 0 };\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      setBusinessError('Failed to load appointments');\n      return { appointments: [], total: 0, pages: 0 };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Business profile management\n  const updateBusinessProfile = async (profileData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put('/business/profile', profileData);\n      \n      if (response.data && response.data.business) {\n        setBusinessProfile(response.data.business);\n        return { success: true, business: response.data.business };\n      }\n      \n      return { success: false, error: 'Failed to update business profile' };\n    } catch (error) {\n      console.error('Error updating business profile:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update business profile');\n      return { success: false, error: error.response?.data?.message || 'Failed to update business profile' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  // Widget integration\n  const getWidgetSettings = async () => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.get('/widget/settings');\n      \n      if (response.data && response.data.settings) {\n        return { success: true, settings: response.data.settings };\n      }\n      \n      return { success: false, error: 'Failed to get widget settings' };\n    } catch (error) {\n      console.error('Error getting widget settings:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to get widget settings');\n      return { success: false, error: error.response?.data?.message || 'Failed to get widget settings' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  const updateWidgetSettings = async (settingsData) => {\n    try {\n      setBusinessLoading(true);\n      setBusinessError(null);\n      \n      const response = await api.put('/widget/settings', settingsData);\n      \n      if (response.data && response.data.settings) {\n        return { success: true, settings: response.data.settings };\n      }\n      \n      return { success: false, error: 'Failed to update widget settings' };\n    } catch (error) {\n      console.error('Error updating widget settings:', error);\n      setBusinessError(error.response?.data?.message || 'Failed to update widget settings');\n      return { success: false, error: error.response?.data?.message || 'Failed to update widget settings' };\n    } finally {\n      setBusinessLoading(false);\n    }\n  };\n  \n  return (\n    <BusinessContext.Provider\n      value={{\n        // Business profile\n        businessProfile,\n        updateBusinessProfile,\n        \n        // Service management\n        services,\n        fetchServices,\n        createService,\n        updateService,\n        deleteService,\n        \n        // Service categories\n        serviceCategories,\n        fetchServiceCategories,\n        createServiceCategory,\n        \n        // Staff management\n        staff,\n        fetchStaff,\n        \n        // Customer management\n        customers,\n        fetchCustomers,\n        \n        // Appointment management\n        appointments,\n        fetchAppointments,\n        \n        // Widget integration\n        getWidgetSettings,\n        updateWidgetSettings,\n        \n        // Loading and error states\n        businessLoading,\n        businessError\n      }}\n    >\n      {children}\n    </BusinessContext.Provider>\n  );\n};\n\nexport default BusinessContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}