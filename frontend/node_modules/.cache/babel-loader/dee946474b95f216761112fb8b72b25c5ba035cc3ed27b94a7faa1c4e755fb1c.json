{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n\n  // For development mode, provide a mock auth context if real context is not available\n  if (process.env.NODE_ENV === 'development' && !context) {\n    console.warn('Auth context not found, using development fallback');\n    return {\n      currentUser: {\n        id: 'dev-user-123',\n        name: 'Development User',\n        email: 'dev@example.com',\n        role: 'business',\n        isVerified: true\n      },\n      session: {\n        access_token: 'dev-token'\n      },\n      authLoading: false,\n      error: null,\n      register: async () => ({\n        success: true\n      }),\n      login: async () => ({\n        success: true\n      }),\n      logout: async () => {},\n      updateProfile: async () => ({\n        success: true\n      }),\n      setBypassAuth: () => {},\n      isAuthenticated: true\n    };\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      // Get current session from Supabase\n      const {\n        data: {\n          session: currentSession\n        }\n      } = await supabase.auth.getSession();\n      if (currentSession) {\n        setSession(currentSession);\n        try {\n          // Get user profile data\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser();\n          if (user) {\n            // Get additional user data from profiles table\n            const {\n              data: userData,\n              error: profileError\n            } = await supabase.from('users').select('*').eq('id', user.id).single();\n            if (profileError) {\n              var _user$user_metadata, _user$user_metadata2;\n              console.error('Error fetching user profile:', profileError);\n              // Create a fallback user object with minimal data\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.name) || 'User',\n                role: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.role) || 'client'\n              });\n            } else {\n              var _user$user_metadata3, _user$user_metadata4;\n              // Create a complete user object\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || ((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.name),\n                role: userData.role || ((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.role) || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details:', err);\n        }\n      }\n      setAuthLoading(false);\n    };\n\n    // Listen for auth state changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      setSession(newSession);\n      if (event === 'SIGNED_IN' && newSession) {\n        try {\n          // Get user profile data\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser(newSession.access_token);\n          if (user) {\n            // Get additional user data from profiles table\n            const {\n              data: userData,\n              error: profileError\n            } = await supabase.from('users').select('*').eq('id', user.id).single();\n            if (profileError) {\n              var _user$user_metadata5, _user$user_metadata6;\n              console.error('Error fetching user profile on sign in:', profileError);\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: ((_user$user_metadata5 = user.user_metadata) === null || _user$user_metadata5 === void 0 ? void 0 : _user$user_metadata5.name) || 'User',\n                role: ((_user$user_metadata6 = user.user_metadata) === null || _user$user_metadata6 === void 0 ? void 0 : _user$user_metadata6.role) || 'client'\n              });\n            } else {\n              var _user$user_metadata7, _user$user_metadata8;\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || ((_user$user_metadata7 = user.user_metadata) === null || _user$user_metadata7 === void 0 ? void 0 : _user$user_metadata7.name),\n                role: userData.role || ((_user$user_metadata8 = user.user_metadata) === null || _user$user_metadata8 === void 0 ? void 0 : _user$user_metadata8.role) || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details on auth change:', err);\n        }\n      } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n        setCurrentUser(null);\n        setSession(null);\n      }\n    });\n    checkSession();\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Register user\n  const register = async userData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const result = await supabaseService.auth.register(userData);\n      setSession(result.session);\n      setCurrentUser(result.user);\n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n\n      // Validate credentials\n      if (!credentials.email) {\n        throw new Error('Email is required');\n      }\n      if (!credentials.password) {\n        throw new Error('Password is required');\n      }\n      console.log('AuthContext: Attempting login with email:', credentials.email);\n      const result = await supabaseService.auth.login(credentials);\n      setSession(result.session);\n      setCurrentUser(result.user);\n      setAuthLoading(false);\n      return {\n        success: true,\n        user: result.user\n      };\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'Invalid credentials. Please try again.');\n      console.error('Login failed:', err.message);\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await supabaseService.auth.logout();\n      setSession(null);\n      setCurrentUser(null);\n      navigate('/login');\n    } catch (err) {\n      console.error('Error during logout:', err);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const result = await supabaseService.users.updateProfile(profileData);\n      setCurrentUser({\n        ...currentUser,\n        ...result.user\n      });\n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = userData => {\n    console.log('Using demo mode - bypassing Supabase authentication');\n\n    // Create a mock session and user\n    setSession({\n      access_token: 'demo-token'\n    });\n    setCurrentUser(userData);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      session,\n      authLoading,\n      error,\n      register,\n      login,\n      logout,\n      updateProfile,\n      setBypassAuth,\n      isAuthenticated: !!session\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"ntK7EEiB4ViGZLn5TfK7is1Be1U=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","supabase","supabaseService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","process","env","NODE_ENV","console","warn","currentUser","id","name","email","role","isVerified","session","access_token","authLoading","error","register","success","login","logout","updateProfile","setBypassAuth","isAuthenticated","AuthProvider","children","_s2","setCurrentUser","setSession","setAuthLoading","setError","navigate","checkSession","data","currentSession","auth","getSession","user","getUser","userData","profileError","from","select","eq","single","_user$user_metadata","_user$user_metadata2","user_metadata","_user$user_metadata3","_user$user_metadata4","phone","avatar","avatar_url","address","street","city","state","zipCode","zip_code","country","businessName","business_name","businessCategory","business_category","email_confirmed_at","err","subscription","onAuthStateChange","event","newSession","_user$user_metadata5","_user$user_metadata6","_user$user_metadata7","_user$user_metadata8","unsubscribe","result","message","credentials","Error","password","log","profileData","users","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  // For development mode, provide a mock auth context if real context is not available\n  if (process.env.NODE_ENV === 'development' && !context) {\n    console.warn('Auth context not found, using development fallback');\n    return {\n      currentUser: {\n        id: 'dev-user-123',\n        name: 'Development User',\n        email: 'dev@example.com',\n        role: 'business',\n        isVerified: true\n      },\n      session: { access_token: 'dev-token' },\n      authLoading: false,\n      error: null,\n      register: async () => ({ success: true }),\n      login: async () => ({ success: true }),\n      logout: async () => {},\n      updateProfile: async () => ({ success: true }),\n      setBypassAuth: () => {},\n      isAuthenticated: true\n    };\n  }\n  \n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      // Get current session from Supabase\n      const { data: { session: currentSession } } = await supabase.auth.getSession();\n      \n      if (currentSession) {\n        setSession(currentSession);\n        \n        try {\n          // Get user profile data\n          const { data: { user } } = await supabase.auth.getUser();\n          \n          if (user) {\n            // Get additional user data from profiles table\n            const { data: userData, error: profileError } = await supabase\n              .from('users')\n              .select('*')\n              .eq('id', user.id)\n              .single();\n              \n            if (profileError) {\n              console.error('Error fetching user profile:', profileError);\n              // Create a fallback user object with minimal data\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: user.user_metadata?.name || 'User',\n                role: user.user_metadata?.role || 'client',\n              });\n            } else {\n              // Create a complete user object\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || user.user_metadata?.name,\n                role: userData.role || user.user_metadata?.role || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false,\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details:', err);\n        }\n      }\n      \n      setAuthLoading(false);\n    };\n    \n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, newSession) => {\n        setSession(newSession);\n        \n        if (event === 'SIGNED_IN' && newSession) {\n          try {\n            // Get user profile data\n            const { data: { user } } = await supabase.auth.getUser(newSession.access_token);\n            \n            if (user) {\n              // Get additional user data from profiles table\n              const { data: userData, error: profileError } = await supabase\n                .from('users')\n                .select('*')\n                .eq('id', user.id)\n                .single();\n                \n              if (profileError) {\n                console.error('Error fetching user profile on sign in:', profileError);\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: user.user_metadata?.name || 'User',\n                  role: user.user_metadata?.role || 'client',\n                });\n              } else {\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: userData.name || user.user_metadata?.name,\n                  role: userData.role || user.user_metadata?.role || 'client',\n                  phone: userData.phone,\n                  avatar: userData.avatar_url,\n                  address: {\n                    street: userData.street,\n                    city: userData.city,\n                    state: userData.state,\n                    zipCode: userData.zip_code,\n                    country: userData.country\n                  },\n                  businessName: userData.business_name,\n                  businessCategory: userData.business_category,\n                  isVerified: user.email_confirmed_at ? true : false,\n                });\n              }\n            }\n          } catch (err) {\n            console.error('Error getting user details on auth change:', err);\n          }\n        } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n          setCurrentUser(null);\n          setSession(null);\n        }\n      }\n    );\n    \n    checkSession();\n    \n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.auth.register(userData);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      // Validate credentials\n      if (!credentials.email) {\n        throw new Error('Email is required');\n      }\n      \n      if (!credentials.password) {\n        throw new Error('Password is required');\n      }\n      \n      console.log('AuthContext: Attempting login with email:', credentials.email);\n      \n      const result = await supabaseService.auth.login(credentials);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return { success: true, user: result.user };\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'Invalid credentials. Please try again.');\n      console.error('Login failed:', err.message);\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await supabaseService.auth.logout();\n      setSession(null);\n      setCurrentUser(null);\n      navigate('/login');\n    } catch (err) {\n      console.error('Error during logout:', err);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.users.updateProfile(profileData);\n      \n      setCurrentUser({\n        ...currentUser,\n        ...result.user\n      });\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = (userData) => {\n    console.log('Using demo mode - bypassing Supabase authentication');\n    \n    // Create a mock session and user\n    setSession({ access_token: 'demo-token' });\n    setCurrentUser(userData);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        session,\n        authLoading,\n        error,\n        register,\n        login,\n        logout,\n        updateProfile,\n        setBypassAuth,\n        isAuthenticated: !!session,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}