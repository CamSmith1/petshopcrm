{"ast":null,"code":"import supabase from'./supabaseClient';// Auth methods\nexport const auth={// Register a new user\nregister:async userData=>{var _data$user;const{email,password,name,role,businessName,businessCategory,phone,address}=userData;// Create metadata\nconst metadata={name,role:role||'client',phone,businessName,businessCategory};const{data,error}=await supabase.auth.signUp({email,password,options:{data:metadata}});if(error){throw new Error(error.message);}// Additional profile data\nif(data!==null&&data!==void 0&&(_data$user=data.user)!==null&&_data$user!==void 0&&_data$user.id){if(role==='business'&&businessName){const{error:profileError}=await supabase.from('users').update({business_name:businessName,business_category:businessCategory}).eq('id',data.user.id);if(profileError){console.error('Error updating business profile:',profileError);}}if(address){const{error:addressError}=await supabase.from('users').update({street:address.street,city:address.city,state:address.state,zip_code:address.zipCode,country:address.country}).eq('id',data.user.id);if(addressError){console.error('Error updating address:',addressError);}}}return{user:{id:data.user.id,name,email:data.user.email,role:role||'client'},session:data.session};},// Sign in with email and password\nlogin:async credentials=>{const{email,password}=credentials;// Validate required fields\nif(!email){console.error('Login error: Missing email');throw new Error('Email is required');}if(!password){console.error('Login error: Missing password');throw new Error('Password is required');}console.log('Attempting to sign in with email:',email);try{var _data$user$user_metad,_data$user$user_metad2;const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){console.error('Supabase auth error:',error);throw new Error(error.message);}if(!data||!data.user){console.error('No user data returned from auth');throw new Error('Authentication failed');}// Get user profile data\nconst{data:userData,error:profileError}=await supabase.from('users').select('*').eq('id',data.user.id).single();if(profileError){console.error('Error fetching user profile:',profileError);}return{user:{id:data.user.id,name:(userData===null||userData===void 0?void 0:userData.name)||((_data$user$user_metad=data.user.user_metadata)===null||_data$user$user_metad===void 0?void 0:_data$user$user_metad.name),email:data.user.email,role:(userData===null||userData===void 0?void 0:userData.role)||((_data$user$user_metad2=data.user.user_metadata)===null||_data$user$user_metad2===void 0?void 0:_data$user$user_metad2.role)||'client',isVerified:data.user.email_confirmed_at?true:false,avatar:userData===null||userData===void 0?void 0:userData.avatar_url,businessName:userData===null||userData===void 0?void 0:userData.business_name},session:data.session};}catch(err){console.error('Login error in supabaseService:',err);throw err;}},// Sign out\nlogout:async()=>{const{error}=await supabase.auth.signOut();if(error){throw new Error(error.message);}return true;},// Get the current session\ngetSession:async()=>{const{data,error}=await supabase.auth.getSession();if(error){throw new Error(error.message);}return data.session;},// Reset password\nresetPassword:async email=>{const{error}=await supabase.auth.resetPasswordForEmail(email,{redirectTo:`${window.location.origin}/reset-password`});if(error){throw new Error(error.message);}return true;},// Update password\nupdatePassword:async newPassword=>{const{error}=await supabase.auth.updateUser({password:newPassword});if(error){throw new Error(error.message);}return true;}};// User methods\nexport const users={// Get current user profile\ngetCurrentUser:async()=>{var _user$user_metadata,_user$user_metadata2;// First get the auth user\nconst{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Then get the profile data\nconst{data,error}=await supabase.from('users').select('*').eq('id',user.id).single();if(error){throw new Error(error.message);}return{id:user.id,name:data.name||((_user$user_metadata=user.user_metadata)===null||_user$user_metadata===void 0?void 0:_user$user_metadata.name),email:user.email,role:data.role||((_user$user_metadata2=user.user_metadata)===null||_user$user_metadata2===void 0?void 0:_user$user_metadata2.role)||'client',phone:data.phone,avatar:data.avatar_url,address:{street:data.street,city:data.city,state:data.state,zipCode:data.zip_code,country:data.country},businessName:data.business_name,businessCategory:data.business_category,businessDescription:data.business_description,website:data.website};},// Update user profile\nupdateProfile:async profileData=>{var _profileData$address,_profileData$address2,_profileData$address3,_profileData$address4,_profileData$address5;const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Format data for Supabase\nconst updateData={name:profileData.name,phone:profileData.phone,street:(_profileData$address=profileData.address)===null||_profileData$address===void 0?void 0:_profileData$address.street,city:(_profileData$address2=profileData.address)===null||_profileData$address2===void 0?void 0:_profileData$address2.city,state:(_profileData$address3=profileData.address)===null||_profileData$address3===void 0?void 0:_profileData$address3.state,zip_code:(_profileData$address4=profileData.address)===null||_profileData$address4===void 0?void 0:_profileData$address4.zipCode,country:(_profileData$address5=profileData.address)===null||_profileData$address5===void 0?void 0:_profileData$address5.country};// Add business fields if needed\nif(profileData.businessName){updateData.business_name=profileData.businessName;updateData.business_category=profileData.businessCategory;updateData.business_description=profileData.businessDescription;updateData.website=profileData.website;}const{data,error}=await supabase.from('users').update(updateData).eq('id',user.id).select().single();if(error){throw new Error(error.message);}// Format the response to match the existing API format\nreturn{user:{id:user.id,name:data.name,email:user.email,role:data.role,phone:data.phone,avatar:data.avatar_url,address:{street:data.street,city:data.city,state:data.state,zipCode:data.zip_code,country:data.country},businessName:data.business_name,businessCategory:data.business_category,businessDescription:data.business_description,website:data.website}};},// Upload avatar\nuploadAvatar:async file=>{const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Create a unique filename\nconst fileExt=file.name.split('.').pop();const fileName=`${user.id}/${Date.now()}.${fileExt}`;const filePath=`avatars/${fileName}`;// Upload to Supabase Storage\nconst{error:uploadError}=await supabase.storage.from('profiles').upload(filePath,file);if(uploadError){throw new Error(uploadError.message);}// Get the public URL\nconst{data:{publicUrl}}=supabase.storage.from('profiles').getPublicUrl(filePath);// Update user profile with avatar URL\nconst{error:updateError}=await supabase.from('users').update({avatar_url:publicUrl}).eq('id',user.id);if(updateError){throw new Error(updateError.message);}return publicUrl;}};// Pet methods\nexport const pets={// Get all pets for current user\ngetPets:async()=>{const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}const{data,error}=await supabase.from('pets').select('*').eq('owner_id',user.id);if(error){throw new Error(error.message);}return data;},// Get a specific pet\ngetPet:async id=>{const{data,error}=await supabase.from('pets').select(`\n        *,\n        pet_emergency_contacts(*)\n      `).eq('id',id).single();if(error){throw new Error(error.message);}return data;},// Create a new pet\ncreatePet:async petData=>{const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Format data for Supabase\nconst newPet={owner_id:user.id,name:petData.name,type:petData.type,breed:petData.breed,age:petData.age,gender:petData.gender,special_requirements:petData.specialRequirements};const{data,error}=await supabase.from('pets').insert(newPet).select().single();if(error){throw new Error(error.message);}// If emergency contacts were provided, add them\nif(petData.emergencyContacts&&petData.emergencyContacts.length>0){const emergencyContacts=petData.emergencyContacts.map(contact=>({pet_id:data.id,name:contact.name,phone:contact.phone,email:contact.email,relationship:contact.relationship}));const{error:contactsError}=await supabase.from('pet_emergency_contacts').insert(emergencyContacts);if(contactsError){console.error('Error adding emergency contacts:',contactsError);}}return data;},// Update an existing pet\nupdatePet:async(id,petData)=>{// Format data for Supabase\nconst updateData={name:petData.name,type:petData.type,breed:petData.breed,age:petData.age,gender:petData.gender,special_requirements:petData.specialRequirements};const{data,error}=await supabase.from('pets').update(updateData).eq('id',id).select().single();if(error){throw new Error(error.message);}// If emergency contacts were provided, update them\nif(petData.emergencyContacts&&petData.emergencyContacts.length>0){// First delete existing contacts\nconst{error:deleteError}=await supabase.from('pet_emergency_contacts').delete().eq('pet_id',id);if(deleteError){console.error('Error deleting emergency contacts:',deleteError);}// Then add new ones\nconst emergencyContacts=petData.emergencyContacts.map(contact=>({pet_id:id,name:contact.name,phone:contact.phone,email:contact.email,relationship:contact.relationship}));const{error:contactsError}=await supabase.from('pet_emergency_contacts').insert(emergencyContacts);if(contactsError){console.error('Error adding emergency contacts:',contactsError);}}return data;},// Delete a pet\ndeletePet:async id=>{const{error}=await supabase.from('pets').delete().eq('id',id);if(error){throw new Error(error.message);}return true;},// Upload pet photo\nuploadPetPhoto:async(id,file)=>{// Create a unique filename\nconst fileExt=file.name.split('.').pop();const fileName=`${id}/${Date.now()}.${fileExt}`;const filePath=`pets/${fileName}`;// Upload to Supabase Storage\nconst{error:uploadError}=await supabase.storage.from('pet-photos').upload(filePath,file);if(uploadError){throw new Error(uploadError.message);}// Get the public URL\nconst{data:{publicUrl}}=supabase.storage.from('pet-photos').getPublicUrl(filePath);// Update pet with photo URL\nconst{error:updateError}=await supabase.from('pets').update({photo_url:publicUrl}).eq('id',id);if(updateError){throw new Error(updateError.message);}return publicUrl;}};// Service methods\nexport const services={// Get all services with optional filters\ngetServices:async params=>{let query=supabase.from('services').select('*');// Apply filters if provided\nif(params){if(params.providerId){query=query.eq('provider_id',params.providerId);}if(params.category){query=query.eq('category',params.category);}}const{data,error}=await query;if(error){throw new Error(error.message);}return data;},// Get a specific service with all related data\ngetService:async id=>{const{data:service,error:serviceError}=await supabase.from('services').select('*').eq('id',id).single();if(serviceError){throw new Error(serviceError.message);}// Get availability\nconst{data:availability,error:availabilityError}=await supabase.from('service_availability').select('*').eq('service_id',id);if(availabilityError){console.error('Error fetching availability:',availabilityError);}// Get custom form schema if exists\nconst{data:customForm,error:formError}=await supabase.from('service_custom_forms').select('*').eq('service_id',id).maybeSingle();if(formError&&formError.code!=='PGRST116'){console.error('Error fetching custom form:',formError);}return{...service,availability:availability||[],customForm:customForm?customForm.form_schema:null};},// Create a new service\ncreateService:async serviceData=>{const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Format data for Supabase\nconst newService={provider_id:user.id,title:serviceData.title,description:serviceData.description,category:serviceData.category,price_amount:serviceData.price.amount,price_currency:serviceData.price.currency||'USD',duration:serviceData.duration,location_options:serviceData.locationOptions,capacity:serviceData.capacity||1,buffer_time:serviceData.bufferTime||0};const{data,error}=await supabase.from('services').insert(newService).select().single();if(error){throw new Error(error.message);}// Add availability if provided\nif(serviceData.availability&&serviceData.availability.length>0){const availability=serviceData.availability.map(slot=>({service_id:data.id,day_of_week:slot.dayOfWeek,specific_date:slot.specificDate,start_time:slot.startTime,end_time:slot.endTime,is_available:slot.isAvailable!==false}));const{error:availabilityError}=await supabase.from('service_availability').insert(availability);if(availabilityError){console.error('Error adding availability:',availabilityError);}}// Add custom form if provided\nif(serviceData.customForm){const{error:formError}=await supabase.from('service_custom_forms').insert({service_id:data.id,form_schema:serviceData.customForm});if(formError){console.error('Error adding custom form:',formError);}}return data;},// Update an existing service\nupdateService:async(id,serviceData)=>{// Format data for Supabase\nconst updateData={title:serviceData.title,description:serviceData.description,category:serviceData.category,price_amount:serviceData.price.amount,price_currency:serviceData.price.currency||'USD',duration:serviceData.duration,location_options:serviceData.locationOptions,capacity:serviceData.capacity||1,buffer_time:serviceData.bufferTime||0};const{data,error}=await supabase.from('services').update(updateData).eq('id',id).select().single();if(error){throw new Error(error.message);}// Update availability if provided\nif(serviceData.availability&&serviceData.availability.length>0){// First delete existing availability\nconst{error:deleteError}=await supabase.from('service_availability').delete().eq('service_id',id);if(deleteError){console.error('Error deleting availability:',deleteError);}// Then add new availability\nconst availability=serviceData.availability.map(slot=>({service_id:id,day_of_week:slot.dayOfWeek,specific_date:slot.specificDate,start_time:slot.startTime,end_time:slot.endTime,is_available:slot.isAvailable!==false}));const{error:availabilityError}=await supabase.from('service_availability').insert(availability);if(availabilityError){console.error('Error adding availability:',availabilityError);}}// Update custom form if provided\nif(serviceData.customForm){// Check if form already exists\nconst{data:existingForm,error:checkError}=await supabase.from('service_custom_forms').select('id').eq('service_id',id).maybeSingle();if(checkError&&checkError.code!=='PGRST116'){console.error('Error checking custom form:',checkError);}if(existingForm){// Update existing form\nconst{error:updateError}=await supabase.from('service_custom_forms').update({form_schema:serviceData.customForm}).eq('id',existingForm.id);if(updateError){console.error('Error updating custom form:',updateError);}}else{// Insert new form\nconst{error:insertError}=await supabase.from('service_custom_forms').insert({service_id:id,form_schema:serviceData.customForm});if(insertError){console.error('Error adding custom form:',insertError);}}}return data;},// Delete a service\ndeleteService:async id=>{const{error}=await supabase.from('services').delete().eq('id',id);if(error){throw new Error(error.message);}return true;}};// Booking methods\nexport const bookings={// Get all bookings with filters\ngetBookings:async params=>{var _user$user_metadata3,_user$user_metadata4;const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}let query=supabase.from('bookings').select(`\n        *,\n        services(title, description, price_amount, price_currency),\n        pets(name, type, breed)\n      `);// Apply filters based on user role and params\nif(((_user$user_metadata3=user.user_metadata)===null||_user$user_metadata3===void 0?void 0:_user$user_metadata3.role)==='client'){query=query.eq('client_id',user.id);}else if(((_user$user_metadata4=user.user_metadata)===null||_user$user_metadata4===void 0?void 0:_user$user_metadata4.role)==='business'){query=query.eq('provider_id',user.id);}if(params){if(params.status){query=query.eq('status',params.status);}if(params.startDate&&params.endDate){query=query.gte('start_time',params.startDate).lte('start_time',params.endDate);}}// Order by start time, newest first\nquery=query.order('start_time',{ascending:false});const{data,error}=await query;if(error){throw new Error(error.message);}return data;},// Get a specific booking\ngetBooking:async id=>{const{data,error}=await supabase.from('bookings').select(`\n        *,\n        services(*),\n        reviews(*)\n      `).eq('id',id).single();if(error){throw new Error(error.message);}return data;},// Create a new booking\ncreateBooking:async bookingData=>{var _bookingData$notes,_bookingData$notes2,_bookingData$notes3;const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Get service to verify provider and price\nconst{data:service,error:serviceError}=await supabase.from('services').select('provider_id, price_amount, price_currency').eq('id',bookingData.serviceId).single();if(serviceError){throw new Error('Service not found');}// Format booking data for Supabase\nconst newBooking={service_id:bookingData.serviceId,provider_id:bookingData.providerId||service.provider_id,client_id:user.id,pet_id:bookingData.petId,start_time:new Date(bookingData.startTime).toISOString(),end_time:new Date(bookingData.endTime).toISOString(),location:bookingData.location,total_price_amount:service.price_amount,total_price_currency:service.price_currency||'USD',client_notes:((_bookingData$notes=bookingData.notes)===null||_bookingData$notes===void 0?void 0:_bookingData$notes.client)||null,provider_notes:((_bookingData$notes2=bookingData.notes)===null||_bookingData$notes2===void 0?void 0:_bookingData$notes2.provider)||null,internal_notes:((_bookingData$notes3=bookingData.notes)===null||_bookingData$notes3===void 0?void 0:_bookingData$notes3.internal)||null,custom_form_data:bookingData.customFormData||null,status:'pending'};const{data,error}=await supabase.from('bookings').insert(newBooking).select().single();if(error){throw new Error(error.message);}return data;},// Update an existing booking\nupdateBooking:async(id,bookingData)=>{// Format data for Supabase\nconst updateData={};if(bookingData.startTime){updateData.start_time=new Date(bookingData.startTime).toISOString();}if(bookingData.endTime){updateData.end_time=new Date(bookingData.endTime).toISOString();}if(bookingData.status){updateData.status=bookingData.status;}if(bookingData.notes){if(bookingData.notes.client!==undefined){updateData.client_notes=bookingData.notes.client;}if(bookingData.notes.provider!==undefined){updateData.provider_notes=bookingData.notes.provider;}if(bookingData.notes.internal!==undefined){updateData.internal_notes=bookingData.notes.internal;}}if(bookingData.assignedStaff){updateData.assigned_staff_id=bookingData.assignedStaff;}const{data,error}=await supabase.from('bookings').update(updateData).eq('id',id).select().single();if(error){throw new Error(error.message);}return data;},// Cancel a booking\ncancelBooking:async(id,reason)=>{var _user$user_metadata5;const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Get booking to determine who is cancelling\nconst{data:booking,error:bookingError}=await supabase.from('bookings').select('client_id, provider_id').eq('id',id).single();if(bookingError){throw new Error('Booking not found');}// Determine who is cancelling\nlet cancellationBy;if(booking.client_id===user.id){cancellationBy='client';}else if(booking.provider_id===user.id){cancellationBy='provider';}else if(((_user$user_metadata5=user.user_metadata)===null||_user$user_metadata5===void 0?void 0:_user$user_metadata5.role)==='admin'){cancellationBy='admin';}else{throw new Error('Not authorized to cancel this booking');}// Update booking\nconst{data,error}=await supabase.from('bookings').update({status:'cancelled',cancellation_reason:reason||'No reason provided',cancellation_time:new Date().toISOString(),cancellation_by:cancellationBy}).eq('id',id).select().single();if(error){throw new Error(error.message);}return data;},// Mark a booking as completed\ncompleteBooking:async id=>{const{data,error}=await supabase.from('bookings').update({status:'completed'}).eq('id',id).select().single();if(error){throw new Error(error.message);}return data;},// Add a review to a booking\naddReview:async(bookingId,reviewData)=>{const{data:{user}}=await supabase.auth.getUser();if(!user){throw new Error('Not authenticated');}// Get booking to verify client and provider\nconst{data:booking,error:bookingError}=await supabase.from('bookings').select('client_id, provider_id, status').eq('id',bookingId).single();if(bookingError){throw new Error('Booking not found');}// Verify client is adding the review\nif(booking.client_id!==user.id){throw new Error('Not authorized to review this booking');}// Verify booking is completed\nif(booking.status!=='completed'){throw new Error('Can only review completed bookings');}// Create the review\nconst newReview={booking_id:bookingId,client_id:user.id,provider_id:booking.provider_id,rating:reviewData.rating,comment:reviewData.comment||''};const{data,error}=await supabase.from('reviews').insert(newReview).select().single();if(error){throw new Error(error.message);}return data;}};// Payment methods\nexport const payments={// Create a payment intent\ncreatePaymentIntent:async bookingId=>{// For now, we'll just make an API call to the existing endpoint\n// This would ideally be replaced with a direct Supabase Edge Function call\nconst{data:{session}}=await supabase.auth.getSession();if(!session){throw new Error('Not authenticated');}const response=await fetch(`${process.env.REACT_APP_API_URL||'http://localhost:5000/api'}/payments/create-intent`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${session.access_token}`},body:JSON.stringify({bookingId})});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to create payment intent');}return data;}};// The primary export is used for compatibility with the existing API service\nexport default{auth,users,pets,services,bookings,payments};","map":{"version":3,"names":["supabase","auth","register","userData","_data$user","email","password","name","role","businessName","businessCategory","phone","address","metadata","data","error","signUp","options","Error","message","user","id","profileError","from","update","business_name","business_category","eq","console","addressError","street","city","state","zip_code","zipCode","country","session","login","credentials","log","_data$user$user_metad","_data$user$user_metad2","signInWithPassword","select","single","user_metadata","isVerified","email_confirmed_at","avatar","avatar_url","err","logout","signOut","getSession","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","newPassword","updateUser","users","getCurrentUser","_user$user_metadata","_user$user_metadata2","getUser","businessDescription","business_description","website","updateProfile","profileData","_profileData$address","_profileData$address2","_profileData$address3","_profileData$address4","_profileData$address5","updateData","uploadAvatar","file","fileExt","split","pop","fileName","Date","now","filePath","uploadError","storage","upload","publicUrl","getPublicUrl","updateError","pets","getPets","getPet","createPet","petData","newPet","owner_id","type","breed","age","gender","special_requirements","specialRequirements","insert","emergencyContacts","length","map","contact","pet_id","relationship","contactsError","updatePet","deleteError","delete","deletePet","uploadPetPhoto","photo_url","services","getServices","params","query","providerId","category","getService","service","serviceError","availability","availabilityError","customForm","formError","maybeSingle","code","form_schema","createService","serviceData","newService","provider_id","title","description","price_amount","price","amount","price_currency","currency","duration","location_options","locationOptions","capacity","buffer_time","bufferTime","slot","service_id","day_of_week","dayOfWeek","specific_date","specificDate","start_time","startTime","end_time","endTime","is_available","isAvailable","updateService","existingForm","checkError","insertError","deleteService","bookings","getBookings","_user$user_metadata3","_user$user_metadata4","status","startDate","endDate","gte","lte","order","ascending","getBooking","createBooking","bookingData","_bookingData$notes","_bookingData$notes2","_bookingData$notes3","serviceId","newBooking","client_id","petId","toISOString","total_price_amount","total_price_currency","client_notes","notes","client","provider_notes","provider","internal_notes","internal","custom_form_data","customFormData","updateBooking","undefined","assignedStaff","assigned_staff_id","cancelBooking","reason","_user$user_metadata5","booking","bookingError","cancellationBy","cancellation_reason","cancellation_time","cancellation_by","completeBooking","addReview","bookingId","reviewData","newReview","booking_id","rating","comment","payments","createPaymentIntent","response","fetch","process","env","REACT_APP_API_URL","method","headers","access_token","body","JSON","stringify","json","ok"],"sources":["/home/toebot/dog-services-saas/frontend/src/services/supabaseService.js"],"sourcesContent":["import supabase from './supabaseClient';\n\n// Auth methods\nexport const auth = {\n  // Register a new user\n  register: async (userData) => {\n    const { email, password, name, role, businessName, businessCategory, phone, address } = userData;\n    \n    // Create metadata\n    const metadata = {\n      name,\n      role: role || 'client',\n      phone,\n      businessName,\n      businessCategory\n    };\n    \n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Additional profile data\n    if (data?.user?.id) {\n      if (role === 'business' && businessName) {\n        const { error: profileError } = await supabase\n          .from('users')\n          .update({\n            business_name: businessName,\n            business_category: businessCategory\n          })\n          .eq('id', data.user.id);\n          \n        if (profileError) {\n          console.error('Error updating business profile:', profileError);\n        }\n      }\n      \n      if (address) {\n        const { error: addressError } = await supabase\n          .from('users')\n          .update({\n            street: address.street,\n            city: address.city,\n            state: address.state,\n            zip_code: address.zipCode,\n            country: address.country\n          })\n          .eq('id', data.user.id);\n          \n        if (addressError) {\n          console.error('Error updating address:', addressError);\n        }\n      }\n    }\n    \n    return { \n      user: {\n        id: data.user.id,\n        name,\n        email: data.user.email,\n        role: role || 'client',\n      },\n      session: data.session\n    };\n  },\n  \n  // Sign in with email and password\n  login: async (credentials) => {\n    const { email, password } = credentials;\n    \n    // Validate required fields\n    if (!email) {\n      console.error('Login error: Missing email');\n      throw new Error('Email is required');\n    }\n    \n    if (!password) {\n      console.error('Login error: Missing password');\n      throw new Error('Password is required');\n    }\n    \n    console.log('Attempting to sign in with email:', email);\n    \n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (error) {\n        console.error('Supabase auth error:', error);\n        throw new Error(error.message);\n      }\n      \n      if (!data || !data.user) {\n        console.error('No user data returned from auth');\n        throw new Error('Authentication failed');\n      }\n      \n      // Get user profile data\n      const { data: userData, error: profileError } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', data.user.id)\n        .single();\n        \n      if (profileError) {\n        console.error('Error fetching user profile:', profileError);\n      }\n      \n      return {\n        user: {\n          id: data.user.id,\n          name: userData?.name || data.user.user_metadata?.name,\n          email: data.user.email,\n          role: userData?.role || data.user.user_metadata?.role || 'client',\n          isVerified: data.user.email_confirmed_at ? true : false,\n          avatar: userData?.avatar_url,\n          businessName: userData?.business_name\n        },\n        session: data.session\n      };\n    } catch (err) {\n      console.error('Login error in supabaseService:', err);\n      throw err;\n    }\n  },\n  \n  // Sign out\n  logout: async () => {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Get the current session\n  getSession: async () => {\n    const { data, error } = await supabase.auth.getSession();\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data.session;\n  },\n  \n  // Reset password\n  resetPassword: async (email) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Update password\n  updatePassword: async (newPassword) => {\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  }\n};\n\n// User methods\nexport const users = {\n  // Get current user profile\n  getCurrentUser: async () => {\n    // First get the auth user\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Then get the profile data\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return {\n      id: user.id,\n      name: data.name || user.user_metadata?.name,\n      email: user.email,\n      role: data.role || user.user_metadata?.role || 'client',\n      phone: data.phone,\n      avatar: data.avatar_url,\n      address: {\n        street: data.street,\n        city: data.city,\n        state: data.state,\n        zipCode: data.zip_code,\n        country: data.country\n      },\n      businessName: data.business_name,\n      businessCategory: data.business_category,\n      businessDescription: data.business_description,\n      website: data.website\n    };\n  },\n  \n  // Update user profile\n  updateProfile: async (profileData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const updateData = {\n      name: profileData.name,\n      phone: profileData.phone,\n      street: profileData.address?.street,\n      city: profileData.address?.city,\n      state: profileData.address?.state,\n      zip_code: profileData.address?.zipCode,\n      country: profileData.address?.country\n    };\n    \n    // Add business fields if needed\n    if (profileData.businessName) {\n      updateData.business_name = profileData.businessName;\n      updateData.business_category = profileData.businessCategory;\n      updateData.business_description = profileData.businessDescription;\n      updateData.website = profileData.website;\n    }\n    \n    const { data, error } = await supabase\n      .from('users')\n      .update(updateData)\n      .eq('id', user.id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Format the response to match the existing API format\n    return {\n      user: {\n        id: user.id,\n        name: data.name,\n        email: user.email,\n        role: data.role,\n        phone: data.phone,\n        avatar: data.avatar_url,\n        address: {\n          street: data.street,\n          city: data.city,\n          state: data.state,\n          zipCode: data.zip_code,\n          country: data.country\n        },\n        businessName: data.business_name,\n        businessCategory: data.business_category,\n        businessDescription: data.business_description,\n        website: data.website\n      }\n    };\n  },\n  \n  // Upload avatar\n  uploadAvatar: async (file) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${user.id}/${Date.now()}.${fileExt}`;\n    const filePath = `avatars/${fileName}`;\n    \n    // Upload to Supabase Storage\n    const { error: uploadError } = await supabase.storage\n      .from('profiles')\n      .upload(filePath, file);\n      \n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n    \n    // Get the public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('profiles')\n      .getPublicUrl(filePath);\n      \n    // Update user profile with avatar URL\n    const { error: updateError } = await supabase\n      .from('users')\n      .update({ avatar_url: publicUrl })\n      .eq('id', user.id);\n      \n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    \n    return publicUrl;\n  }\n};\n\n// Pet methods\nexport const pets = {\n  // Get all pets for current user\n  getPets: async () => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .select('*')\n      .eq('owner_id', user.id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific pet\n  getPet: async (id) => {\n    const { data, error } = await supabase\n      .from('pets')\n      .select(`\n        *,\n        pet_emergency_contacts(*)\n      `)\n      .eq('id', id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Create a new pet\n  createPet: async (petData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const newPet = {\n      owner_id: user.id,\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .insert(newPet)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // If emergency contacts were provided, add them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: data.id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      \n      const { error: contactsError } = await supabase\n        .from('pet_emergency_contacts')\n        .insert(emergencyContacts);\n        \n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Update an existing pet\n  updatePet: async (id, petData) => {\n    // Format data for Supabase\n    const updateData = {\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // If emergency contacts were provided, update them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      // First delete existing contacts\n      const { error: deleteError } = await supabase\n        .from('pet_emergency_contacts')\n        .delete()\n        .eq('pet_id', id);\n        \n      if (deleteError) {\n        console.error('Error deleting emergency contacts:', deleteError);\n      }\n      \n      // Then add new ones\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      \n      const { error: contactsError } = await supabase\n        .from('pet_emergency_contacts')\n        .insert(emergencyContacts);\n        \n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Delete a pet\n  deletePet: async (id) => {\n    const { error } = await supabase\n      .from('pets')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Upload pet photo\n  uploadPetPhoto: async (id, file) => {\n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${id}/${Date.now()}.${fileExt}`;\n    const filePath = `pets/${fileName}`;\n    \n    // Upload to Supabase Storage\n    const { error: uploadError } = await supabase.storage\n      .from('pet-photos')\n      .upload(filePath, file);\n      \n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n    \n    // Get the public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('pet-photos')\n      .getPublicUrl(filePath);\n      \n    // Update pet with photo URL\n    const { error: updateError } = await supabase\n      .from('pets')\n      .update({ photo_url: publicUrl })\n      .eq('id', id);\n      \n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    \n    return publicUrl;\n  }\n};\n\n// Service methods\nexport const services = {\n  // Get all services with optional filters\n  getServices: async (params) => {\n    let query = supabase\n      .from('services')\n      .select('*');\n      \n    // Apply filters if provided\n    if (params) {\n      if (params.providerId) {\n        query = query.eq('provider_id', params.providerId);\n      }\n      \n      if (params.category) {\n        query = query.eq('category', params.category);\n      }\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific service with all related data\n  getService: async (id) => {\n    const { data: service, error: serviceError } = await supabase\n      .from('services')\n      .select('*')\n      .eq('id', id)\n      .single();\n      \n    if (serviceError) {\n      throw new Error(serviceError.message);\n    }\n    \n    // Get availability\n    const { data: availability, error: availabilityError } = await supabase\n      .from('service_availability')\n      .select('*')\n      .eq('service_id', id);\n      \n    if (availabilityError) {\n      console.error('Error fetching availability:', availabilityError);\n    }\n    \n    // Get custom form schema if exists\n    const { data: customForm, error: formError } = await supabase\n      .from('service_custom_forms')\n      .select('*')\n      .eq('service_id', id)\n      .maybeSingle();\n      \n    if (formError && formError.code !== 'PGRST116') {\n      console.error('Error fetching custom form:', formError);\n    }\n    \n    return {\n      ...service,\n      availability: availability || [],\n      customForm: customForm ? customForm.form_schema : null\n    };\n  },\n  \n  // Create a new service\n  createService: async (serviceData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const newService = {\n      provider_id: user.id,\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    \n    const { data, error } = await supabase\n      .from('services')\n      .insert(newService)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Add availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      const availability = serviceData.availability.map(slot => ({\n        service_id: data.id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      \n      const { error: availabilityError } = await supabase\n        .from('service_availability')\n        .insert(availability);\n        \n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n    \n    // Add custom form if provided\n    if (serviceData.customForm) {\n      const { error: formError } = await supabase\n        .from('service_custom_forms')\n        .insert({\n          service_id: data.id,\n          form_schema: serviceData.customForm\n        });\n        \n      if (formError) {\n        console.error('Error adding custom form:', formError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Update an existing service\n  updateService: async (id, serviceData) => {\n    // Format data for Supabase\n    const updateData = {\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    \n    const { data, error } = await supabase\n      .from('services')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Update availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      // First delete existing availability\n      const { error: deleteError } = await supabase\n        .from('service_availability')\n        .delete()\n        .eq('service_id', id);\n        \n      if (deleteError) {\n        console.error('Error deleting availability:', deleteError);\n      }\n      \n      // Then add new availability\n      const availability = serviceData.availability.map(slot => ({\n        service_id: id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      \n      const { error: availabilityError } = await supabase\n        .from('service_availability')\n        .insert(availability);\n        \n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n    \n    // Update custom form if provided\n    if (serviceData.customForm) {\n      // Check if form already exists\n      const { data: existingForm, error: checkError } = await supabase\n        .from('service_custom_forms')\n        .select('id')\n        .eq('service_id', id)\n        .maybeSingle();\n        \n      if (checkError && checkError.code !== 'PGRST116') {\n        console.error('Error checking custom form:', checkError);\n      }\n      \n      if (existingForm) {\n        // Update existing form\n        const { error: updateError } = await supabase\n          .from('service_custom_forms')\n          .update({ form_schema: serviceData.customForm })\n          .eq('id', existingForm.id);\n          \n        if (updateError) {\n          console.error('Error updating custom form:', updateError);\n        }\n      } else {\n        // Insert new form\n        const { error: insertError } = await supabase\n          .from('service_custom_forms')\n          .insert({\n            service_id: id,\n            form_schema: serviceData.customForm\n          });\n          \n        if (insertError) {\n          console.error('Error adding custom form:', insertError);\n        }\n      }\n    }\n    \n    return data;\n  },\n  \n  // Delete a service\n  deleteService: async (id) => {\n    const { error } = await supabase\n      .from('services')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  }\n};\n\n// Booking methods\nexport const bookings = {\n  // Get all bookings with filters\n  getBookings: async (params) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    let query = supabase\n      .from('bookings')\n      .select(`\n        *,\n        services(title, description, price_amount, price_currency),\n        pets(name, type, breed)\n      `);\n      \n    // Apply filters based on user role and params\n    if (user.user_metadata?.role === 'client') {\n      query = query.eq('client_id', user.id);\n    } else if (user.user_metadata?.role === 'business') {\n      query = query.eq('provider_id', user.id);\n    }\n    \n    if (params) {\n      if (params.status) {\n        query = query.eq('status', params.status);\n      }\n      \n      if (params.startDate && params.endDate) {\n        query = query\n          .gte('start_time', params.startDate)\n          .lte('start_time', params.endDate);\n      }\n    }\n    \n    // Order by start time, newest first\n    query = query.order('start_time', { ascending: false });\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific booking\n  getBooking: async (id) => {\n    const { data, error } = await supabase\n      .from('bookings')\n      .select(`\n        *,\n        services(*),\n        reviews(*)\n      `)\n      .eq('id', id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Create a new booking\n  createBooking: async (bookingData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get service to verify provider and price\n    const { data: service, error: serviceError } = await supabase\n      .from('services')\n      .select('provider_id, price_amount, price_currency')\n      .eq('id', bookingData.serviceId)\n      .single();\n      \n    if (serviceError) {\n      throw new Error('Service not found');\n    }\n    \n    // Format booking data for Supabase\n    const newBooking = {\n      service_id: bookingData.serviceId,\n      provider_id: bookingData.providerId || service.provider_id,\n      client_id: user.id,\n      pet_id: bookingData.petId,\n      start_time: new Date(bookingData.startTime).toISOString(),\n      end_time: new Date(bookingData.endTime).toISOString(),\n      location: bookingData.location,\n      total_price_amount: service.price_amount,\n      total_price_currency: service.price_currency || 'USD',\n      client_notes: bookingData.notes?.client || null,\n      provider_notes: bookingData.notes?.provider || null,\n      internal_notes: bookingData.notes?.internal || null,\n      custom_form_data: bookingData.customFormData || null,\n      status: 'pending'\n    };\n    \n    const { data, error } = await supabase\n      .from('bookings')\n      .insert(newBooking)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Update an existing booking\n  updateBooking: async (id, bookingData) => {\n    // Format data for Supabase\n    const updateData = {};\n    \n    if (bookingData.startTime) {\n      updateData.start_time = new Date(bookingData.startTime).toISOString();\n    }\n    \n    if (bookingData.endTime) {\n      updateData.end_time = new Date(bookingData.endTime).toISOString();\n    }\n    \n    if (bookingData.status) {\n      updateData.status = bookingData.status;\n    }\n    \n    if (bookingData.notes) {\n      if (bookingData.notes.client !== undefined) {\n        updateData.client_notes = bookingData.notes.client;\n      }\n      \n      if (bookingData.notes.provider !== undefined) {\n        updateData.provider_notes = bookingData.notes.provider;\n      }\n      \n      if (bookingData.notes.internal !== undefined) {\n        updateData.internal_notes = bookingData.notes.internal;\n      }\n    }\n    \n    if (bookingData.assignedStaff) {\n      updateData.assigned_staff_id = bookingData.assignedStaff;\n    }\n    \n    const { data, error } = await supabase\n      .from('bookings')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Cancel a booking\n  cancelBooking: async (id, reason) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get booking to determine who is cancelling\n    const { data: booking, error: bookingError } = await supabase\n      .from('bookings')\n      .select('client_id, provider_id')\n      .eq('id', id)\n      .single();\n      \n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n    \n    // Determine who is cancelling\n    let cancellationBy;\n    if (booking.client_id === user.id) {\n      cancellationBy = 'client';\n    } else if (booking.provider_id === user.id) {\n      cancellationBy = 'provider';\n    } else if (user.user_metadata?.role === 'admin') {\n      cancellationBy = 'admin';\n    } else {\n      throw new Error('Not authorized to cancel this booking');\n    }\n    \n    // Update booking\n    const { data, error } = await supabase\n      .from('bookings')\n      .update({\n        status: 'cancelled',\n        cancellation_reason: reason || 'No reason provided',\n        cancellation_time: new Date().toISOString(),\n        cancellation_by: cancellationBy\n      })\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Mark a booking as completed\n  completeBooking: async (id) => {\n    const { data, error } = await supabase\n      .from('bookings')\n      .update({ status: 'completed' })\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Add a review to a booking\n  addReview: async (bookingId, reviewData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get booking to verify client and provider\n    const { data: booking, error: bookingError } = await supabase\n      .from('bookings')\n      .select('client_id, provider_id, status')\n      .eq('id', bookingId)\n      .single();\n      \n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n    \n    // Verify client is adding the review\n    if (booking.client_id !== user.id) {\n      throw new Error('Not authorized to review this booking');\n    }\n    \n    // Verify booking is completed\n    if (booking.status !== 'completed') {\n      throw new Error('Can only review completed bookings');\n    }\n    \n    // Create the review\n    const newReview = {\n      booking_id: bookingId,\n      client_id: user.id,\n      provider_id: booking.provider_id,\n      rating: reviewData.rating,\n      comment: reviewData.comment || ''\n    };\n    \n    const { data, error } = await supabase\n      .from('reviews')\n      .insert(newReview)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  }\n};\n\n// Payment methods\nexport const payments = {\n  // Create a payment intent\n  createPaymentIntent: async (bookingId) => {\n    // For now, we'll just make an API call to the existing endpoint\n    // This would ideally be replaced with a direct Supabase Edge Function call\n    \n    const { data: { session } } = await supabase.auth.getSession();\n    \n    if (!session) {\n      throw new Error('Not authenticated');\n    }\n    \n    const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/payments/create-intent`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${session.access_token}`\n      },\n      body: JSON.stringify({ bookingId })\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to create payment intent');\n    }\n    \n    return data;\n  }\n};\n\n\n// The primary export is used for compatibility with the existing API service\nexport default {\n  auth,\n  users,\n  pets,\n  services,\n  bookings,\n  payments\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}