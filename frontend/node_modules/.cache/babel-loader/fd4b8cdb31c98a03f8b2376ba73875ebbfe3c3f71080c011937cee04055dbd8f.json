{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      if (token) {\n        try {\n          // Set the token in the API headers\n          api.setAuthToken(token);\n\n          // Check if this is a demo token\n          if (token.startsWith('mock-bypass-token-')) {\n            // For demo tokens, we already have the user data in localStorage\n            const demoUserData = JSON.parse(localStorage.getItem('demoUser') || '{}');\n            if (demoUserData.id) {\n              setCurrentUser(demoUserData);\n              setAuthLoading(false);\n              return;\n            }\n          }\n\n          // For real tokens, get user info from API\n          try {\n            const response = await api.get('/users/me');\n            setCurrentUser(response.data.user);\n          } catch (apiErr) {\n            console.log('API error, using demo mode');\n            // If API call fails but we have a token, create a mock user for demo\n            if (token) {\n              const demoUser = {\n                id: 'demo-user-123',\n                name: 'Demo User',\n                email: 'demo@example.com',\n                role: 'business',\n                businessId: 'demo-business-456'\n              };\n              setCurrentUser(demoUser);\n            }\n          }\n        } catch (err) {\n          console.error('Authentication error:', err);\n          // Don't clear token in demo mode\n          if (!token.startsWith('mock-bypass-token-')) {\n            localStorage.removeItem('token');\n            setToken(null);\n            setCurrentUser(null);\n          }\n        }\n      }\n      setAuthLoading(false);\n    };\n    checkLoggedIn();\n  }, [token]);\n\n  // Register user\n  const register = async userData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const response = await api.post('/auth/register', userData);\n\n      // Save token and set user\n      localStorage.setItem('token', response.data.token);\n      setToken(response.data.token);\n      setCurrentUser(response.data.user);\n\n      // Set token in API headers\n      api.setAuthToken(response.data.token);\n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setAuthLoading(false);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n\n      // In a real production app, this would make an actual API call\n      // For development purposes, we're providing a bypass option\n\n      const response = await api.post('/auth/login', credentials);\n\n      // Save token and set user\n      localStorage.setItem('token', response.data.token);\n      setToken(response.data.token);\n      setCurrentUser(response.data.user);\n\n      // Set token in API headers\n      api.setAuthToken(response.data.token);\n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setAuthLoading(false);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Invalid credentials. Please try again.');\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    api.removeAuthToken();\n    navigate('/login');\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const response = await api.put('/users/profile', profileData);\n      setCurrentUser({\n        ...currentUser,\n        ...response.data.user\n      });\n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setAuthLoading(false);\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.error) || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = userData => {\n    // Create a mock token\n    const mockToken = 'mock-bypass-token-' + Date.now();\n\n    // Save token and set user\n    localStorage.setItem('token', mockToken);\n    setToken(mockToken);\n    setCurrentUser(userData);\n\n    // Set up mock auth header\n    api.setAuthToken(mockToken);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      token,\n      authLoading,\n      error,\n      register,\n      login,\n      logout,\n      updateProfile,\n      setBypassAuth,\n      isAuthenticated: !!token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"7aDt5Bf+CXkIhu16d3k5euntFEE=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","token","setToken","localStorage","getItem","authLoading","setAuthLoading","error","setError","navigate","checkLoggedIn","setAuthToken","startsWith","demoUserData","JSON","parse","id","response","get","data","user","apiErr","console","log","demoUser","name","email","role","businessId","err","removeItem","register","userData","post","setItem","_err$response","_err$response$data","login","credentials","_err$response2","_err$response2$data","logout","removeAuthToken","updateProfile","profileData","put","_err$response3","_err$response3$data","setBypassAuth","mockToken","Date","now","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../services/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      if (token) {\n        try {\n          // Set the token in the API headers\n          api.setAuthToken(token);\n          \n          // Check if this is a demo token\n          if (token.startsWith('mock-bypass-token-')) {\n            // For demo tokens, we already have the user data in localStorage\n            const demoUserData = JSON.parse(localStorage.getItem('demoUser') || '{}');\n            if (demoUserData.id) {\n              setCurrentUser(demoUserData);\n              setAuthLoading(false);\n              return;\n            }\n          }\n          \n          // For real tokens, get user info from API\n          try {\n            const response = await api.get('/users/me');\n            setCurrentUser(response.data.user);\n          } catch (apiErr) {\n            console.log('API error, using demo mode');\n            // If API call fails but we have a token, create a mock user for demo\n            if (token) {\n              const demoUser = {\n                id: 'demo-user-123',\n                name: 'Demo User',\n                email: 'demo@example.com',\n                role: 'business',\n                businessId: 'demo-business-456'\n              };\n              setCurrentUser(demoUser);\n            }\n          }\n        } catch (err) {\n          console.error('Authentication error:', err);\n          // Don't clear token in demo mode\n          if (!token.startsWith('mock-bypass-token-')) {\n            localStorage.removeItem('token');\n            setToken(null);\n            setCurrentUser(null);\n          }\n        }\n      }\n      setAuthLoading(false);\n    };\n\n    checkLoggedIn();\n  }, [token]);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const response = await api.post('/auth/register', userData);\n      \n      // Save token and set user\n      localStorage.setItem('token', response.data.token);\n      setToken(response.data.token);\n      setCurrentUser(response.data.user);\n      \n      // Set token in API headers\n      api.setAuthToken(response.data.token);\n      \n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(\n        err.response?.data?.error || \n        'An error occurred during registration. Please try again.'\n      );\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      // In a real production app, this would make an actual API call\n      // For development purposes, we're providing a bypass option\n      \n      const response = await api.post('/auth/login', credentials);\n      \n      // Save token and set user\n      localStorage.setItem('token', response.data.token);\n      setToken(response.data.token);\n      setCurrentUser(response.data.user);\n      \n      // Set token in API headers\n      api.setAuthToken(response.data.token);\n      \n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(\n        err.response?.data?.error || \n        'Invalid credentials. Please try again.'\n      );\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    api.removeAuthToken();\n    navigate('/login');\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const response = await api.put('/users/profile', profileData);\n      \n      setCurrentUser({\n        ...currentUser,\n        ...response.data.user\n      });\n      \n      setAuthLoading(false);\n      return response.data;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(\n        err.response?.data?.error || \n        'An error occurred while updating profile. Please try again.'\n      );\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = (userData) => {\n    // Create a mock token\n    const mockToken = 'mock-bypass-token-' + Date.now();\n    \n    // Save token and set user\n    localStorage.setItem('token', mockToken);\n    setToken(mockToken);\n    setCurrentUser(userData);\n    \n    // Set up mock auth header\n    api.setAuthToken(mockToken);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        token,\n        authLoading,\n        error,\n        register,\n        login,\n        logout,\n        updateProfile,\n        setBypassAuth,\n        isAuthenticated: !!token,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}