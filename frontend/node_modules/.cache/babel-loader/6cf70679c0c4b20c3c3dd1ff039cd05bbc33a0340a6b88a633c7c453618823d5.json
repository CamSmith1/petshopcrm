{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      // Get current session from Supabase\n      const {\n        data: {\n          session: currentSession\n        }\n      } = await supabase.auth.getSession();\n      if (currentSession) {\n        setSession(currentSession);\n        try {\n          // Get user profile data\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser();\n          if (user) {\n            // Get additional user data from profiles table\n            const {\n              data: userData,\n              error: profileError\n            } = await supabase.from('users').select('*').eq('id', user.id).single();\n            if (profileError) {\n              var _user$user_metadata, _user$user_metadata2;\n              console.error('Error fetching user profile:', profileError);\n              // Create a fallback user object with minimal data\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.name) || 'User',\n                role: ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.role) || 'client'\n              });\n            } else {\n              var _user$user_metadata3, _user$user_metadata4;\n              // Create a complete user object\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || ((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.name),\n                role: userData.role || ((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.role) || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details:', err);\n        }\n      }\n      setAuthLoading(false);\n    };\n\n    // Listen for auth state changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, newSession) => {\n      setSession(newSession);\n      if (event === 'SIGNED_IN' && newSession) {\n        try {\n          // Get user profile data\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser(newSession.access_token);\n          if (user) {\n            // Get additional user data from profiles table\n            const {\n              data: userData,\n              error: profileError\n            } = await supabase.from('users').select('*').eq('id', user.id).single();\n            if (profileError) {\n              var _user$user_metadata5, _user$user_metadata6;\n              console.error('Error fetching user profile on sign in:', profileError);\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: ((_user$user_metadata5 = user.user_metadata) === null || _user$user_metadata5 === void 0 ? void 0 : _user$user_metadata5.name) || 'User',\n                role: ((_user$user_metadata6 = user.user_metadata) === null || _user$user_metadata6 === void 0 ? void 0 : _user$user_metadata6.role) || 'client'\n              });\n            } else {\n              var _user$user_metadata7, _user$user_metadata8;\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || ((_user$user_metadata7 = user.user_metadata) === null || _user$user_metadata7 === void 0 ? void 0 : _user$user_metadata7.name),\n                role: userData.role || ((_user$user_metadata8 = user.user_metadata) === null || _user$user_metadata8 === void 0 ? void 0 : _user$user_metadata8.role) || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details on auth change:', err);\n        }\n      } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n        setCurrentUser(null);\n        setSession(null);\n      }\n    });\n    checkSession();\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Register user\n  const register = async userData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const result = await supabaseService.auth.register(userData);\n      setSession(result.session);\n      setCurrentUser(result.user);\n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const result = await supabaseService.auth.login(credentials);\n      setSession(result.session);\n      setCurrentUser(result.user);\n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'Invalid credentials. Please try again.');\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await supabaseService.auth.logout();\n      setSession(null);\n      setCurrentUser(null);\n      navigate('/login');\n    } catch (err) {\n      console.error('Error during logout:', err);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      const result = await supabaseService.users.updateProfile(profileData);\n      setCurrentUser({\n        ...currentUser,\n        ...result.user\n      });\n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = userData => {\n    console.warn('Demo mode is not supported with Supabase authentication');\n\n    // Instead of using a fake token, we can redirect to login\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      session,\n      authLoading,\n      error,\n      register,\n      login,\n      logout,\n      updateProfile,\n      setBypassAuth,\n      isAuthenticated: !!session\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"ntK7EEiB4ViGZLn5TfK7is1Be1U=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","supabase","supabaseService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","session","setSession","authLoading","setAuthLoading","error","setError","navigate","checkSession","data","currentSession","auth","getSession","user","getUser","userData","profileError","from","select","eq","id","single","_user$user_metadata","_user$user_metadata2","console","email","name","user_metadata","role","_user$user_metadata3","_user$user_metadata4","phone","avatar","avatar_url","address","street","city","state","zipCode","zip_code","country","businessName","business_name","businessCategory","business_category","isVerified","email_confirmed_at","err","subscription","onAuthStateChange","event","newSession","access_token","_user$user_metadata5","_user$user_metadata6","_user$user_metadata7","_user$user_metadata8","unsubscribe","register","result","message","login","credentials","logout","updateProfile","profileData","users","setBypassAuth","warn","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      // Get current session from Supabase\n      const { data: { session: currentSession } } = await supabase.auth.getSession();\n      \n      if (currentSession) {\n        setSession(currentSession);\n        \n        try {\n          // Get user profile data\n          const { data: { user } } = await supabase.auth.getUser();\n          \n          if (user) {\n            // Get additional user data from profiles table\n            const { data: userData, error: profileError } = await supabase\n              .from('users')\n              .select('*')\n              .eq('id', user.id)\n              .single();\n              \n            if (profileError) {\n              console.error('Error fetching user profile:', profileError);\n              // Create a fallback user object with minimal data\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: user.user_metadata?.name || 'User',\n                role: user.user_metadata?.role || 'client',\n              });\n            } else {\n              // Create a complete user object\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || user.user_metadata?.name,\n                role: userData.role || user.user_metadata?.role || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false,\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details:', err);\n        }\n      }\n      \n      setAuthLoading(false);\n    };\n    \n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, newSession) => {\n        setSession(newSession);\n        \n        if (event === 'SIGNED_IN' && newSession) {\n          try {\n            // Get user profile data\n            const { data: { user } } = await supabase.auth.getUser(newSession.access_token);\n            \n            if (user) {\n              // Get additional user data from profiles table\n              const { data: userData, error: profileError } = await supabase\n                .from('users')\n                .select('*')\n                .eq('id', user.id)\n                .single();\n                \n              if (profileError) {\n                console.error('Error fetching user profile on sign in:', profileError);\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: user.user_metadata?.name || 'User',\n                  role: user.user_metadata?.role || 'client',\n                });\n              } else {\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: userData.name || user.user_metadata?.name,\n                  role: userData.role || user.user_metadata?.role || 'client',\n                  phone: userData.phone,\n                  avatar: userData.avatar_url,\n                  address: {\n                    street: userData.street,\n                    city: userData.city,\n                    state: userData.state,\n                    zipCode: userData.zip_code,\n                    country: userData.country\n                  },\n                  businessName: userData.business_name,\n                  businessCategory: userData.business_category,\n                  isVerified: user.email_confirmed_at ? true : false,\n                });\n              }\n            }\n          } catch (err) {\n            console.error('Error getting user details on auth change:', err);\n          }\n        } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n          setCurrentUser(null);\n          setSession(null);\n        }\n      }\n    );\n    \n    checkSession();\n    \n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.auth.register(userData);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.auth.login(credentials);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'Invalid credentials. Please try again.');\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await supabaseService.auth.logout();\n      setSession(null);\n      setCurrentUser(null);\n      navigate('/login');\n    } catch (err) {\n      console.error('Error during logout:', err);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.users.updateProfile(profileData);\n      \n      setCurrentUser({\n        ...currentUser,\n        ...result.user\n      });\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = (userData) => {\n    console.warn('Demo mode is not supported with Supabase authentication');\n    \n    // Instead of using a fake token, we can redirect to login\n    navigate('/login');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        session,\n        authLoading,\n        error,\n        register,\n        login,\n        logout,\n        updateProfile,\n        setBypassAuth,\n        isAuthenticated: !!session,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}