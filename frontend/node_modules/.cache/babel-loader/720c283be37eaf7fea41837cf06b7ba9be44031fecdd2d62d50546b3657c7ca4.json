{"ast":null,"code":"import React,{useState,useEffect}from'react';import{toast}from'react-toastify';import Card from'../components/common/Card';import EmptyState from'../components/common/EmptyState';import Modal from'../components/common/Modal';import PageHeader from'../components/common/PageHeader';import LoadingSpinner from'../components/common/LoadingSpinner';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const CustomFields=()=>{const[fields,setFields]=useState([]);const[loading,setLoading]=useState(true);const[showAddModal,setShowAddModal]=useState(false);const[showEditModal,setShowEditModal]=useState(false);const[selectedField,setSelectedField]=useState(null);const[formData,setFormData]=useState({name:'',label:'',type:'text',required:false,options:[],appliesTo:'pet',// pet, customer, service, appointment\ndescription:''});const[newOption,setNewOption]=useState('');// Field type options\nconst fieldTypes=[{id:'text',name:'Text'},{id:'number',name:'Number'},{id:'select',name:'Dropdown'},{id:'checkbox',name:'Checkbox'},{id:'radio',name:'Radio Buttons'},{id:'date',name:'Date'},{id:'textarea',name:'Text Area'}];// Applies to options\nconst entityTypes=[{id:'pet',name:'Pet'},{id:'customer',name:'Customer'},{id:'service',name:'Service'},{id:'appointment',name:'Appointment'}];useEffect(()=>{const fetchCustomFields=async()=>{try{setLoading(true);// In a real app, this would be an API call\n// Mock data for demonstration\nawait new Promise(resolve=>setTimeout(resolve,800));const mockFields=[{id:'1',name:'allergies',label:'Allergies',type:'textarea',required:false,options:[],appliesTo:'pet',description:'List any known allergies for the pet'},{id:'2',name:'microchip_id',label:'Microchip ID',type:'text',required:false,options:[],appliesTo:'pet',description:'The pet\\'s microchip identification number'},{id:'3',name:'coat_type',label:'Coat Type',type:'select',required:true,options:['Short','Medium','Long','Double','Curly','Wire'],appliesTo:'pet',description:'The type of coat the pet has'},{id:'4',name:'emergency_contact',label:'Emergency Contact',type:'text',required:true,options:[],appliesTo:'customer',description:'Name and phone number for emergency contact'}];setFields(mockFields);}catch(error){console.error('Error fetching custom fields:',error);toast.error('Failed to load custom fields');}finally{setLoading(false);}};fetchCustomFields();},[]);const handleInputChange=e=>{const{name,value,type,checked}=e.target;setFormData(prev=>({...prev,[name]:type==='checkbox'?checked:value}));};const resetForm=()=>{setFormData({name:'',label:'',type:'text',required:false,options:[],appliesTo:'pet',description:''});setNewOption('');};const handleAddOption=()=>{if(!newOption.trim())return;setFormData(prev=>({...prev,options:[...prev.options,newOption.trim()]}));setNewOption('');};const handleRemoveOption=index=>{setFormData(prev=>({...prev,options:prev.options.filter((_,i)=>i!==index)}));};const validateForm=()=>{if(!formData.name.trim()){toast.error('Field name is required');return false;}if(!formData.label.trim()){toast.error('Field label is required');return false;}// Check for spaces and special characters in name\nif(!/^[a-z0-9_]+$/.test(formData.name)){toast.error('Field name can only contain lowercase letters, numbers, and underscores');return false;}// Check if dropdown/radio has options\nif(['select','radio'].includes(formData.type)&&formData.options.length===0){toast.error(`${formData.type==='select'?'Dropdown':'Radio buttons'} must have at least one option`);return false;}return true;};const handleAddField=async()=>{try{if(!validateForm())return;// In a real app, this would be an API call\n// Mock adding for demonstration\nawait new Promise(resolve=>setTimeout(resolve,500));const newField={id:Date.now().toString(),...formData};setFields(prev=>[...prev,newField]);resetForm();setShowAddModal(false);toast.success('Custom field added successfully');}catch(error){console.error('Error adding custom field:',error);toast.error('Failed to add custom field');}};const handleEditField=field=>{setSelectedField(field);setFormData({name:field.name,label:field.label,type:field.type,required:field.required,options:[...field.options],appliesTo:field.appliesTo,description:field.description});setShowEditModal(true);};const handleUpdateField=async()=>{try{if(!validateForm())return;// In a real app, this would be an API call\n// Mock updating for demonstration\nawait new Promise(resolve=>setTimeout(resolve,500));setFields(prev=>prev.map(field=>field.id===selectedField.id?{...field,...formData}:field));resetForm();setShowEditModal(false);setSelectedField(null);toast.success('Custom field updated successfully');}catch(error){console.error('Error updating custom field:',error);toast.error('Failed to update custom field');}};const handleDeleteField=async fieldId=>{if(window.confirm('Are you sure you want to delete this custom field? This may affect existing records.')){try{// In a real app, this would be an API call\n// Mock deleting for demonstration\nawait new Promise(resolve=>setTimeout(resolve,500));setFields(prev=>prev.filter(field=>field.id!==fieldId));toast.success('Custom field deleted successfully');}catch(error){console.error('Error deleting custom field:',error);toast.error('Failed to delete custom field');}}};const getEntityName=entityId=>{const entity=entityTypes.find(type=>type.id===entityId);return entity?entity.name:'Unknown';};const getTypeName=typeId=>{const type=fieldTypes.find(type=>type.id===typeId);return type?type.name:'Unknown';};const renderAddEditModalContent=()=>/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",className:\"form-label\",children:\"Field Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name\",name:\"name\",className:\"form-control\",value:formData.name,onChange:handleInputChange,placeholder:\"e.g. microchip_id\",disabled:showEditModal// Can't change name when editing\n,required:true}),/*#__PURE__*/_jsx(\"small\",{className:\"form-text text-muted\",children:\"Use only lowercase letters, numbers, and underscores. This is used internally.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"label\",className:\"form-label\",children:\"Display Label\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"label\",name:\"label\",className:\"form-control\",value:formData.label,onChange:handleInputChange,placeholder:\"e.g. Microchip ID\",required:true}),/*#__PURE__*/_jsx(\"small\",{className:\"form-text text-muted\",children:\"This is what users will see on forms.\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"type\",className:\"form-label\",children:\"Field Type\"}),/*#__PURE__*/_jsx(\"select\",{id:\"type\",name:\"type\",className:\"form-control\",value:formData.type,onChange:handleInputChange,disabled:showEditModal// Can't change type when editing\n,required:true,children:fieldTypes.map(type=>/*#__PURE__*/_jsx(\"option\",{value:type.id,children:type.name},type.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"appliesTo\",className:\"form-label\",children:\"Applies To\"}),/*#__PURE__*/_jsx(\"select\",{id:\"appliesTo\",name:\"appliesTo\",className:\"form-control\",value:formData.appliesTo,onChange:handleInputChange,disabled:showEditModal// Can't change entity when editing\n,required:true,children:entityTypes.map(entity=>/*#__PURE__*/_jsx(\"option\",{value:entity.id,children:entity.name},entity.id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"description\",className:\"form-label\",children:\"Description\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"description\",name:\"description\",className:\"form-control\",value:formData.description,onChange:handleInputChange,placeholder:\"Describe the purpose of this field...\",rows:2})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"custom-checkbox\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",id:\"required\",name:\"required\",checked:formData.required,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"required\",children:\"Required Field\"})]})}),['select','radio'].includes(formData.type)&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"form-label\",children:\"Options\"}),/*#__PURE__*/_jsx(\"div\",{className:\"options-list\",children:formData.options.map((option,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"option-item\",children:[/*#__PURE__*/_jsx(\"span\",{children:option}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn-close\",onClick:()=>handleRemoveOption(index),children:\"\\xD7\"})]},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"options-add\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",value:newOption,onChange:e=>setNewOption(e.target.value),placeholder:\"Add new option\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-secondary\",onClick:handleAddOption,children:\"Add\"})]})]})]});const renderAddModal=()=>/*#__PURE__*/_jsx(Modal,{isOpen:showAddModal,onClose:()=>setShowAddModal(false),title:\"Add Custom Field\",footer:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:()=>setShowAddModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:handleAddField,children:\"Add Field\"})]}),children:renderAddEditModalContent()});const renderEditModal=()=>/*#__PURE__*/_jsx(Modal,{isOpen:showEditModal,onClose:()=>{setShowEditModal(false);setSelectedField(null);resetForm();},title:\"Edit Custom Field\",footer:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:()=>{setShowEditModal(false);setSelectedField(null);resetForm();},children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:handleUpdateField,children:\"Update Field\"})]}),children:renderAddEditModalContent()});if(loading){return/*#__PURE__*/_jsx(LoadingSpinner,{});}return/*#__PURE__*/_jsxs(\"div\",{className:\"custom-fields-page\",children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Custom Fields\",subtitle:\"Create and manage custom fields for pets, customers, services, and appointments\",actions:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:()=>{resetForm();setShowAddModal(true);},children:\"Add Field\"})}),fields.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-3\",children:fields.map(field=>/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"field-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:field.label}),/*#__PURE__*/_jsxs(\"div\",{className:\"field-badges\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge badge-primary\",children:getEntityName(field.appliesTo)}),field.required&&/*#__PURE__*/_jsx(\"span\",{className:\"badge badge-warning\",children:\"Required\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"field-details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"detail-label\",children:\"Name:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"detail-value\",children:field.name})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"detail-label\",children:\"Type:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"detail-value\",children:getTypeName(field.type)})]}),field.description&&/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"detail-label\",children:\"Description:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"detail-value\",children:field.description})]}),['select','radio'].includes(field.type)&&field.options.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"detail-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"detail-label\",children:\"Options:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"detail-value\",children:field.options.join(', ')})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"field-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary btn-sm\",onClick:()=>handleEditField(field),children:\"Edit\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-danger btn-sm\",onClick:()=>handleDeleteField(field.id),children:\"Delete\"})]})]},field.id))}):/*#__PURE__*/_jsx(EmptyState,{title:\"No Custom Fields\",message:\"You haven't created any custom fields yet. Custom fields allow you to collect additional information about pets, customers, services, and appointments.\",actionText:\"Add Field\",onActionClick:()=>{resetForm();setShowAddModal(true);}}),renderAddModal(),renderEditModal()]});};export default CustomFields;","map":{"version":3,"names":["React","useState","useEffect","toast","Card","EmptyState","Modal","PageHeader","LoadingSpinner","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CustomFields","fields","setFields","loading","setLoading","showAddModal","setShowAddModal","showEditModal","setShowEditModal","selectedField","setSelectedField","formData","setFormData","name","label","type","required","options","appliesTo","description","newOption","setNewOption","fieldTypes","id","entityTypes","fetchCustomFields","Promise","resolve","setTimeout","mockFields","error","console","handleInputChange","e","value","checked","target","prev","resetForm","handleAddOption","trim","handleRemoveOption","index","filter","_","i","validateForm","test","includes","length","handleAddField","newField","Date","now","toString","success","handleEditField","field","handleUpdateField","map","handleDeleteField","fieldId","window","confirm","getEntityName","entityId","entity","find","getTypeName","typeId","renderAddEditModalContent","children","className","htmlFor","onChange","placeholder","disabled","rows","option","onClick","renderAddModal","isOpen","onClose","title","footer","renderEditModal","subtitle","actions","join","message","actionText","onActionClick"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/CustomFields.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport Card from '../components/common/Card';\nimport EmptyState from '../components/common/EmptyState';\nimport Modal from '../components/common/Modal';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\n\nconst CustomFields = () => {\n  const [fields, setFields] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    label: '',\n    type: 'text',\n    required: false,\n    options: [],\n    appliesTo: 'pet', // pet, customer, service, appointment\n    description: ''\n  });\n  const [newOption, setNewOption] = useState('');\n  \n  // Field type options\n  const fieldTypes = [\n    { id: 'text', name: 'Text' },\n    { id: 'number', name: 'Number' },\n    { id: 'select', name: 'Dropdown' },\n    { id: 'checkbox', name: 'Checkbox' },\n    { id: 'radio', name: 'Radio Buttons' },\n    { id: 'date', name: 'Date' },\n    { id: 'textarea', name: 'Text Area' }\n  ];\n  \n  // Applies to options\n  const entityTypes = [\n    { id: 'pet', name: 'Pet' },\n    { id: 'customer', name: 'Customer' },\n    { id: 'service', name: 'Service' },\n    { id: 'appointment', name: 'Appointment' }\n  ];\n  \n  useEffect(() => {\n    const fetchCustomFields = async () => {\n      try {\n        setLoading(true);\n        \n        // In a real app, this would be an API call\n        // Mock data for demonstration\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        const mockFields = [\n          {\n            id: '1',\n            name: 'allergies',\n            label: 'Allergies',\n            type: 'textarea',\n            required: false,\n            options: [],\n            appliesTo: 'pet',\n            description: 'List any known allergies for the pet'\n          },\n          {\n            id: '2',\n            name: 'microchip_id',\n            label: 'Microchip ID',\n            type: 'text',\n            required: false,\n            options: [],\n            appliesTo: 'pet',\n            description: 'The pet\\'s microchip identification number'\n          },\n          {\n            id: '3',\n            name: 'coat_type',\n            label: 'Coat Type',\n            type: 'select',\n            required: true,\n            options: ['Short', 'Medium', 'Long', 'Double', 'Curly', 'Wire'],\n            appliesTo: 'pet',\n            description: 'The type of coat the pet has'\n          },\n          {\n            id: '4',\n            name: 'emergency_contact',\n            label: 'Emergency Contact',\n            type: 'text',\n            required: true,\n            options: [],\n            appliesTo: 'customer',\n            description: 'Name and phone number for emergency contact'\n          }\n        ];\n        \n        setFields(mockFields);\n      } catch (error) {\n        console.error('Error fetching custom fields:', error);\n        toast.error('Failed to load custom fields');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchCustomFields();\n  }, []);\n  \n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n  \n  const resetForm = () => {\n    setFormData({\n      name: '',\n      label: '',\n      type: 'text',\n      required: false,\n      options: [],\n      appliesTo: 'pet',\n      description: ''\n    });\n    setNewOption('');\n  };\n  \n  const handleAddOption = () => {\n    if (!newOption.trim()) return;\n    \n    setFormData(prev => ({\n      ...prev,\n      options: [...prev.options, newOption.trim()]\n    }));\n    \n    setNewOption('');\n  };\n  \n  const handleRemoveOption = (index) => {\n    setFormData(prev => ({\n      ...prev,\n      options: prev.options.filter((_, i) => i !== index)\n    }));\n  };\n  \n  const validateForm = () => {\n    if (!formData.name.trim()) {\n      toast.error('Field name is required');\n      return false;\n    }\n    \n    if (!formData.label.trim()) {\n      toast.error('Field label is required');\n      return false;\n    }\n    \n    // Check for spaces and special characters in name\n    if (!/^[a-z0-9_]+$/.test(formData.name)) {\n      toast.error('Field name can only contain lowercase letters, numbers, and underscores');\n      return false;\n    }\n    \n    // Check if dropdown/radio has options\n    if (['select', 'radio'].includes(formData.type) && formData.options.length === 0) {\n      toast.error(`${formData.type === 'select' ? 'Dropdown' : 'Radio buttons'} must have at least one option`);\n      return false;\n    }\n    \n    return true;\n  };\n  \n  const handleAddField = async () => {\n    try {\n      if (!validateForm()) return;\n      \n      // In a real app, this would be an API call\n      // Mock adding for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const newField = {\n        id: Date.now().toString(),\n        ...formData\n      };\n      \n      setFields(prev => [...prev, newField]);\n      resetForm();\n      setShowAddModal(false);\n      toast.success('Custom field added successfully');\n    } catch (error) {\n      console.error('Error adding custom field:', error);\n      toast.error('Failed to add custom field');\n    }\n  };\n  \n  const handleEditField = (field) => {\n    setSelectedField(field);\n    setFormData({\n      name: field.name,\n      label: field.label,\n      type: field.type,\n      required: field.required,\n      options: [...field.options],\n      appliesTo: field.appliesTo,\n      description: field.description\n    });\n    setShowEditModal(true);\n  };\n  \n  const handleUpdateField = async () => {\n    try {\n      if (!validateForm()) return;\n      \n      // In a real app, this would be an API call\n      // Mock updating for demonstration\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      setFields(prev => \n        prev.map(field => \n          field.id === selectedField.id ? { ...field, ...formData } : field\n        )\n      );\n      \n      resetForm();\n      setShowEditModal(false);\n      setSelectedField(null);\n      toast.success('Custom field updated successfully');\n    } catch (error) {\n      console.error('Error updating custom field:', error);\n      toast.error('Failed to update custom field');\n    }\n  };\n  \n  const handleDeleteField = async (fieldId) => {\n    if (window.confirm('Are you sure you want to delete this custom field? This may affect existing records.')) {\n      try {\n        // In a real app, this would be an API call\n        // Mock deleting for demonstration\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        setFields(prev => prev.filter(field => field.id !== fieldId));\n        toast.success('Custom field deleted successfully');\n      } catch (error) {\n        console.error('Error deleting custom field:', error);\n        toast.error('Failed to delete custom field');\n      }\n    }\n  };\n  \n  const getEntityName = (entityId) => {\n    const entity = entityTypes.find(type => type.id === entityId);\n    return entity ? entity.name : 'Unknown';\n  };\n  \n  const getTypeName = (typeId) => {\n    const type = fieldTypes.find(type => type.id === typeId);\n    return type ? type.name : 'Unknown';\n  };\n  \n  const renderAddEditModalContent = () => (\n    <>\n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"name\" className=\"form-label\">Field Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            className=\"form-control\"\n            value={formData.name}\n            onChange={handleInputChange}\n            placeholder=\"e.g. microchip_id\"\n            disabled={showEditModal} // Can't change name when editing\n            required\n          />\n          <small className=\"form-text text-muted\">\n            Use only lowercase letters, numbers, and underscores. This is used internally.\n          </small>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"label\" className=\"form-label\">Display Label</label>\n          <input\n            type=\"text\"\n            id=\"label\"\n            name=\"label\"\n            className=\"form-control\"\n            value={formData.label}\n            onChange={handleInputChange}\n            placeholder=\"e.g. Microchip ID\"\n            required\n          />\n          <small className=\"form-text text-muted\">\n            This is what users will see on forms.\n          </small>\n        </div>\n      </div>\n      \n      <div className=\"form-row\">\n        <div className=\"form-group\">\n          <label htmlFor=\"type\" className=\"form-label\">Field Type</label>\n          <select\n            id=\"type\"\n            name=\"type\"\n            className=\"form-control\"\n            value={formData.type}\n            onChange={handleInputChange}\n            disabled={showEditModal} // Can't change type when editing\n            required\n          >\n            {fieldTypes.map(type => (\n              <option key={type.id} value={type.id}>\n                {type.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"appliesTo\" className=\"form-label\">Applies To</label>\n          <select\n            id=\"appliesTo\"\n            name=\"appliesTo\"\n            className=\"form-control\"\n            value={formData.appliesTo}\n            onChange={handleInputChange}\n            disabled={showEditModal} // Can't change entity when editing\n            required\n          >\n            {entityTypes.map(entity => (\n              <option key={entity.id} value={entity.id}>\n                {entity.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"description\" className=\"form-label\">Description</label>\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          className=\"form-control\"\n          value={formData.description}\n          onChange={handleInputChange}\n          placeholder=\"Describe the purpose of this field...\"\n          rows={2}\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <div className=\"custom-checkbox\">\n          <input\n            type=\"checkbox\"\n            id=\"required\"\n            name=\"required\"\n            checked={formData.required}\n            onChange={handleInputChange}\n          />\n          <label htmlFor=\"required\">Required Field</label>\n        </div>\n      </div>\n      \n      {['select', 'radio'].includes(formData.type) && (\n        <div className=\"form-group\">\n          <label className=\"form-label\">Options</label>\n          <div className=\"options-list\">\n            {formData.options.map((option, index) => (\n              <div key={index} className=\"option-item\">\n                <span>{option}</span>\n                <button \n                  type=\"button\" \n                  className=\"btn-close\"\n                  onClick={() => handleRemoveOption(index)}\n                >\n                  &times;\n                </button>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"options-add\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={newOption}\n              onChange={(e) => setNewOption(e.target.value)}\n              placeholder=\"Add new option\"\n            />\n            <button \n              type=\"button\" \n              className=\"btn btn-secondary\"\n              onClick={handleAddOption}\n            >\n              Add\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n  \n  const renderAddModal = () => (\n    <Modal\n      isOpen={showAddModal}\n      onClose={() => setShowAddModal(false)}\n      title=\"Add Custom Field\"\n      footer={\n        <>\n          <button \n            className=\"btn btn-secondary\" \n            onClick={() => setShowAddModal(false)}\n          >\n            Cancel\n          </button>\n          <button \n            className=\"btn btn-primary\" \n            onClick={handleAddField}\n          >\n            Add Field\n          </button>\n        </>\n      }\n    >\n      {renderAddEditModalContent()}\n    </Modal>\n  );\n  \n  const renderEditModal = () => (\n    <Modal\n      isOpen={showEditModal}\n      onClose={() => {\n        setShowEditModal(false);\n        setSelectedField(null);\n        resetForm();\n      }}\n      title=\"Edit Custom Field\"\n      footer={\n        <>\n          <button \n            className=\"btn btn-secondary\" \n            onClick={() => {\n              setShowEditModal(false);\n              setSelectedField(null);\n              resetForm();\n            }}\n          >\n            Cancel\n          </button>\n          <button \n            className=\"btn btn-primary\" \n            onClick={handleUpdateField}\n          >\n            Update Field\n          </button>\n        </>\n      }\n    >\n      {renderAddEditModalContent()}\n    </Modal>\n  );\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  return (\n    <div className=\"custom-fields-page\">\n      <PageHeader\n        title=\"Custom Fields\"\n        subtitle=\"Create and manage custom fields for pets, customers, services, and appointments\"\n        actions={\n          <button \n            className=\"btn btn-primary\" \n            onClick={() => {\n              resetForm();\n              setShowAddModal(true);\n            }}\n          >\n            Add Field\n          </button>\n        }\n      />\n      \n      {fields.length > 0 ? (\n        <div className=\"grid grid-3\">\n          {fields.map(field => (\n            <Card key={field.id}>\n              <div className=\"field-header\">\n                <h3>{field.label}</h3>\n                <div className=\"field-badges\">\n                  <span className=\"badge badge-primary\">\n                    {getEntityName(field.appliesTo)}\n                  </span>\n                  {field.required && (\n                    <span className=\"badge badge-warning\">\n                      Required\n                    </span>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"field-details\">\n                <div className=\"detail-item\">\n                  <span className=\"detail-label\">Name:</span>\n                  <span className=\"detail-value\">{field.name}</span>\n                </div>\n                <div className=\"detail-item\">\n                  <span className=\"detail-label\">Type:</span>\n                  <span className=\"detail-value\">{getTypeName(field.type)}</span>\n                </div>\n                \n                {field.description && (\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Description:</span>\n                    <span className=\"detail-value\">{field.description}</span>\n                  </div>\n                )}\n                \n                {['select', 'radio'].includes(field.type) && field.options.length > 0 && (\n                  <div className=\"detail-item\">\n                    <span className=\"detail-label\">Options:</span>\n                    <span className=\"detail-value\">\n                      {field.options.join(', ')}\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"field-actions\">\n                <button \n                  className=\"btn btn-secondary btn-sm\" \n                  onClick={() => handleEditField(field)}\n                >\n                  Edit\n                </button>\n                <button \n                  className=\"btn btn-danger btn-sm\" \n                  onClick={() => handleDeleteField(field.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <EmptyState\n          title=\"No Custom Fields\"\n          message=\"You haven't created any custom fields yet. Custom fields allow you to collect additional information about pets, customers, services, and appointments.\"\n          actionText=\"Add Field\"\n          onActionClick={() => {\n            resetForm();\n            setShowAddModal(true);\n          }}\n        />\n      )}\n      \n      {renderAddModal()}\n      {renderEditModal()}\n    </div>\n  );\n};\n\nexport default CustomFields;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}