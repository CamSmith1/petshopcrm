{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppointmentForm = () => {\n  _s();\n  const {\n    appointmentId\n  } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    petId: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: ''\n  });\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n\n        // Fetch customers (using mock data for now)\n        const customersData = [{\n          _id: 'cust1',\n          name: 'John Smith',\n          email: 'john@example.com'\n        }, {\n          _id: 'cust2',\n          name: 'Mary Johnson',\n          email: 'mary@example.com'\n        }, {\n          _id: 'cust3',\n          name: 'David Williams',\n          email: 'david@example.com'\n        }, {\n          _id: 'cust4',\n          name: 'Sarah Miller',\n          email: 'sarah@example.com'\n        }];\n        setCustomers(customersData);\n\n        // Fetch pets (using mock data for now)\n        const petsData = [{\n          _id: 'pet1',\n          name: 'Buddy',\n          customerId: 'cust1',\n          breed: 'Golden Retriever'\n        }, {\n          _id: 'pet2',\n          name: 'Max',\n          customerId: 'cust2',\n          breed: 'German Shepherd'\n        }, {\n          _id: 'pet3',\n          name: 'Charlie',\n          customerId: 'cust3',\n          breed: 'Beagle'\n        }, {\n          _id: 'pet4',\n          name: 'Luna',\n          customerId: 'cust4',\n          breed: 'Poodle'\n        }, {\n          _id: 'pet5',\n          name: 'Rocky',\n          customerId: 'cust1',\n          breed: 'Bulldog'\n        }];\n        setPets(petsData);\n\n        // If editing, fetch appointment data\n        if (isEditing) {\n          var _appointment$client, _appointment$service, _appointment$client2, _appointment$subject, _appointment$notes;\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n\n          // Set customer and their pets\n          if ((_appointment$client = appointment.client) !== null && _appointment$client !== void 0 && _appointment$client._id) {\n            setSelectedCustomer(appointment.client._id);\n            setCustomerPets(petsData.filter(pet => pet.customerId === appointment.client._id));\n          }\n\n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n\n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          setFormData({\n            serviceId: ((_appointment$service = appointment.service) === null || _appointment$service === void 0 ? void 0 : _appointment$service._id) || '',\n            customerId: ((_appointment$client2 = appointment.client) === null || _appointment$client2 === void 0 ? void 0 : _appointment$client2._id) || '',\n            petId: ((_appointment$subject = appointment.subject) === null || _appointment$subject === void 0 ? void 0 : _appointment$subject._id) || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: ((_appointment$notes = appointment.notes) === null || _appointment$notes === void 0 ? void 0 : _appointment$notes.client) || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFormData();\n  }, [appointmentId, isEditing]);\n\n  // Update customer pets when customer changes\n  useEffect(() => {\n    if (selectedCustomer) {\n      setCustomerPets(pets.filter(pet => pet.customerId === selectedCustomer));\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        petId: '' // Reset pet selection when customer changes\n      }));\n    }\n  }, [selectedCustomer, pets]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n\n    // If customer is changed, update selected customer\n    if (name === 'customerId') {\n      setSelectedCustomer(value);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n      const appointmentData = {\n        service: formData.serviceId,\n        client: formData.customerId,\n        subject: formData.petId,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes\n        },\n        status: 'pending'\n      };\n\n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n\n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error saving appointment:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: isEditing ? 'Edit Appointment' : 'New Appointment',\n      backLink: \"/appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Service Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"serviceId\",\n                children: \"Service\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"serviceId\",\n                name: \"serviceId\",\n                className: \"form-control\",\n                value: formData.serviceId,\n                onChange: handleInputChange,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a service\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this), services.map(service => {\n                  var _service$price;\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: service._id,\n                    children: [service.title, \" ($\", ((_service$price = service.price) === null || _service$price === void 0 ? void 0 : _service$price.amount) || 0, \")\"]\n                  }, service._id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 21\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Customer & Pet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"customerId\",\n                children: \"Customer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"customerId\",\n                name: \"customerId\",\n                className: \"form-control\",\n                value: formData.customerId,\n                onChange: handleInputChange,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 19\n                }, this), customers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: customer._id,\n                  children: [customer.name, \" (\", customer.email, \")\"]\n                }, customer._id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"petId\",\n                children: \"Pet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"petId\",\n                name: \"petId\",\n                className: \"form-control\",\n                value: formData.petId,\n                onChange: handleInputChange,\n                required: true,\n                disabled: !formData.customerId,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a pet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 19\n                }, this), customerPets.map(pet => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: pet._id,\n                  children: [pet.name, \" (\", pet.breed, \")\"]\n                }, pet._id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Appointment Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group col-md-6\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"date\",\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  id: \"date\",\n                  name: \"date\",\n                  className: \"form-control\",\n                  value: formData.date,\n                  onChange: handleInputChange,\n                  required: true,\n                  min: new Date().toISOString().split('T')[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group col-md-6\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"time\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  id: \"time\",\n                  name: \"time\",\n                  className: \"form-control\",\n                  value: formData.time,\n                  onChange: handleInputChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"duration\",\n                children: \"Duration (minutes)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                id: \"duration\",\n                name: \"duration\",\n                className: \"form-control\",\n                value: formData.duration,\n                onChange: handleInputChange,\n                min: \"15\",\n                max: \"240\",\n                step: \"15\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Additional Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"notes\",\n                children: \"Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"notes\",\n                name: \"notes\",\n                className: \"form-control\",\n                value: formData.notes,\n                onChange: handleInputChange,\n                rows: \"3\",\n                placeholder: \"Add any special instructions or notes for this appointment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-outline-secondary\",\n              onClick: () => navigate('/appointments'),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: isEditing ? 'Update Appointment' : 'Create Appointment'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(AppointmentForm, \"bysv10jFLgRiIQpGUVN67EMG/XQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AppointmentForm;\nexport default AppointmentForm;\nvar _c;\n$RefreshReg$(_c, \"AppointmentForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","toast","PageHeader","LoadingSpinner","api","jsxDEV","_jsxDEV","AppointmentForm","_s","appointmentId","navigate","isEditing","loading","setLoading","services","setServices","customers","setCustomers","selectedCustomer","setSelectedCustomer","formData","setFormData","serviceId","customerId","petId","date","time","duration","notes","fetchFormData","servicesResponse","getServices","data","customersData","_id","name","email","petsData","breed","setPets","_appointment$client","_appointment$service","_appointment$client2","_appointment$subject","_appointment$notes","appointmentResponse","getBooking","appointment","booking","client","setCustomerPets","filter","pet","appointmentDate","Date","startTime","formattedDate","toISOString","split","formattedTime","toTimeString","slice","endTime","durationMinutes","Math","round","service","subject","error","console","pets","prev","handleInputChange","e","value","target","handleSubmit","preventDefault","getTime","appointmentData","status","updateBooking","success","createBooking","_error$response","_error$response$data","response","fileName","_jsxFileName","lineNumber","columnNumber","className","children","title","backLink","onSubmit","htmlFor","id","onChange","required","map","_service$price","price","amount","customer","disabled","customerPets","type","min","max","step","rows","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\n\nconst AppointmentForm = () => {\n  const { appointmentId } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  \n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  \n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    petId: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: '',\n  });\n\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n        \n        // Fetch customers (using mock data for now)\n        const customersData = [\n          { _id: 'cust1', name: 'John Smith', email: 'john@example.com' },\n          { _id: 'cust2', name: 'Mary Johnson', email: 'mary@example.com' },\n          { _id: 'cust3', name: 'David Williams', email: 'david@example.com' },\n          { _id: 'cust4', name: 'Sarah Miller', email: 'sarah@example.com' },\n        ];\n        setCustomers(customersData);\n        \n        // Fetch pets (using mock data for now)\n        const petsData = [\n          { _id: 'pet1', name: 'Buddy', customerId: 'cust1', breed: 'Golden Retriever' },\n          { _id: 'pet2', name: 'Max', customerId: 'cust2', breed: 'German Shepherd' },\n          { _id: 'pet3', name: 'Charlie', customerId: 'cust3', breed: 'Beagle' },\n          { _id: 'pet4', name: 'Luna', customerId: 'cust4', breed: 'Poodle' },\n          { _id: 'pet5', name: 'Rocky', customerId: 'cust1', breed: 'Bulldog' },\n        ];\n        setPets(petsData);\n        \n        // If editing, fetch appointment data\n        if (isEditing) {\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n          \n          // Set customer and their pets\n          if (appointment.client?._id) {\n            setSelectedCustomer(appointment.client._id);\n            setCustomerPets(petsData.filter(pet => pet.customerId === appointment.client._id));\n          }\n          \n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n          \n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          \n          setFormData({\n            serviceId: appointment.service?._id || '',\n            customerId: appointment.client?._id || '',\n            petId: appointment.subject?._id || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: appointment.notes?.client || '',\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchFormData();\n  }, [appointmentId, isEditing]);\n  \n  // Update customer pets when customer changes\n  useEffect(() => {\n    if (selectedCustomer) {\n      setCustomerPets(pets.filter(pet => pet.customerId === selectedCustomer));\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        petId: '', // Reset pet selection when customer changes\n      }));\n    }\n  }, [selectedCustomer, pets]);\n  \n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    \n    // If customer is changed, update selected customer\n    if (name === 'customerId') {\n      setSelectedCustomer(value);\n    }\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n      \n      const appointmentData = {\n        service: formData.serviceId,\n        client: formData.customerId,\n        subject: formData.petId,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes,\n        },\n        status: 'pending',\n      };\n      \n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n      \n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      console.error('Error saving appointment:', error);\n      toast.error(error.response?.data?.error || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  return (\n    <div className=\"page-container\">\n      <PageHeader \n        title={isEditing ? 'Edit Appointment' : 'New Appointment'} \n        backLink=\"/appointments\"\n      />\n      \n      <div className=\"card\">\n        <div className=\"card-body\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-section\">\n              <h3>Service Details</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"serviceId\">Service</label>\n                <select \n                  id=\"serviceId\" \n                  name=\"serviceId\" \n                  className=\"form-control\"\n                  value={formData.serviceId}\n                  onChange={handleInputChange}\n                  required\n                >\n                  <option value=\"\">Select a service</option>\n                  {services.map(service => (\n                    <option key={service._id} value={service._id}>\n                      {service.title} (${service.price?.amount || 0})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Customer & Pet</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"customerId\">Customer</label>\n                <select \n                  id=\"customerId\" \n                  name=\"customerId\" \n                  className=\"form-control\"\n                  value={formData.customerId}\n                  onChange={handleInputChange}\n                  required\n                >\n                  <option value=\"\">Select a customer</option>\n                  {customers.map(customer => (\n                    <option key={customer._id} value={customer._id}>\n                      {customer.name} ({customer.email})\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"petId\">Pet</label>\n                <select \n                  id=\"petId\" \n                  name=\"petId\" \n                  className=\"form-control\"\n                  value={formData.petId}\n                  onChange={handleInputChange}\n                  required\n                  disabled={!formData.customerId}\n                >\n                  <option value=\"\">Select a pet</option>\n                  {customerPets.map(pet => (\n                    <option key={pet._id} value={pet._id}>\n                      {pet.name} ({pet.breed})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Appointment Time</h3>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"date\">Date</label>\n                  <input \n                    type=\"date\" \n                    id=\"date\" \n                    name=\"date\" \n                    className=\"form-control\"\n                    value={formData.date}\n                    onChange={handleInputChange}\n                    required\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"time\">Time</label>\n                  <input \n                    type=\"time\" \n                    id=\"time\" \n                    name=\"time\" \n                    className=\"form-control\"\n                    value={formData.time}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"duration\">Duration (minutes)</label>\n                <input \n                  type=\"number\" \n                  id=\"duration\" \n                  name=\"duration\" \n                  className=\"form-control\"\n                  value={formData.duration}\n                  onChange={handleInputChange}\n                  min=\"15\"\n                  max=\"240\"\n                  step=\"15\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Additional Information</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"notes\">Notes</label>\n                <textarea \n                  id=\"notes\" \n                  name=\"notes\" \n                  className=\"form-control\"\n                  value={formData.notes}\n                  onChange={handleInputChange}\n                  rows=\"3\"\n                  placeholder=\"Add any special instructions or notes for this appointment\"\n                ></textarea>\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              <button \n                type=\"button\" \n                className=\"btn btn-outline-secondary\"\n                onClick={() => navigate('/appointments')}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                {isEditing ? 'Update Appointment' : 'Create Appointment'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppointmentForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}