{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{useNavigate}from'react-router-dom';import supabase from'../services/supabaseClient';import supabaseService from'../services/supabaseService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);// For development mode, provide a mock auth context if real context is not available\nif(process.env.NODE_ENV==='development'&&!context){console.warn('Auth context not found, using development fallback');return{currentUser:{id:'dev-user-123',name:'Development User',email:'dev@example.com',role:'business',isVerified:true},session:{access_token:'dev-token'},authLoading:false,error:null,register:async()=>({success:true}),login:async()=>({success:true}),logout:async()=>{},updateProfile:async()=>({success:true}),setBypassAuth:()=>{},isAuthenticated:true};}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[session,setSession]=useState(null);const[authLoading,setAuthLoading]=useState(true);const[error,setError]=useState(null);const navigate=useNavigate();// Check for existing session on mount\nuseEffect(()=>{const checkSession=async()=>{// Get current session from Supabase\nconst{data:{session:currentSession}}=await supabase.auth.getSession();if(currentSession){setSession(currentSession);try{// Get user profile data\nconst{data:{user}}=await supabase.auth.getUser();if(user){// Get additional user data from profiles table\nconst{data:userData,error:profileError}=await supabase.from('users').select('*').eq('id',user.id).single();if(profileError){var _user$user_metadata,_user$user_metadata2;console.error('Error fetching user profile:',profileError);// Create a fallback user object with minimal data\nsetCurrentUser({id:user.id,email:user.email,name:((_user$user_metadata=user.user_metadata)===null||_user$user_metadata===void 0?void 0:_user$user_metadata.name)||'User',role:((_user$user_metadata2=user.user_metadata)===null||_user$user_metadata2===void 0?void 0:_user$user_metadata2.role)||'client'});}else{var _user$user_metadata3,_user$user_metadata4;// Create a complete user object\nsetCurrentUser({id:user.id,email:user.email,name:userData.name||((_user$user_metadata3=user.user_metadata)===null||_user$user_metadata3===void 0?void 0:_user$user_metadata3.name),role:userData.role||((_user$user_metadata4=user.user_metadata)===null||_user$user_metadata4===void 0?void 0:_user$user_metadata4.role)||'client',phone:userData.phone,avatar:userData.avatar_url,address:{street:userData.street,city:userData.city,state:userData.state,zipCode:userData.zip_code,country:userData.country},businessName:userData.business_name,businessCategory:userData.business_category,isVerified:user.email_confirmed_at?true:false});}}}catch(err){console.error('Error getting user details:',err);}}setAuthLoading(false);};// Listen for auth state changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,newSession)=>{setSession(newSession);if(event==='SIGNED_IN'&&newSession){try{// Get user profile data\nconst{data:{user}}=await supabase.auth.getUser(newSession.access_token);if(user){// Get additional user data from profiles table\nconst{data:userData,error:profileError}=await supabase.from('users').select('*').eq('id',user.id).single();if(profileError){var _user$user_metadata5,_user$user_metadata6;console.error('Error fetching user profile on sign in:',profileError);setCurrentUser({id:user.id,email:user.email,name:((_user$user_metadata5=user.user_metadata)===null||_user$user_metadata5===void 0?void 0:_user$user_metadata5.name)||'User',role:((_user$user_metadata6=user.user_metadata)===null||_user$user_metadata6===void 0?void 0:_user$user_metadata6.role)||'client'});}else{var _user$user_metadata7,_user$user_metadata8;setCurrentUser({id:user.id,email:user.email,name:userData.name||((_user$user_metadata7=user.user_metadata)===null||_user$user_metadata7===void 0?void 0:_user$user_metadata7.name),role:userData.role||((_user$user_metadata8=user.user_metadata)===null||_user$user_metadata8===void 0?void 0:_user$user_metadata8.role)||'client',phone:userData.phone,avatar:userData.avatar_url,address:{street:userData.street,city:userData.city,state:userData.state,zipCode:userData.zip_code,country:userData.country},businessName:userData.business_name,businessCategory:userData.business_category,isVerified:user.email_confirmed_at?true:false});}}}catch(err){console.error('Error getting user details on auth change:',err);}}else if(event==='SIGNED_OUT'||event==='USER_DELETED'){setCurrentUser(null);setSession(null);}});checkSession();// Cleanup subscription on unmount\nreturn()=>{subscription.unsubscribe();};},[]);// Register user\nconst register=async userData=>{try{setError(null);setAuthLoading(true);const result=await supabaseService.auth.register(userData);setSession(result.session);setCurrentUser(result.user);setAuthLoading(false);return result;}catch(err){setAuthLoading(false);setError(err.message||'An error occurred during registration. Please try again.');throw err;}};// Login user\nconst login=async credentials=>{try{setError(null);setAuthLoading(true);// Validate credentials\nif(!credentials.email){throw new Error('Email is required');}if(!credentials.password){throw new Error('Password is required');}console.log('AuthContext: Attempting login with email:',credentials.email);const result=await supabaseService.auth.login(credentials);setSession(result.session);setCurrentUser(result.user);setAuthLoading(false);return{success:true,user:result.user};}catch(err){setAuthLoading(false);setError(err.message||'Invalid credentials. Please try again.');console.error('Login failed:',err.message);throw err;}};// Logout user\nconst logout=async()=>{try{await supabaseService.auth.logout();setSession(null);setCurrentUser(null);navigate('/login');}catch(err){console.error('Error during logout:',err);}};// Update user profile\nconst updateProfile=async profileData=>{try{setError(null);setAuthLoading(true);const result=await supabaseService.users.updateProfile(profileData);setCurrentUser({...currentUser,...result.user});setAuthLoading(false);return result;}catch(err){setAuthLoading(false);setError(err.message||'An error occurred while updating profile. Please try again.');throw err;}};// For demo purposes - bypass authentication\nconst setBypassAuth=userData=>{console.log('Using demo mode - bypassing Supabase authentication');// Create a mock session and user\nsetSession({access_token:'demo-token'});setCurrentUser(userData);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{currentUser,session,authLoading,error,register,login,logout,updateProfile,setBypassAuth,isAuthenticated:!!session},children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","supabase","supabaseService","jsx","_jsx","AuthContext","useAuth","context","process","env","NODE_ENV","console","warn","currentUser","id","name","email","role","isVerified","session","access_token","authLoading","error","register","success","login","logout","updateProfile","setBypassAuth","isAuthenticated","AuthProvider","_ref","children","setCurrentUser","setSession","setAuthLoading","setError","navigate","checkSession","data","currentSession","auth","getSession","user","getUser","userData","profileError","from","select","eq","single","_user$user_metadata","_user$user_metadata2","user_metadata","_user$user_metadata3","_user$user_metadata4","phone","avatar","avatar_url","address","street","city","state","zipCode","zip_code","country","businessName","business_name","businessCategory","business_category","email_confirmed_at","err","subscription","onAuthStateChange","event","newSession","_user$user_metadata5","_user$user_metadata6","_user$user_metadata7","_user$user_metadata8","unsubscribe","result","message","credentials","Error","password","log","profileData","users","Provider","value"],"sources":["/home/toebot/dog-services-saas/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport supabase from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  \n  // For development mode, provide a mock auth context if real context is not available\n  if (process.env.NODE_ENV === 'development' && !context) {\n    console.warn('Auth context not found, using development fallback');\n    return {\n      currentUser: {\n        id: 'dev-user-123',\n        name: 'Development User',\n        email: 'dev@example.com',\n        role: 'business',\n        isVerified: true\n      },\n      session: { access_token: 'dev-token' },\n      authLoading: false,\n      error: null,\n      register: async () => ({ success: true }),\n      login: async () => ({ success: true }),\n      logout: async () => {},\n      updateProfile: async () => ({ success: true }),\n      setBypassAuth: () => {},\n      isAuthenticated: true\n    };\n  }\n  \n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [session, setSession] = useState(null);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      // Get current session from Supabase\n      const { data: { session: currentSession } } = await supabase.auth.getSession();\n      \n      if (currentSession) {\n        setSession(currentSession);\n        \n        try {\n          // Get user profile data\n          const { data: { user } } = await supabase.auth.getUser();\n          \n          if (user) {\n            // Get additional user data from profiles table\n            const { data: userData, error: profileError } = await supabase\n              .from('users')\n              .select('*')\n              .eq('id', user.id)\n              .single();\n              \n            if (profileError) {\n              console.error('Error fetching user profile:', profileError);\n              // Create a fallback user object with minimal data\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: user.user_metadata?.name || 'User',\n                role: user.user_metadata?.role || 'client',\n              });\n            } else {\n              // Create a complete user object\n              setCurrentUser({\n                id: user.id,\n                email: user.email,\n                name: userData.name || user.user_metadata?.name,\n                role: userData.role || user.user_metadata?.role || 'client',\n                phone: userData.phone,\n                avatar: userData.avatar_url,\n                address: {\n                  street: userData.street,\n                  city: userData.city,\n                  state: userData.state,\n                  zipCode: userData.zip_code,\n                  country: userData.country\n                },\n                businessName: userData.business_name,\n                businessCategory: userData.business_category,\n                isVerified: user.email_confirmed_at ? true : false,\n              });\n            }\n          }\n        } catch (err) {\n          console.error('Error getting user details:', err);\n        }\n      }\n      \n      setAuthLoading(false);\n    };\n    \n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, newSession) => {\n        setSession(newSession);\n        \n        if (event === 'SIGNED_IN' && newSession) {\n          try {\n            // Get user profile data\n            const { data: { user } } = await supabase.auth.getUser(newSession.access_token);\n            \n            if (user) {\n              // Get additional user data from profiles table\n              const { data: userData, error: profileError } = await supabase\n                .from('users')\n                .select('*')\n                .eq('id', user.id)\n                .single();\n                \n              if (profileError) {\n                console.error('Error fetching user profile on sign in:', profileError);\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: user.user_metadata?.name || 'User',\n                  role: user.user_metadata?.role || 'client',\n                });\n              } else {\n                setCurrentUser({\n                  id: user.id,\n                  email: user.email,\n                  name: userData.name || user.user_metadata?.name,\n                  role: userData.role || user.user_metadata?.role || 'client',\n                  phone: userData.phone,\n                  avatar: userData.avatar_url,\n                  address: {\n                    street: userData.street,\n                    city: userData.city,\n                    state: userData.state,\n                    zipCode: userData.zip_code,\n                    country: userData.country\n                  },\n                  businessName: userData.business_name,\n                  businessCategory: userData.business_category,\n                  isVerified: user.email_confirmed_at ? true : false,\n                });\n              }\n            }\n          } catch (err) {\n            console.error('Error getting user details on auth change:', err);\n          }\n        } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n          setCurrentUser(null);\n          setSession(null);\n        }\n      }\n    );\n    \n    checkSession();\n    \n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.auth.register(userData);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred during registration. Please try again.');\n      throw err;\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      // Validate credentials\n      if (!credentials.email) {\n        throw new Error('Email is required');\n      }\n      \n      if (!credentials.password) {\n        throw new Error('Password is required');\n      }\n      \n      console.log('AuthContext: Attempting login with email:', credentials.email);\n      \n      const result = await supabaseService.auth.login(credentials);\n      \n      setSession(result.session);\n      setCurrentUser(result.user);\n      \n      setAuthLoading(false);\n      return { success: true, user: result.user };\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'Invalid credentials. Please try again.');\n      console.error('Login failed:', err.message);\n      throw err;\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    try {\n      await supabaseService.auth.logout();\n      setSession(null);\n      setCurrentUser(null);\n      navigate('/login');\n    } catch (err) {\n      console.error('Error during logout:', err);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setError(null);\n      setAuthLoading(true);\n      \n      const result = await supabaseService.users.updateProfile(profileData);\n      \n      setCurrentUser({\n        ...currentUser,\n        ...result.user\n      });\n      \n      setAuthLoading(false);\n      return result;\n    } catch (err) {\n      setAuthLoading(false);\n      setError(err.message || 'An error occurred while updating profile. Please try again.');\n      throw err;\n    }\n  };\n\n  // For demo purposes - bypass authentication\n  const setBypassAuth = (userData) => {\n    console.log('Using demo mode - bypassing Supabase authentication');\n    \n    // Create a mock session and user\n    setSession({ access_token: 'demo-token' });\n    setCurrentUser(userData);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        session,\n        authLoading,\n        error,\n        register,\n        login,\n        logout,\n        updateProfile,\n        setBypassAuth,\n        isAuthenticated: !!session,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}