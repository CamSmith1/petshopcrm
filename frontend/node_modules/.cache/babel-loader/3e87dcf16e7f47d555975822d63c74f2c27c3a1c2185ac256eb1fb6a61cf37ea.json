{"ast":null,"code":"import React,{useState,useEffect}from'react';import{format,parse,isAfter,differenceInDays,addMonths,isSameDay}from'date-fns';import{toast}from'react-toastify';import{useBusiness}from'../context/BusinessContext';// Components\nimport PageHeader from'../components/common/PageHeader';import Button from'../components/common/Button';import LoadingSpinner from'../components/common/LoadingSpinner';import Modal from'../components/common/Modal';import EmptyState from'../components/common/EmptyState';/**\n * Holiday Management page\n * Allows businesses to create and manage holiday and closure dates\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HolidayManagement=()=>{// State\nconst[isLoading,setIsLoading]=useState(true);const[holidays,setHolidays]=useState([]);const[showAddModal,setShowAddModal]=useState(false);const[showEditModal,setShowEditModal]=useState(false);const[selectedHoliday,setSelectedHoliday]=useState(null);const[holidayForm,setHolidayForm]=useState({name:'',startDate:format(new Date(),'yyyy-MM-dd'),endDate:format(new Date(),'yyyy-MM-dd'),isFullDay:true,startTime:'00:00',endTime:'23:59',recurrence:'none',recurrenceEndDate:format(addMonths(new Date(),12),'yyyy-MM-dd'),notes:'',affectsAllServices:true,affectedServices:[]});const[services,setServices]=useState([]);const[upcomingFilter,setUpcomingFilter]=useState(true);// Context\nconst{fetchServices,businessLoading}=useBusiness();// Initialize and load data\nuseEffect(()=>{const loadData=async()=>{setIsLoading(true);try{// Fetch services\nconst servicesData=await fetchServices();setServices(servicesData);// Fetch holidays (this would be an API call in a real application)\n// For demo purposes, we'll use mock data\nconst mockHolidays=[{_id:'hol1',name:'Independence Day',startDate:'2025-07-04',endDate:'2025-07-04',isFullDay:true,startTime:null,endTime:null,recurrence:'yearly',recurrenceEndDate:'2030-12-31',notes:'Closed for Independence Day',affectsAllServices:true,affectedServices:[]},{_id:'hol2',name:'Staff Training',startDate:'2025-04-15',endDate:'2025-04-15',isFullDay:false,startTime:'13:00',endTime:'17:00',recurrence:'none',recurrenceEndDate:null,notes:'Afternoon closure for staff training session',affectsAllServices:true,affectedServices:[]},{_id:'hol3',name:'Christmas Break',startDate:'2025-12-24',endDate:'2025-12-26',isFullDay:true,startTime:null,endTime:null,recurrence:'yearly',recurrenceEndDate:'2030-12-31',notes:'Closed for Christmas holidays',affectsAllServices:true,affectedServices:[]},{_id:'hol4',name:'System Maintenance',startDate:'2025-03-20',endDate:'2025-03-20',isFullDay:false,startTime:'18:00',endTime:'20:00',recurrence:'none',recurrenceEndDate:null,notes:'No online bookings during system maintenance',affectsAllServices:false,affectedServices:['serv1','serv2']}];setHolidays(mockHolidays);}catch(error){console.error('Error loading holiday data:',error);toast.error('Failed to load holiday data');}finally{setIsLoading(false);}};loadData();},[fetchServices]);// Handle form input change\nconst handleFormChange=e=>{const{name,value,type,checked}=e.target;setHolidayForm(prev=>({...prev,[name]:type==='checkbox'?checked:value}));};// Handle service selection for affected services\nconst handleServiceSelection=serviceId=>{setHolidayForm(prev=>{const updatedServices=[...prev.affectedServices];if(updatedServices.includes(serviceId)){// Remove service if already selected\nreturn{...prev,affectedServices:updatedServices.filter(id=>id!==serviceId)};}else{// Add service if not selected\nreturn{...prev,affectedServices:[...updatedServices,serviceId]};}});};// Open add holiday modal\nconst handleOpenAddModal=()=>{setHolidayForm({name:'',startDate:format(new Date(),'yyyy-MM-dd'),endDate:format(new Date(),'yyyy-MM-dd'),isFullDay:true,startTime:'00:00',endTime:'23:59',recurrence:'none',recurrenceEndDate:format(addMonths(new Date(),12),'yyyy-MM-dd'),notes:'',affectsAllServices:true,affectedServices:[]});setShowAddModal(true);};// Open edit holiday modal\nconst handleOpenEditModal=holiday=>{setSelectedHoliday(holiday);setHolidayForm({name:holiday.name,startDate:holiday.startDate,endDate:holiday.endDate,isFullDay:holiday.isFullDay,startTime:holiday.startTime||'00:00',endTime:holiday.endTime||'23:59',recurrence:holiday.recurrence||'none',recurrenceEndDate:holiday.recurrenceEndDate||format(addMonths(new Date(),12),'yyyy-MM-dd'),notes:holiday.notes||'',affectsAllServices:holiday.affectsAllServices,affectedServices:holiday.affectedServices||[]});setShowEditModal(true);};// Save a new holiday\nconst handleSaveHoliday=()=>{try{// Validate form\nif(!holidayForm.name.trim()){toast.error('Please enter a holiday name');return;}const startDate=parse(holidayForm.startDate,'yyyy-MM-dd',new Date());const endDate=parse(holidayForm.endDate,'yyyy-MM-dd',new Date());if(isAfter(startDate,endDate)){toast.error('End date must be after start date');return;}// For non-full day holidays, validate times\nif(!holidayForm.isFullDay){if(holidayForm.startTime>=holidayForm.endTime){toast.error('End time must be after start time');return;}}// Check affected services if not affecting all\nif(!holidayForm.affectsAllServices&&holidayForm.affectedServices.length===0){toast.error('Please select at least one service');return;}// This would be an API call in a real application\n// For demo purposes, we'll update our local state\nconst newHoliday={_id:`hol${Date.now()}`,...holidayForm};setHolidays(prev=>[...prev,newHoliday]);toast.success('Holiday added successfully');setShowAddModal(false);}catch(error){console.error('Error saving holiday:',error);toast.error('Failed to save holiday');}};// Update an existing holiday\nconst handleUpdateHoliday=()=>{try{// Validate form\nif(!holidayForm.name.trim()){toast.error('Please enter a holiday name');return;}const startDate=parse(holidayForm.startDate,'yyyy-MM-dd',new Date());const endDate=parse(holidayForm.endDate,'yyyy-MM-dd',new Date());if(isAfter(startDate,endDate)){toast.error('End date must be after start date');return;}// For non-full day holidays, validate times\nif(!holidayForm.isFullDay){if(holidayForm.startTime>=holidayForm.endTime){toast.error('End time must be after start time');return;}}// Check affected services if not affecting all\nif(!holidayForm.affectsAllServices&&holidayForm.affectedServices.length===0){toast.error('Please select at least one service');return;}// This would be an API call in a real application\n// For demo purposes, we'll update our local state\nconst updatedHolidays=holidays.map(holiday=>holiday._id===selectedHoliday._id?{...holiday,...holidayForm}:holiday);setHolidays(updatedHolidays);toast.success('Holiday updated successfully');setShowEditModal(false);}catch(error){console.error('Error updating holiday:',error);toast.error('Failed to update holiday');}};// Delete a holiday\nconst handleDeleteHoliday=()=>{try{// This would be an API call in a real application\n// For demo purposes, we'll update our local state\nconst updatedHolidays=holidays.filter(holiday=>holiday._id!==selectedHoliday._id);setHolidays(updatedHolidays);toast.success('Holiday deleted successfully');setShowEditModal(false);}catch(error){console.error('Error deleting holiday:',error);toast.error('Failed to delete holiday');}};// Format date range for display\nconst formatDateRange=(startDate,endDate)=>{const start=parse(startDate,'yyyy-MM-dd',new Date());const end=parse(endDate,'yyyy-MM-dd',new Date());if(isSameDay(start,end)){return format(start,'MMMM d, yyyy');}if(format(start,'yyyy')===format(end,'yyyy')){if(format(start,'MMMM')===format(end,'MMMM')){return`${format(start,'MMMM d')} - ${format(end,'d, yyyy')}`;}return`${format(start,'MMMM d')} - ${format(end,'MMMM d, yyyy')}`;}return`${format(start,'MMMM d, yyyy')} - ${format(end,'MMMM d, yyyy')}`;};// Format time range for display\nconst formatTimeRange=(startTime,endTime)=>{if(!startTime||!endTime)return'All Day';const formatTime=timeString=>{const[hours,minutes]=timeString.split(':');const hour=parseInt(hours,10);const minute=parseInt(minutes,10);const period=hour>=12?'PM':'AM';const hour12=hour%12||12;return`${hour12}:${minutes.padStart(2,'0')} ${period}`;};return`${formatTime(startTime)} - ${formatTime(endTime)}`;};// Get service names for display\nconst getServiceNames=serviceIds=>{if(!serviceIds||serviceIds.length===0)return'All Services';return serviceIds.map(id=>{const service=services.find(s=>s._id===id);return service?service.name:'Unknown Service';}).join(', ');};// Filter holidays based on current view\nconst filteredHolidays=upcomingFilter?holidays.filter(holiday=>{const endDate=parse(holiday.endDate,'yyyy-MM-dd',new Date());return isAfter(endDate,new Date())||isSameDay(endDate,new Date());}):holidays;// Sort holidays by start date\nconst sortedHolidays=[...filteredHolidays].sort((a,b)=>{const dateA=parse(a.startDate,'yyyy-MM-dd',new Date());const dateB=parse(b.startDate,'yyyy-MM-dd',new Date());return dateA-dateB;});// Get recurrence text\nconst getRecurrenceText=recurrence=>{switch(recurrence){case'daily':return'Daily';case'weekly':return'Weekly';case'monthly':return'Monthly';case'yearly':return'Yearly';case'none':default:return'One-time';}};// Get status of holiday (upcoming, active, past)\nconst getHolidayStatus=holiday=>{const today=new Date();const startDate=parse(holiday.startDate,'yyyy-MM-dd',new Date());const endDate=parse(holiday.endDate,'yyyy-MM-dd',new Date());if(isAfter(startDate,today)){// Upcoming\nconst daysUntil=differenceInDays(startDate,today);return{status:'upcoming',label:`In ${daysUntil} day${daysUntil!==1?'s':''}`};}else if(isAfter(endDate,today)||isSameDay(endDate,today)){// Active\nreturn{status:'active',label:'Active Now'};}else{// Past\nreturn{status:'past',label:'Past'};}};// Loading state\nif(isLoading||businessLoading){return/*#__PURE__*/_jsx(LoadingSpinner,{text:\"Loading holidays...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"holiday-management-page\",children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Holidays & Closures\",description:\"Manage your business holidays, closures, and special hours.\",actionButton:/*#__PURE__*/_jsx(Button,{primary:true,onClick:handleOpenAddModal,leftIcon:\"+\",children:\"Add Holiday\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"view-controls\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"view-tabs\",children:[/*#__PURE__*/_jsx(\"button\",{className:`view-tab ${upcomingFilter?'active':''}`,onClick:()=>setUpcomingFilter(true),children:\"Upcoming & Active\"}),/*#__PURE__*/_jsx(\"button\",{className:`view-tab ${!upcomingFilter?'active':''}`,onClick:()=>setUpcomingFilter(false),children:\"All Holidays\"})]})}),sortedHolidays.length===0?/*#__PURE__*/_jsx(EmptyState,{title:upcomingFilter?\"No Upcoming Holidays\":\"No Holidays Set\",description:upcomingFilter?\"You don't have any upcoming holidays or closures scheduled.\":\"You haven't set any holidays or closures yet.\",actionButton:/*#__PURE__*/_jsx(Button,{primary:true,onClick:handleOpenAddModal,children:\"Add Holiday\"}),icon:\"\\uD83C\\uDFD6\\uFE0F\"}):/*#__PURE__*/_jsx(\"div\",{className:\"holidays-list\",children:sortedHolidays.map(holiday=>{const{status,label}=getHolidayStatus(holiday);return/*#__PURE__*/_jsxs(\"div\",{className:`holiday-card ${status}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"holiday-header\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"holiday-name\",children:holiday.name}),/*#__PURE__*/_jsx(\"div\",{className:`status-badge ${status}`,children:label})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"holiday-dates\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"date-range\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDCC5\"}),formatDateRange(holiday.startDate,holiday.endDate)]}),!holiday.isFullDay&&/*#__PURE__*/_jsxs(\"div\",{className:\"time-range\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\u23F0\"}),formatTimeRange(holiday.startTime,holiday.endTime)]})]}),holiday.recurrence!=='none'&&/*#__PURE__*/_jsxs(\"div\",{className:\"recurrence-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDD04\"}),getRecurrenceText(holiday.recurrence),holiday.recurrenceEndDate&&/*#__PURE__*/_jsxs(\"span\",{children:[\" until \",format(parse(holiday.recurrenceEndDate,'yyyy-MM-dd',new Date()),'MMMM d, yyyy')]})]}),!holiday.affectsAllServices&&/*#__PURE__*/_jsxs(\"div\",{className:\"affected-services\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDEE0\\uFE0F\"}),/*#__PURE__*/_jsx(\"span\",{className:\"label\",children:\"Affects: \"}),getServiceNames(holiday.affectedServices)]}),holiday.notes&&/*#__PURE__*/_jsxs(\"div\",{className:\"holiday-notes\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDCDD\"}),holiday.notes]}),/*#__PURE__*/_jsx(\"div\",{className:\"holiday-actions\",children:/*#__PURE__*/_jsx(Button,{small:true,secondary:true,onClick:()=>handleOpenEditModal(holiday),children:\"Edit\"})})]},holiday._id);})}),/*#__PURE__*/_jsx(Modal,{show:showAddModal,onClose:()=>setShowAddModal(false),title:\"Add Holiday or Closure\",children:/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Holiday Name*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"name\",name:\"name\",value:holidayForm.name,onChange:handleFormChange,placeholder:\"e.g., Christmas, Staff Training, etc.\",required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"startDate\",children:\"Start Date*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"startDate\",name:\"startDate\",value:holidayForm.startDate,onChange:handleFormChange,required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"endDate\",children:\"End Date*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"endDate\",name:\"endDate\",value:holidayForm.endDate,onChange:handleFormChange,required:true})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"isFullDay\",checked:holidayForm.isFullDay,onChange:handleFormChange}),\"Full day (closed all day)\"]})}),!holidayForm.isFullDay&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"startTime\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"startTime\",name:\"startTime\",value:holidayForm.startTime,onChange:handleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"endTime\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"endTime\",name:\"endTime\",value:holidayForm.endTime,onChange:handleFormChange})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"recurrence\",children:\"Recurrence\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"recurrence\",name:\"recurrence\",value:holidayForm.recurrence,onChange:handleFormChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"none\",children:\"One-time only\"}),/*#__PURE__*/_jsx(\"option\",{value:\"daily\",children:\"Daily\"}),/*#__PURE__*/_jsx(\"option\",{value:\"weekly\",children:\"Weekly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"monthly\",children:\"Monthly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"yearly\",children:\"Yearly\"})]})]}),holidayForm.recurrence!=='none'&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"recurrenceEndDate\",children:\"Recurrence End Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"recurrenceEndDate\",name:\"recurrenceEndDate\",value:holidayForm.recurrenceEndDate,onChange:handleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"notes\",children:\"Notes\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"notes\",name:\"notes\",value:holidayForm.notes,onChange:handleFormChange,placeholder:\"Additional information about this holiday or closure\",rows:3})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"affectsAllServices\",checked:holidayForm.affectsAllServices,onChange:handleFormChange}),\"Affects all services\"]})}),!holidayForm.affectsAllServices&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Affected Services\"}),/*#__PURE__*/_jsx(\"div\",{className:\"services-selection\",children:services.map(service=>/*#__PURE__*/_jsx(\"div\",{className:\"service-checkbox\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:holidayForm.affectedServices.includes(service._id),onChange:()=>handleServiceSelection(service._id)}),service.name]})},service._id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(Button,{type:\"button\",secondary:true,onClick:()=>setShowAddModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{type:\"button\",primary:true,onClick:handleSaveHoliday,children:\"Save Holiday\"})]})]})}),/*#__PURE__*/_jsx(Modal,{show:showEditModal,onClose:()=>setShowEditModal(false),title:\"Edit Holiday or Closure\",children:selectedHoliday&&/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-name\",children:\"Holiday Name*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"edit-name\",name:\"name\",value:holidayForm.name,onChange:handleFormChange,required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-startDate\",children:\"Start Date*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"edit-startDate\",name:\"startDate\",value:holidayForm.startDate,onChange:handleFormChange,required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-endDate\",children:\"End Date*\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"edit-endDate\",name:\"endDate\",value:holidayForm.endDate,onChange:handleFormChange,required:true})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"isFullDay\",checked:holidayForm.isFullDay,onChange:handleFormChange}),\"Full day (closed all day)\"]})}),!holidayForm.isFullDay&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-startTime\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"edit-startTime\",name:\"startTime\",value:holidayForm.startTime,onChange:handleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-endTime\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"edit-endTime\",name:\"endTime\",value:holidayForm.endTime,onChange:handleFormChange})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-recurrence\",children:\"Recurrence\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"edit-recurrence\",name:\"recurrence\",value:holidayForm.recurrence,onChange:handleFormChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"none\",children:\"One-time only\"}),/*#__PURE__*/_jsx(\"option\",{value:\"daily\",children:\"Daily\"}),/*#__PURE__*/_jsx(\"option\",{value:\"weekly\",children:\"Weekly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"monthly\",children:\"Monthly\"}),/*#__PURE__*/_jsx(\"option\",{value:\"yearly\",children:\"Yearly\"})]})]}),holidayForm.recurrence!=='none'&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-recurrenceEndDate\",children:\"Recurrence End Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"edit-recurrenceEndDate\",name:\"recurrenceEndDate\",value:holidayForm.recurrenceEndDate,onChange:handleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-notes\",children:\"Notes\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"edit-notes\",name:\"notes\",value:holidayForm.notes,onChange:handleFormChange,placeholder:\"Additional information about this holiday or closure\",rows:3})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"affectsAllServices\",checked:holidayForm.affectsAllServices,onChange:handleFormChange}),\"Affects all services\"]})}),!holidayForm.affectsAllServices&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Select Affected Services\"}),/*#__PURE__*/_jsx(\"div\",{className:\"services-selection\",children:services.map(service=>/*#__PURE__*/_jsx(\"div\",{className:\"service-checkbox\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:holidayForm.affectedServices.includes(service._id),onChange:()=>handleServiceSelection(service._id)}),service.name]})},service._id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(Button,{type:\"button\",danger:true,onClick:handleDeleteHoliday,children:\"Delete\"}),/*#__PURE__*/_jsx(Button,{type:\"button\",secondary:true,onClick:()=>setShowEditModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{type:\"button\",primary:true,onClick:handleUpdateHoliday,children:\"Update Holiday\"})]})]})})]});};export default HolidayManagement;","map":{"version":3,"names":["React","useState","useEffect","format","parse","isAfter","differenceInDays","addMonths","isSameDay","toast","useBusiness","PageHeader","Button","LoadingSpinner","Modal","EmptyState","jsx","_jsx","jsxs","_jsxs","HolidayManagement","isLoading","setIsLoading","holidays","setHolidays","showAddModal","setShowAddModal","showEditModal","setShowEditModal","selectedHoliday","setSelectedHoliday","holidayForm","setHolidayForm","name","startDate","Date","endDate","isFullDay","startTime","endTime","recurrence","recurrenceEndDate","notes","affectsAllServices","affectedServices","services","setServices","upcomingFilter","setUpcomingFilter","fetchServices","businessLoading","loadData","servicesData","mockHolidays","_id","error","console","handleFormChange","e","value","type","checked","target","prev","handleServiceSelection","serviceId","updatedServices","includes","filter","id","handleOpenAddModal","handleOpenEditModal","holiday","handleSaveHoliday","trim","length","newHoliday","now","success","handleUpdateHoliday","updatedHolidays","map","handleDeleteHoliday","formatDateRange","start","end","formatTimeRange","formatTime","timeString","hours","minutes","split","hour","parseInt","minute","period","hour12","padStart","getServiceNames","serviceIds","service","find","s","join","filteredHolidays","sortedHolidays","sort","a","b","dateA","dateB","getRecurrenceText","getHolidayStatus","today","daysUntil","status","label","text","className","children","title","description","actionButton","primary","onClick","leftIcon","icon","small","secondary","show","onClose","htmlFor","onChange","placeholder","required","rows","danger"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/HolidayManagement.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { format, parse, isAfter, differenceInDays, addMonths, isSameDay } from 'date-fns';\nimport { toast } from 'react-toastify';\nimport { useBusiness } from '../context/BusinessContext';\n\n// Components\nimport PageHeader from '../components/common/PageHeader';\nimport Button from '../components/common/Button';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport Modal from '../components/common/Modal';\nimport EmptyState from '../components/common/EmptyState';\n\n/**\n * Holiday Management page\n * Allows businesses to create and manage holiday and closure dates\n */\nconst HolidayManagement = () => {\n  // State\n  const [isLoading, setIsLoading] = useState(true);\n  const [holidays, setHolidays] = useState([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedHoliday, setSelectedHoliday] = useState(null);\n  const [holidayForm, setHolidayForm] = useState({\n    name: '',\n    startDate: format(new Date(), 'yyyy-MM-dd'),\n    endDate: format(new Date(), 'yyyy-MM-dd'),\n    isFullDay: true,\n    startTime: '00:00',\n    endTime: '23:59',\n    recurrence: 'none',\n    recurrenceEndDate: format(addMonths(new Date(), 12), 'yyyy-MM-dd'),\n    notes: '',\n    affectsAllServices: true,\n    affectedServices: []\n  });\n  const [services, setServices] = useState([]);\n  const [upcomingFilter, setUpcomingFilter] = useState(true);\n\n  // Context\n  const { fetchServices, businessLoading } = useBusiness();\n\n  // Initialize and load data\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n      try {\n        // Fetch services\n        const servicesData = await fetchServices();\n        setServices(servicesData);\n        \n        // Fetch holidays (this would be an API call in a real application)\n        // For demo purposes, we'll use mock data\n        const mockHolidays = [\n          {\n            _id: 'hol1',\n            name: 'Independence Day',\n            startDate: '2025-07-04',\n            endDate: '2025-07-04',\n            isFullDay: true,\n            startTime: null,\n            endTime: null,\n            recurrence: 'yearly',\n            recurrenceEndDate: '2030-12-31',\n            notes: 'Closed for Independence Day',\n            affectsAllServices: true,\n            affectedServices: []\n          },\n          {\n            _id: 'hol2',\n            name: 'Staff Training',\n            startDate: '2025-04-15',\n            endDate: '2025-04-15',\n            isFullDay: false,\n            startTime: '13:00',\n            endTime: '17:00',\n            recurrence: 'none',\n            recurrenceEndDate: null,\n            notes: 'Afternoon closure for staff training session',\n            affectsAllServices: true,\n            affectedServices: []\n          },\n          {\n            _id: 'hol3',\n            name: 'Christmas Break',\n            startDate: '2025-12-24',\n            endDate: '2025-12-26',\n            isFullDay: true,\n            startTime: null,\n            endTime: null,\n            recurrence: 'yearly',\n            recurrenceEndDate: '2030-12-31',\n            notes: 'Closed for Christmas holidays',\n            affectsAllServices: true,\n            affectedServices: []\n          },\n          {\n            _id: 'hol4',\n            name: 'System Maintenance',\n            startDate: '2025-03-20',\n            endDate: '2025-03-20',\n            isFullDay: false,\n            startTime: '18:00',\n            endTime: '20:00',\n            recurrence: 'none',\n            recurrenceEndDate: null,\n            notes: 'No online bookings during system maintenance',\n            affectsAllServices: false,\n            affectedServices: ['serv1', 'serv2']\n          }\n        ];\n        \n        setHolidays(mockHolidays);\n      } catch (error) {\n        console.error('Error loading holiday data:', error);\n        toast.error('Failed to load holiday data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [fetchServices]);\n\n  // Handle form input change\n  const handleFormChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    \n    setHolidayForm(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Handle service selection for affected services\n  const handleServiceSelection = (serviceId) => {\n    setHolidayForm(prev => {\n      const updatedServices = [...prev.affectedServices];\n      \n      if (updatedServices.includes(serviceId)) {\n        // Remove service if already selected\n        return {\n          ...prev,\n          affectedServices: updatedServices.filter(id => id !== serviceId)\n        };\n      } else {\n        // Add service if not selected\n        return {\n          ...prev,\n          affectedServices: [...updatedServices, serviceId]\n        };\n      }\n    });\n  };\n\n  // Open add holiday modal\n  const handleOpenAddModal = () => {\n    setHolidayForm({\n      name: '',\n      startDate: format(new Date(), 'yyyy-MM-dd'),\n      endDate: format(new Date(), 'yyyy-MM-dd'),\n      isFullDay: true,\n      startTime: '00:00',\n      endTime: '23:59',\n      recurrence: 'none',\n      recurrenceEndDate: format(addMonths(new Date(), 12), 'yyyy-MM-dd'),\n      notes: '',\n      affectsAllServices: true,\n      affectedServices: []\n    });\n    \n    setShowAddModal(true);\n  };\n\n  // Open edit holiday modal\n  const handleOpenEditModal = (holiday) => {\n    setSelectedHoliday(holiday);\n    \n    setHolidayForm({\n      name: holiday.name,\n      startDate: holiday.startDate,\n      endDate: holiday.endDate,\n      isFullDay: holiday.isFullDay,\n      startTime: holiday.startTime || '00:00',\n      endTime: holiday.endTime || '23:59',\n      recurrence: holiday.recurrence || 'none',\n      recurrenceEndDate: holiday.recurrenceEndDate || format(addMonths(new Date(), 12), 'yyyy-MM-dd'),\n      notes: holiday.notes || '',\n      affectsAllServices: holiday.affectsAllServices,\n      affectedServices: holiday.affectedServices || []\n    });\n    \n    setShowEditModal(true);\n  };\n\n  // Save a new holiday\n  const handleSaveHoliday = () => {\n    try {\n      // Validate form\n      if (!holidayForm.name.trim()) {\n        toast.error('Please enter a holiday name');\n        return;\n      }\n      \n      const startDate = parse(holidayForm.startDate, 'yyyy-MM-dd', new Date());\n      const endDate = parse(holidayForm.endDate, 'yyyy-MM-dd', new Date());\n      \n      if (isAfter(startDate, endDate)) {\n        toast.error('End date must be after start date');\n        return;\n      }\n      \n      // For non-full day holidays, validate times\n      if (!holidayForm.isFullDay) {\n        if (holidayForm.startTime >= holidayForm.endTime) {\n          toast.error('End time must be after start time');\n          return;\n        }\n      }\n      \n      // Check affected services if not affecting all\n      if (!holidayForm.affectsAllServices && holidayForm.affectedServices.length === 0) {\n        toast.error('Please select at least one service');\n        return;\n      }\n      \n      // This would be an API call in a real application\n      // For demo purposes, we'll update our local state\n      \n      const newHoliday = {\n        _id: `hol${Date.now()}`,\n        ...holidayForm\n      };\n      \n      setHolidays(prev => [...prev, newHoliday]);\n      \n      toast.success('Holiday added successfully');\n      setShowAddModal(false);\n      \n    } catch (error) {\n      console.error('Error saving holiday:', error);\n      toast.error('Failed to save holiday');\n    }\n  };\n\n  // Update an existing holiday\n  const handleUpdateHoliday = () => {\n    try {\n      // Validate form\n      if (!holidayForm.name.trim()) {\n        toast.error('Please enter a holiday name');\n        return;\n      }\n      \n      const startDate = parse(holidayForm.startDate, 'yyyy-MM-dd', new Date());\n      const endDate = parse(holidayForm.endDate, 'yyyy-MM-dd', new Date());\n      \n      if (isAfter(startDate, endDate)) {\n        toast.error('End date must be after start date');\n        return;\n      }\n      \n      // For non-full day holidays, validate times\n      if (!holidayForm.isFullDay) {\n        if (holidayForm.startTime >= holidayForm.endTime) {\n          toast.error('End time must be after start time');\n          return;\n        }\n      }\n      \n      // Check affected services if not affecting all\n      if (!holidayForm.affectsAllServices && holidayForm.affectedServices.length === 0) {\n        toast.error('Please select at least one service');\n        return;\n      }\n      \n      // This would be an API call in a real application\n      // For demo purposes, we'll update our local state\n      \n      const updatedHolidays = holidays.map(holiday => \n        holiday._id === selectedHoliday._id ? { ...holiday, ...holidayForm } : holiday\n      );\n      \n      setHolidays(updatedHolidays);\n      \n      toast.success('Holiday updated successfully');\n      setShowEditModal(false);\n      \n    } catch (error) {\n      console.error('Error updating holiday:', error);\n      toast.error('Failed to update holiday');\n    }\n  };\n\n  // Delete a holiday\n  const handleDeleteHoliday = () => {\n    try {\n      // This would be an API call in a real application\n      // For demo purposes, we'll update our local state\n      \n      const updatedHolidays = holidays.filter(holiday => \n        holiday._id !== selectedHoliday._id\n      );\n      \n      setHolidays(updatedHolidays);\n      \n      toast.success('Holiday deleted successfully');\n      setShowEditModal(false);\n      \n    } catch (error) {\n      console.error('Error deleting holiday:', error);\n      toast.error('Failed to delete holiday');\n    }\n  };\n\n  // Format date range for display\n  const formatDateRange = (startDate, endDate) => {\n    const start = parse(startDate, 'yyyy-MM-dd', new Date());\n    const end = parse(endDate, 'yyyy-MM-dd', new Date());\n    \n    if (isSameDay(start, end)) {\n      return format(start, 'MMMM d, yyyy');\n    }\n    \n    if (format(start, 'yyyy') === format(end, 'yyyy')) {\n      if (format(start, 'MMMM') === format(end, 'MMMM')) {\n        return `${format(start, 'MMMM d')} - ${format(end, 'd, yyyy')}`;\n      }\n      return `${format(start, 'MMMM d')} - ${format(end, 'MMMM d, yyyy')}`;\n    }\n    \n    return `${format(start, 'MMMM d, yyyy')} - ${format(end, 'MMMM d, yyyy')}`;\n  };\n\n  // Format time range for display\n  const formatTimeRange = (startTime, endTime) => {\n    if (!startTime || !endTime) return 'All Day';\n    \n    const formatTime = (timeString) => {\n      const [hours, minutes] = timeString.split(':');\n      const hour = parseInt(hours, 10);\n      const minute = parseInt(minutes, 10);\n      \n      const period = hour >= 12 ? 'PM' : 'AM';\n      const hour12 = hour % 12 || 12;\n      \n      return `${hour12}:${minutes.padStart(2, '0')} ${period}`;\n    };\n    \n    return `${formatTime(startTime)} - ${formatTime(endTime)}`;\n  };\n\n  // Get service names for display\n  const getServiceNames = (serviceIds) => {\n    if (!serviceIds || serviceIds.length === 0) return 'All Services';\n    \n    return serviceIds.map(id => {\n      const service = services.find(s => s._id === id);\n      return service ? service.name : 'Unknown Service';\n    }).join(', ');\n  };\n\n  // Filter holidays based on current view\n  const filteredHolidays = upcomingFilter \n    ? holidays.filter(holiday => {\n        const endDate = parse(holiday.endDate, 'yyyy-MM-dd', new Date());\n        return isAfter(endDate, new Date()) || isSameDay(endDate, new Date());\n      })\n    : holidays;\n\n  // Sort holidays by start date\n  const sortedHolidays = [...filteredHolidays].sort((a, b) => {\n    const dateA = parse(a.startDate, 'yyyy-MM-dd', new Date());\n    const dateB = parse(b.startDate, 'yyyy-MM-dd', new Date());\n    return dateA - dateB;\n  });\n\n  // Get recurrence text\n  const getRecurrenceText = (recurrence) => {\n    switch(recurrence) {\n      case 'daily':\n        return 'Daily';\n      case 'weekly':\n        return 'Weekly';\n      case 'monthly':\n        return 'Monthly';\n      case 'yearly':\n        return 'Yearly';\n      case 'none':\n      default:\n        return 'One-time';\n    }\n  };\n\n  // Get status of holiday (upcoming, active, past)\n  const getHolidayStatus = (holiday) => {\n    const today = new Date();\n    const startDate = parse(holiday.startDate, 'yyyy-MM-dd', new Date());\n    const endDate = parse(holiday.endDate, 'yyyy-MM-dd', new Date());\n    \n    if (isAfter(startDate, today)) {\n      // Upcoming\n      const daysUntil = differenceInDays(startDate, today);\n      return {\n        status: 'upcoming',\n        label: `In ${daysUntil} day${daysUntil !== 1 ? 's' : ''}`\n      };\n    } else if (isAfter(endDate, today) || isSameDay(endDate, today)) {\n      // Active\n      return {\n        status: 'active',\n        label: 'Active Now'\n      };\n    } else {\n      // Past\n      return {\n        status: 'past',\n        label: 'Past'\n      };\n    }\n  };\n\n  // Loading state\n  if (isLoading || businessLoading) {\n    return <LoadingSpinner text=\"Loading holidays...\" />;\n  }\n\n  return (\n    <div className=\"holiday-management-page\">\n      <PageHeader \n        title=\"Holidays & Closures\" \n        description=\"Manage your business holidays, closures, and special hours.\"\n        actionButton={\n          <Button \n            primary \n            onClick={handleOpenAddModal}\n            leftIcon=\"+\"\n          >\n            Add Holiday\n          </Button>\n        }\n      />\n      \n      <div className=\"view-controls\">\n        <div className=\"view-tabs\">\n          <button \n            className={`view-tab ${upcomingFilter ? 'active' : ''}`}\n            onClick={() => setUpcomingFilter(true)}\n          >\n            Upcoming & Active\n          </button>\n          <button \n            className={`view-tab ${!upcomingFilter ? 'active' : ''}`}\n            onClick={() => setUpcomingFilter(false)}\n          >\n            All Holidays\n          </button>\n        </div>\n      </div>\n      \n      {sortedHolidays.length === 0 ? (\n        <EmptyState\n          title={upcomingFilter ? \"No Upcoming Holidays\" : \"No Holidays Set\"}\n          description={upcomingFilter ? \"You don't have any upcoming holidays or closures scheduled.\" : \"You haven't set any holidays or closures yet.\"}\n          actionButton={\n            <Button primary onClick={handleOpenAddModal}>\n              Add Holiday\n            </Button>\n          }\n          icon=\"🏖️\"\n        />\n      ) : (\n        <div className=\"holidays-list\">\n          {sortedHolidays.map(holiday => {\n            const { status, label } = getHolidayStatus(holiday);\n            \n            return (\n              <div key={holiday._id} className={`holiday-card ${status}`}>\n                <div className=\"holiday-header\">\n                  <h3 className=\"holiday-name\">{holiday.name}</h3>\n                  <div className={`status-badge ${status}`}>\n                    {label}\n                  </div>\n                </div>\n                \n                <div className=\"holiday-dates\">\n                  <div className=\"date-range\">\n                    <span className=\"icon\">📅</span>\n                    {formatDateRange(holiday.startDate, holiday.endDate)}\n                  </div>\n                  \n                  {!holiday.isFullDay && (\n                    <div className=\"time-range\">\n                      <span className=\"icon\">⏰</span>\n                      {formatTimeRange(holiday.startTime, holiday.endTime)}\n                    </div>\n                  )}\n                </div>\n                \n                {holiday.recurrence !== 'none' && (\n                  <div className=\"recurrence-info\">\n                    <span className=\"icon\">🔄</span>\n                    {getRecurrenceText(holiday.recurrence)} \n                    {holiday.recurrenceEndDate && (\n                      <span> until {format(parse(holiday.recurrenceEndDate, 'yyyy-MM-dd', new Date()), 'MMMM d, yyyy')}</span>\n                    )}\n                  </div>\n                )}\n                \n                {!holiday.affectsAllServices && (\n                  <div className=\"affected-services\">\n                    <span className=\"icon\">🛠️</span>\n                    <span className=\"label\">Affects: </span>\n                    {getServiceNames(holiday.affectedServices)}\n                  </div>\n                )}\n                \n                {holiday.notes && (\n                  <div className=\"holiday-notes\">\n                    <span className=\"icon\">📝</span>\n                    {holiday.notes}\n                  </div>\n                )}\n                \n                <div className=\"holiday-actions\">\n                  <Button \n                    small \n                    secondary \n                    onClick={() => handleOpenEditModal(holiday)}\n                  >\n                    Edit\n                  </Button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n      \n      {/* Add Holiday Modal */}\n      <Modal\n        show={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        title=\"Add Holiday or Closure\"\n      >\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Holiday Name*</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={holidayForm.name}\n              onChange={handleFormChange}\n              placeholder=\"e.g., Christmas, Staff Training, etc.\"\n              required\n            />\n          </div>\n          \n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"startDate\">Start Date*</label>\n              <input\n                type=\"date\"\n                id=\"startDate\"\n                name=\"startDate\"\n                value={holidayForm.startDate}\n                onChange={handleFormChange}\n                required\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"endDate\">End Date*</label>\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                name=\"endDate\"\n                value={holidayForm.endDate}\n                onChange={handleFormChange}\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"form-group checkbox-group\">\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"isFullDay\"\n                checked={holidayForm.isFullDay}\n                onChange={handleFormChange}\n              />\n              Full day (closed all day)\n            </label>\n          </div>\n          \n          {!holidayForm.isFullDay && (\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"startTime\">Start Time</label>\n                <input\n                  type=\"time\"\n                  id=\"startTime\"\n                  name=\"startTime\"\n                  value={holidayForm.startTime}\n                  onChange={handleFormChange}\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"endTime\">End Time</label>\n                <input\n                  type=\"time\"\n                  id=\"endTime\"\n                  name=\"endTime\"\n                  value={holidayForm.endTime}\n                  onChange={handleFormChange}\n                />\n              </div>\n            </div>\n          )}\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"recurrence\">Recurrence</label>\n            <select\n              id=\"recurrence\"\n              name=\"recurrence\"\n              value={holidayForm.recurrence}\n              onChange={handleFormChange}\n            >\n              <option value=\"none\">One-time only</option>\n              <option value=\"daily\">Daily</option>\n              <option value=\"weekly\">Weekly</option>\n              <option value=\"monthly\">Monthly</option>\n              <option value=\"yearly\">Yearly</option>\n            </select>\n          </div>\n          \n          {holidayForm.recurrence !== 'none' && (\n            <div className=\"form-group\">\n              <label htmlFor=\"recurrenceEndDate\">Recurrence End Date</label>\n              <input\n                type=\"date\"\n                id=\"recurrenceEndDate\"\n                name=\"recurrenceEndDate\"\n                value={holidayForm.recurrenceEndDate}\n                onChange={handleFormChange}\n              />\n            </div>\n          )}\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"notes\">Notes</label>\n            <textarea\n              id=\"notes\"\n              name=\"notes\"\n              value={holidayForm.notes}\n              onChange={handleFormChange}\n              placeholder=\"Additional information about this holiday or closure\"\n              rows={3}\n            ></textarea>\n          </div>\n          \n          <div className=\"form-group checkbox-group\">\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"affectsAllServices\"\n                checked={holidayForm.affectsAllServices}\n                onChange={handleFormChange}\n              />\n              Affects all services\n            </label>\n          </div>\n          \n          {!holidayForm.affectsAllServices && (\n            <div className=\"form-group\">\n              <label>Select Affected Services</label>\n              <div className=\"services-selection\">\n                {services.map(service => (\n                  <div key={service._id} className=\"service-checkbox\">\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={holidayForm.affectedServices.includes(service._id)}\n                        onChange={() => handleServiceSelection(service._id)}\n                      />\n                      {service.name}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          <div className=\"modal-actions\">\n            <Button type=\"button\" secondary onClick={() => setShowAddModal(false)}>\n              Cancel\n            </Button>\n            <Button type=\"button\" primary onClick={handleSaveHoliday}>\n              Save Holiday\n            </Button>\n          </div>\n        </form>\n      </Modal>\n      \n      {/* Edit Holiday Modal */}\n      <Modal\n        show={showEditModal}\n        onClose={() => setShowEditModal(false)}\n        title=\"Edit Holiday or Closure\"\n      >\n        {selectedHoliday && (\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"edit-name\">Holiday Name*</label>\n              <input\n                type=\"text\"\n                id=\"edit-name\"\n                name=\"name\"\n                value={holidayForm.name}\n                onChange={handleFormChange}\n                required\n              />\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"edit-startDate\">Start Date*</label>\n                <input\n                  type=\"date\"\n                  id=\"edit-startDate\"\n                  name=\"startDate\"\n                  value={holidayForm.startDate}\n                  onChange={handleFormChange}\n                  required\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"edit-endDate\">End Date*</label>\n                <input\n                  type=\"date\"\n                  id=\"edit-endDate\"\n                  name=\"endDate\"\n                  value={holidayForm.endDate}\n                  onChange={handleFormChange}\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-group checkbox-group\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"isFullDay\"\n                  checked={holidayForm.isFullDay}\n                  onChange={handleFormChange}\n                />\n                Full day (closed all day)\n              </label>\n            </div>\n            \n            {!holidayForm.isFullDay && (\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"edit-startTime\">Start Time</label>\n                  <input\n                    type=\"time\"\n                    id=\"edit-startTime\"\n                    name=\"startTime\"\n                    value={holidayForm.startTime}\n                    onChange={handleFormChange}\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"edit-endTime\">End Time</label>\n                  <input\n                    type=\"time\"\n                    id=\"edit-endTime\"\n                    name=\"endTime\"\n                    value={holidayForm.endTime}\n                    onChange={handleFormChange}\n                  />\n                </div>\n              </div>\n            )}\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"edit-recurrence\">Recurrence</label>\n              <select\n                id=\"edit-recurrence\"\n                name=\"recurrence\"\n                value={holidayForm.recurrence}\n                onChange={handleFormChange}\n              >\n                <option value=\"none\">One-time only</option>\n                <option value=\"daily\">Daily</option>\n                <option value=\"weekly\">Weekly</option>\n                <option value=\"monthly\">Monthly</option>\n                <option value=\"yearly\">Yearly</option>\n              </select>\n            </div>\n            \n            {holidayForm.recurrence !== 'none' && (\n              <div className=\"form-group\">\n                <label htmlFor=\"edit-recurrenceEndDate\">Recurrence End Date</label>\n                <input\n                  type=\"date\"\n                  id=\"edit-recurrenceEndDate\"\n                  name=\"recurrenceEndDate\"\n                  value={holidayForm.recurrenceEndDate}\n                  onChange={handleFormChange}\n                />\n              </div>\n            )}\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"edit-notes\">Notes</label>\n              <textarea\n                id=\"edit-notes\"\n                name=\"notes\"\n                value={holidayForm.notes}\n                onChange={handleFormChange}\n                placeholder=\"Additional information about this holiday or closure\"\n                rows={3}\n              ></textarea>\n            </div>\n            \n            <div className=\"form-group checkbox-group\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"affectsAllServices\"\n                  checked={holidayForm.affectsAllServices}\n                  onChange={handleFormChange}\n                />\n                Affects all services\n              </label>\n            </div>\n            \n            {!holidayForm.affectsAllServices && (\n              <div className=\"form-group\">\n                <label>Select Affected Services</label>\n                <div className=\"services-selection\">\n                  {services.map(service => (\n                    <div key={service._id} className=\"service-checkbox\">\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          checked={holidayForm.affectedServices.includes(service._id)}\n                          onChange={() => handleServiceSelection(service._id)}\n                        />\n                        {service.name}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"modal-actions\">\n              <Button type=\"button\" danger onClick={handleDeleteHoliday}>\n                Delete\n              </Button>\n              <Button type=\"button\" secondary onClick={() => setShowEditModal(false)}>\n                Cancel\n              </Button>\n              <Button type=\"button\" primary onClick={handleUpdateHoliday}>\n                Update Holiday\n              </Button>\n            </div>\n          </form>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default HolidayManagement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}