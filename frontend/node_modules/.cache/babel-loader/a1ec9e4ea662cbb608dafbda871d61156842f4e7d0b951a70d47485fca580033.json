{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Set token in request headers\nconst setAuthToken = token => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n};\n\n// Remove token from request headers\nconst removeAuthToken = () => {\n  delete api.defaults.headers.common['Authorization'];\n};\n\n// Interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  // Handle specific error codes\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n\n    // Handle 401 Unauthorized\n    if (status === 401) {\n      // If token is expired or invalid, and not a demo token, remove it\n      const token = localStorage.getItem('token');\n      if (token && !token.startsWith('mock-bypass-token-')) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n    }\n\n    // Log detailed error information\n    console.error('API Error:', {\n      status,\n      message: data.error || 'An error occurred',\n      url: error.config.url,\n      method: error.config.method\n    });\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('Network Error:', error.request);\n  } else {\n    // Something happened in setting up the request\n    console.error('Request Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API service with methods for common operations\nexport default {\n  // Set auth token\n  setAuthToken,\n  removeAuthToken,\n  // Auth endpoints\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  verifyEmail: token => api.post('/auth/verify-email', {\n    token\n  }),\n  forgotPassword: email => api.post('/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, newPassword) => api.post('/auth/reset-password', {\n    token,\n    newPassword\n  }),\n  // User endpoints\n  getUser: () => api.get('/users/me'),\n  updateProfile: userData => api.put('/users/profile', userData),\n  // Venue endpoints\n  getVenues: params => {\n    // In development mode, return mock venues if requested\n    if (process.env.NODE_ENV === 'development') {\n      return Promise.resolve({\n        data: {\n          venues: [{\n            id: '1',\n            name: 'Community Hall',\n            category: 'hall',\n            description: 'Large community hall ideal for events, conferences, and gatherings up to 200 people.',\n            address: {\n              street: '123 Main St',\n              city: 'Townsville',\n              state: 'TS',\n              zipCode: '12345',\n              country: 'USA'\n            },\n            maxCapacity: 200,\n            amenities: ['WiFi', 'AV Equipment', 'Kitchen', 'Parking', 'Accessible Entrance'],\n            accessibilityFeatures: ['Wheelchair Access', 'Hearing Loop', 'Accessible Restrooms'],\n            layouts: [{\n              id: '101',\n              name: 'Theater',\n              capacity: 200\n            }, {\n              id: '102',\n              name: 'Banquet',\n              capacity: 150\n            }, {\n              id: '103',\n              name: 'Classroom',\n              capacity: 100\n            }],\n            pricing: {\n              standard: {\n                amount: 150,\n                unit: 'hour'\n              },\n              commercial: {\n                amount: 200,\n                unit: 'hour'\n              },\n              community: {\n                amount: 100,\n                unit: 'hour'\n              }\n            },\n            isPaused: false,\n            images: [{\n              url: 'https://example.com/venue1_1.jpg',\n              isPrimary: true\n            }, {\n              url: 'https://example.com/venue1_2.jpg'\n            }],\n            ratings: {\n              average: 4.8,\n              count: 25\n            },\n            bookings: {\n              total: 42,\n              upcoming: 3\n            }\n          }, {\n            id: '2',\n            name: 'Conference Room A',\n            category: 'meeting',\n            description: 'Modern conference room with high-speed internet and video conferencing capabilities.',\n            address: {\n              street: '456 Business Ave',\n              city: 'Metropolis',\n              state: 'MP',\n              zipCode: '67890',\n              country: 'USA'\n            },\n            maxCapacity: 30,\n            amenities: ['WiFi', 'Video Conferencing', 'Whiteboard', 'Coffee Service'],\n            accessibilityFeatures: ['Wheelchair Access', 'Accessible Restrooms'],\n            layouts: [{\n              id: '201',\n              name: 'Boardroom',\n              capacity: 20\n            }, {\n              id: '202',\n              name: 'U-Shape',\n              capacity: 16\n            }],\n            pricing: {\n              standard: {\n                amount: 75,\n                unit: 'hour'\n              },\n              commercial: {\n                amount: 100,\n                unit: 'hour'\n              },\n              community: {\n                amount: 50,\n                unit: 'hour'\n              }\n            },\n            isPaused: false,\n            images: [{\n              url: 'https://example.com/venue2_1.jpg',\n              isPrimary: true\n            }],\n            ratings: {\n              average: 4.6,\n              count: 18\n            },\n            bookings: {\n              total: 35,\n              upcoming: 2\n            }\n          }, {\n            id: '3',\n            name: 'Banquet Hall',\n            category: 'banquet',\n            description: 'Elegant banquet hall perfect for weddings, parties, and formal events.',\n            address: {\n              street: '789 Celebration Blvd',\n              city: 'Festivity',\n              state: 'FT',\n              zipCode: '45678',\n              country: 'USA'\n            },\n            maxCapacity: 150,\n            amenities: ['Dance Floor', 'Sound System', 'Kitchen', 'Bar Area', 'Coat Check'],\n            accessibilityFeatures: ['Wheelchair Access', 'Accessible Parking', 'Accessible Restrooms'],\n            layouts: [{\n              id: '301',\n              name: 'Banquet',\n              capacity: 150\n            }, {\n              id: '302',\n              name: 'Reception',\n              capacity: 200\n            }],\n            pricing: {\n              standard: {\n                amount: 2000,\n                unit: 'day'\n              },\n              commercial: {\n                amount: 2500,\n                unit: 'day'\n              },\n              community: {\n                amount: 1500,\n                unit: 'day'\n              }\n            },\n            isPaused: true,\n            images: [{\n              url: 'https://example.com/venue3_1.jpg',\n              isPrimary: true\n            }, {\n              url: 'https://example.com/venue3_2.jpg'\n            }],\n            ratings: {\n              average: 4.7,\n              count: 15\n            },\n            bookings: {\n              total: 120,\n              upcoming: 0\n            }\n          }]\n        }\n      });\n    }\n\n    // Otherwise, make the actual API call\n    return api.get('/venues', {\n      params\n    });\n  },\n  getVenue: id => api.get(`/venues/${id}`),\n  createVenue: venueData => api.post('/venues', venueData),\n  updateVenue: (id, venueData) => api.put(`/venues/${id}`, venueData),\n  deleteVenue: id => api.delete(`/venues/${id}`),\n  // Venue layouts\n  getVenueLayouts: venueId => api.get(`/venues/${venueId}/layouts`),\n  getVenueLayout: (venueId, layoutId) => api.get(`/venues/${venueId}/layouts/${layoutId}`),\n  createVenueLayout: (venueId, layoutData) => api.post(`/venues/${venueId}/layouts`, layoutData),\n  updateVenueLayout: (venueId, layoutId, layoutData) => api.put(`/venues/${venueId}/layouts/${layoutId}`, layoutData),\n  deleteVenueLayout: (venueId, layoutId) => api.delete(`/venues/${venueId}/layouts/${layoutId}`),\n  // Venue equipment\n  getVenueEquipment: venueId => api.get(`/venues/${venueId}/equipment`),\n  getVenueEquipmentItem: (venueId, equipmentId) => api.get(`/venues/${venueId}/equipment/${equipmentId}`),\n  createVenueEquipment: (venueId, equipmentData) => api.post(`/venues/${venueId}/equipment`, equipmentData),\n  updateVenueEquipment: (venueId, equipmentId, equipmentData) => api.put(`/venues/${venueId}/equipment/${equipmentId}`, equipmentData),\n  deleteVenueEquipment: (venueId, equipmentId) => api.delete(`/venues/${venueId}/equipment/${equipmentId}`),\n  // Venue bonds\n  getVenueBonds: venueId => api.get(`/venues/${venueId}/bonds`),\n  getVenueBond: (venueId, bondId) => api.get(`/venues/${venueId}/bonds/${bondId}`),\n  createVenueBond: (venueId, bondData) => api.post(`/venues/${venueId}/bonds`, bondData),\n  updateVenueBond: (venueId, bondId, bondData) => api.put(`/venues/${venueId}/bonds/${bondId}`, bondData),\n  deleteVenueBond: (venueId, bondId) => api.delete(`/venues/${venueId}/bonds/${bondId}`),\n  // Venue availability\n  getVenueAvailability: (venueId, params) => api.get(`/venues/${venueId}/availability`, {\n    params\n  }),\n  createVenueAvailability: (venueId, availabilityData) => api.post(`/venues/${venueId}/availability`, availabilityData),\n  updateVenueAvailability: (venueId, availabilityId, availabilityData) => api.put(`/venues/${venueId}/availability/${availabilityId}`, availabilityData),\n  deleteVenueAvailability: (venueId, availabilityId) => api.delete(`/venues/${venueId}/availability/${availabilityId}`),\n  // Venue images\n  getVenueImages: venueId => api.get(`/venues/${venueId}/images`),\n  uploadVenueImage: (venueId, imageData) => {\n    const formData = new FormData();\n    formData.append('image', imageData.file);\n    if (imageData.description) formData.append('description', imageData.description);\n    if (imageData.isPrimary !== undefined) formData.append('is_primary', imageData.isPrimary);\n    return api.post(`/venues/${venueId}/images`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  updateVenueImage: (venueId, imageId, imageData) => api.put(`/venues/${venueId}/images/${imageId}`, imageData),\n  deleteVenueImage: (venueId, imageId) => api.delete(`/venues/${venueId}/images/${imageId}`),\n  setPrimaryVenueImage: (venueId, imageId) => api.put(`/venues/${venueId}/images/${imageId}/set-primary`),\n  // Booking endpoints\n  getBookings: params => {\n    // In development mode, return mock bookings from localStorage\n    if (process.env.NODE_ENV === 'development') {\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n\n      // Filter bookings based on params if they exist\n      if (params) {\n        if (params.status) {\n          const statusArray = Array.isArray(params.status) ? params.status : [params.status];\n          bookings = bookings.filter(booking => statusArray.includes(booking.status));\n        }\n        if (params.startDate) {\n          const startDate = new Date(params.startDate);\n          bookings = bookings.filter(booking => new Date(booking.startTime) >= startDate);\n        }\n        if (params.endDate) {\n          const endDate = new Date(params.endDate);\n          bookings = bookings.filter(booking => new Date(booking.startTime) <= endDate);\n        }\n      }\n      return Promise.resolve({\n        data: {\n          bookings: bookings\n        }\n      });\n    }\n\n    // Otherwise, make the actual API call\n    return api.get('/bookings', {\n      params\n    });\n  },\n  getBooking: id => {\n    // In development mode, return mock booking from localStorage\n    if (process.env.NODE_ENV === 'development') {\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n      const booking = bookings.find(b => b._id === id);\n      if (booking) {\n        return Promise.resolve({\n          data: {\n            booking: booking\n          }\n        });\n      }\n\n      // If booking not found in localStorage and it's the mock data, return that\n      if (id === 'service1' || id === 'service2') {\n        // This is a fallback for mock services\n        return Promise.resolve({\n          data: {\n            booking: {\n              _id: id,\n              title: id === 'service1' ? 'Basic Dog Grooming' : 'Deluxe Dog Grooming',\n              status: 'confirmed',\n              startTime: new Date().toISOString(),\n              endTime: new Date(new Date().getTime() + 60 * 60 * 1000).toISOString()\n            }\n          }\n        });\n      }\n\n      // Return a 404 error\n      return Promise.reject({\n        response: {\n          status: 404,\n          data: {\n            error: 'Booking not found'\n          }\n        }\n      });\n    }\n\n    // Otherwise, make the actual API call\n    return api.get(`/bookings/${id}`);\n  },\n  createBooking: bookingData => {\n    // In development mode, update mock data and modify local state\n    if (process.env.NODE_ENV === 'development') {\n      const mockBookingId = 'booking-' + Math.random().toString(36).substring(2, 9);\n\n      // Create a mock booking that will be visible in the UI\n      const mockBooking = {\n        _id: mockBookingId,\n        ...bookingData,\n        status: 'confirmed',\n        createdAt: new Date().toISOString()\n      };\n\n      // If localStorage has bookings, update it\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n      bookings.push(mockBooking);\n      localStorage.setItem('mockBookings', JSON.stringify(bookings));\n      return Promise.resolve({\n        data: {\n          booking: mockBooking\n        }\n      });\n    }\n\n    // Otherwise, make the actual API call\n    return api.post('/bookings', bookingData);\n  },\n  updateBooking: (id, bookingData) => api.put(`/bookings/${id}`, bookingData),\n  cancelBooking: (id, reason) => api.put(`/bookings/${id}/cancel`, {\n    reason\n  }),\n  completeBooking: id => api.put(`/bookings/${id}/complete`),\n  // Payment endpoints\n  createPaymentIntent: bookingId => api.post('/payments/create-intent', {\n    bookingId\n  }),\n  // Reviews\n  createReview: (bookingId, reviewData) => api.post(`/bookings/${bookingId}/review`, reviewData),\n  // Customer endpoints\n  createOrUpdateCustomer: customerData => {\n    // In development mode, return mock customer data\n    if (process.env.NODE_ENV === 'development') {\n      return Promise.resolve({\n        data: {\n          customer: {\n            _id: 'mock-customer-id',\n            name: customerData.name,\n            email: customerData.email,\n            phone: customerData.phone\n          }\n        }\n      });\n    }\n\n    // Otherwise, make the actual API call\n    return api.post('/customers', customerData);\n  },\n  // Direct axios methods for custom requests\n  get: (url, config) => api.get(url, config),\n  post: (url, data, config) => api.post(url, data, config),\n  put: (url, data, config) => api.put(url, data, config),\n  delete: (url, config) => api.delete(url, config)\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","setAuthToken","token","defaults","common","removeAuthToken","interceptors","response","use","error","status","data","localStorage","getItem","startsWith","removeItem","window","location","href","console","message","url","config","method","request","Promise","reject","register","userData","post","login","credentials","verifyEmail","forgotPassword","email","resetPassword","newPassword","getUser","get","updateProfile","put","getVenues","params","NODE_ENV","resolve","venues","id","name","category","description","address","street","city","state","zipCode","country","maxCapacity","amenities","accessibilityFeatures","layouts","capacity","pricing","standard","amount","unit","commercial","community","isPaused","images","isPrimary","ratings","average","count","bookings","total","upcoming","getVenue","createVenue","venueData","updateVenue","deleteVenue","delete","getVenueLayouts","venueId","getVenueLayout","layoutId","createVenueLayout","layoutData","updateVenueLayout","deleteVenueLayout","getVenueEquipment","getVenueEquipmentItem","equipmentId","createVenueEquipment","equipmentData","updateVenueEquipment","deleteVenueEquipment","getVenueBonds","getVenueBond","bondId","createVenueBond","bondData","updateVenueBond","deleteVenueBond","getVenueAvailability","createVenueAvailability","availabilityData","updateVenueAvailability","availabilityId","deleteVenueAvailability","getVenueImages","uploadVenueImage","imageData","formData","FormData","append","file","undefined","updateVenueImage","imageId","deleteVenueImage","setPrimaryVenueImage","getBookings","storedBookings","JSON","parse","statusArray","Array","isArray","filter","booking","includes","startDate","Date","startTime","endDate","getBooking","find","b","_id","title","toISOString","endTime","getTime","createBooking","bookingData","mockBookingId","Math","random","toString","substring","mockBooking","createdAt","push","setItem","stringify","updateBooking","cancelBooking","reason","completeBooking","createPaymentIntent","bookingId","createReview","reviewData","createOrUpdateCustomer","customerData","customer","phone"],"sources":["/home/toebot/dog-services-saas/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Set token in request headers\nconst setAuthToken = (token) => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n};\n\n// Remove token from request headers\nconst removeAuthToken = () => {\n  delete api.defaults.headers.common['Authorization'];\n};\n\n// Interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle specific error codes\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      // Handle 401 Unauthorized\n      if (status === 401) {\n        // If token is expired or invalid, and not a demo token, remove it\n        const token = localStorage.getItem('token');\n        if (token && !token.startsWith('mock-bypass-token-')) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n      }\n      \n      // Log detailed error information\n      console.error('API Error:', {\n        status,\n        message: data.error || 'An error occurred',\n        url: error.config.url,\n        method: error.config.method,\n      });\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.error('Network Error:', error.request);\n    } else {\n      // Something happened in setting up the request\n      console.error('Request Error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API service with methods for common operations\nexport default {\n  // Set auth token\n  setAuthToken,\n  removeAuthToken,\n  \n  // Auth endpoints\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  verifyEmail: (token) => api.post('/auth/verify-email', { token }),\n  forgotPassword: (email) => api.post('/auth/forgot-password', { email }),\n  resetPassword: (token, newPassword) => \n    api.post('/auth/reset-password', { token, newPassword }),\n  \n  // User endpoints\n  getUser: () => api.get('/users/me'),\n  updateProfile: (userData) => api.put('/users/profile', userData),\n  \n  // Venue endpoints\n  getVenues: (params) => {\n    // In development mode, return mock venues if requested\n    if (process.env.NODE_ENV === 'development') {\n      return Promise.resolve({\n        data: {\n          venues: [\n            {\n              id: '1',\n              name: 'Community Hall',\n              category: 'hall',\n              description: 'Large community hall ideal for events, conferences, and gatherings up to 200 people.',\n              address: {\n                street: '123 Main St',\n                city: 'Townsville',\n                state: 'TS',\n                zipCode: '12345',\n                country: 'USA'\n              },\n              maxCapacity: 200,\n              amenities: ['WiFi', 'AV Equipment', 'Kitchen', 'Parking', 'Accessible Entrance'],\n              accessibilityFeatures: ['Wheelchair Access', 'Hearing Loop', 'Accessible Restrooms'],\n              layouts: [\n                { id: '101', name: 'Theater', capacity: 200 },\n                { id: '102', name: 'Banquet', capacity: 150 },\n                { id: '103', name: 'Classroom', capacity: 100 }\n              ],\n              pricing: {\n                standard: { amount: 150, unit: 'hour' },\n                commercial: { amount: 200, unit: 'hour' },\n                community: { amount: 100, unit: 'hour' }\n              },\n              isPaused: false,\n              images: [\n                { url: 'https://example.com/venue1_1.jpg', isPrimary: true },\n                { url: 'https://example.com/venue1_2.jpg' }\n              ],\n              ratings: {\n                average: 4.8,\n                count: 25\n              },\n              bookings: {\n                total: 42,\n                upcoming: 3\n              }\n            },\n            {\n              id: '2',\n              name: 'Conference Room A',\n              category: 'meeting',\n              description: 'Modern conference room with high-speed internet and video conferencing capabilities.',\n              address: {\n                street: '456 Business Ave',\n                city: 'Metropolis',\n                state: 'MP',\n                zipCode: '67890',\n                country: 'USA'\n              },\n              maxCapacity: 30,\n              amenities: ['WiFi', 'Video Conferencing', 'Whiteboard', 'Coffee Service'],\n              accessibilityFeatures: ['Wheelchair Access', 'Accessible Restrooms'],\n              layouts: [\n                { id: '201', name: 'Boardroom', capacity: 20 },\n                { id: '202', name: 'U-Shape', capacity: 16 }\n              ],\n              pricing: {\n                standard: { amount: 75, unit: 'hour' },\n                commercial: { amount: 100, unit: 'hour' },\n                community: { amount: 50, unit: 'hour' }\n              },\n              isPaused: false,\n              images: [\n                { url: 'https://example.com/venue2_1.jpg', isPrimary: true }\n              ],\n              ratings: {\n                average: 4.6,\n                count: 18\n              },\n              bookings: {\n                total: 35,\n                upcoming: 2\n              }\n            },\n            {\n              id: '3',\n              name: 'Banquet Hall',\n              category: 'banquet',\n              description: 'Elegant banquet hall perfect for weddings, parties, and formal events.',\n              address: {\n                street: '789 Celebration Blvd',\n                city: 'Festivity',\n                state: 'FT',\n                zipCode: '45678',\n                country: 'USA'\n              },\n              maxCapacity: 150,\n              amenities: ['Dance Floor', 'Sound System', 'Kitchen', 'Bar Area', 'Coat Check'],\n              accessibilityFeatures: ['Wheelchair Access', 'Accessible Parking', 'Accessible Restrooms'],\n              layouts: [\n                { id: '301', name: 'Banquet', capacity: 150 },\n                { id: '302', name: 'Reception', capacity: 200 }\n              ],\n              pricing: {\n                standard: { amount: 2000, unit: 'day' },\n                commercial: { amount: 2500, unit: 'day' },\n                community: { amount: 1500, unit: 'day' }\n              },\n              isPaused: true,\n              images: [\n                { url: 'https://example.com/venue3_1.jpg', isPrimary: true },\n                { url: 'https://example.com/venue3_2.jpg' }\n              ],\n              ratings: {\n                average: 4.7,\n                count: 15\n              },\n              bookings: {\n                total: 120,\n                upcoming: 0\n              }\n            }\n          ]\n        }\n      });\n    }\n    \n    // Otherwise, make the actual API call\n    return api.get('/venues', { params });\n  },\n  getVenue: (id) => api.get(`/venues/${id}`),\n  createVenue: (venueData) => api.post('/venues', venueData),\n  updateVenue: (id, venueData) => api.put(`/venues/${id}`, venueData),\n  deleteVenue: (id) => api.delete(`/venues/${id}`),\n  \n  // Venue layouts\n  getVenueLayouts: (venueId) => api.get(`/venues/${venueId}/layouts`),\n  getVenueLayout: (venueId, layoutId) => api.get(`/venues/${venueId}/layouts/${layoutId}`),\n  createVenueLayout: (venueId, layoutData) => api.post(`/venues/${venueId}/layouts`, layoutData),\n  updateVenueLayout: (venueId, layoutId, layoutData) => api.put(`/venues/${venueId}/layouts/${layoutId}`, layoutData),\n  deleteVenueLayout: (venueId, layoutId) => api.delete(`/venues/${venueId}/layouts/${layoutId}`),\n  \n  // Venue equipment\n  getVenueEquipment: (venueId) => api.get(`/venues/${venueId}/equipment`),\n  getVenueEquipmentItem: (venueId, equipmentId) => api.get(`/venues/${venueId}/equipment/${equipmentId}`),\n  createVenueEquipment: (venueId, equipmentData) => api.post(`/venues/${venueId}/equipment`, equipmentData),\n  updateVenueEquipment: (venueId, equipmentId, equipmentData) => api.put(`/venues/${venueId}/equipment/${equipmentId}`, equipmentData),\n  deleteVenueEquipment: (venueId, equipmentId) => api.delete(`/venues/${venueId}/equipment/${equipmentId}`),\n  \n  // Venue bonds\n  getVenueBonds: (venueId) => api.get(`/venues/${venueId}/bonds`),\n  getVenueBond: (venueId, bondId) => api.get(`/venues/${venueId}/bonds/${bondId}`),\n  createVenueBond: (venueId, bondData) => api.post(`/venues/${venueId}/bonds`, bondData),\n  updateVenueBond: (venueId, bondId, bondData) => api.put(`/venues/${venueId}/bonds/${bondId}`, bondData),\n  deleteVenueBond: (venueId, bondId) => api.delete(`/venues/${venueId}/bonds/${bondId}`),\n  \n  // Venue availability\n  getVenueAvailability: (venueId, params) => api.get(`/venues/${venueId}/availability`, { params }),\n  createVenueAvailability: (venueId, availabilityData) => api.post(`/venues/${venueId}/availability`, availabilityData),\n  updateVenueAvailability: (venueId, availabilityId, availabilityData) => api.put(`/venues/${venueId}/availability/${availabilityId}`, availabilityData),\n  deleteVenueAvailability: (venueId, availabilityId) => api.delete(`/venues/${venueId}/availability/${availabilityId}`),\n  \n  // Venue images\n  getVenueImages: (venueId) => api.get(`/venues/${venueId}/images`),\n  uploadVenueImage: (venueId, imageData) => {\n    const formData = new FormData();\n    formData.append('image', imageData.file);\n    if (imageData.description) formData.append('description', imageData.description);\n    if (imageData.isPrimary !== undefined) formData.append('is_primary', imageData.isPrimary);\n    \n    return api.post(`/venues/${venueId}/images`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  },\n  updateVenueImage: (venueId, imageId, imageData) => api.put(`/venues/${venueId}/images/${imageId}`, imageData),\n  deleteVenueImage: (venueId, imageId) => api.delete(`/venues/${venueId}/images/${imageId}`),\n  setPrimaryVenueImage: (venueId, imageId) => api.put(`/venues/${venueId}/images/${imageId}/set-primary`),\n  \n  // Booking endpoints\n  getBookings: (params) => {\n    // In development mode, return mock bookings from localStorage\n    if (process.env.NODE_ENV === 'development') {\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n      \n      // Filter bookings based on params if they exist\n      if (params) {\n        if (params.status) {\n          const statusArray = Array.isArray(params.status) ? params.status : [params.status];\n          bookings = bookings.filter(booking => statusArray.includes(booking.status));\n        }\n        \n        if (params.startDate) {\n          const startDate = new Date(params.startDate);\n          bookings = bookings.filter(booking => new Date(booking.startTime) >= startDate);\n        }\n        \n        if (params.endDate) {\n          const endDate = new Date(params.endDate);\n          bookings = bookings.filter(booking => new Date(booking.startTime) <= endDate);\n        }\n      }\n      \n      return Promise.resolve({\n        data: {\n          bookings: bookings\n        }\n      });\n    }\n    \n    // Otherwise, make the actual API call\n    return api.get('/bookings', { params });\n  },\n  getBooking: (id) => {\n    // In development mode, return mock booking from localStorage\n    if (process.env.NODE_ENV === 'development') {\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n      const booking = bookings.find(b => b._id === id);\n      \n      if (booking) {\n        return Promise.resolve({\n          data: {\n            booking: booking\n          }\n        });\n      }\n      \n      // If booking not found in localStorage and it's the mock data, return that\n      if (id === 'service1' || id === 'service2') {\n        // This is a fallback for mock services\n        return Promise.resolve({\n          data: {\n            booking: {\n              _id: id,\n              title: id === 'service1' ? 'Basic Dog Grooming' : 'Deluxe Dog Grooming',\n              status: 'confirmed',\n              startTime: new Date().toISOString(),\n              endTime: new Date(new Date().getTime() + 60 * 60 * 1000).toISOString()\n            }\n          }\n        });\n      }\n      \n      // Return a 404 error\n      return Promise.reject({\n        response: {\n          status: 404,\n          data: { error: 'Booking not found' }\n        }\n      });\n    }\n    \n    // Otherwise, make the actual API call\n    return api.get(`/bookings/${id}`);\n  },\n  createBooking: (bookingData) => {\n    // In development mode, update mock data and modify local state\n    if (process.env.NODE_ENV === 'development') {\n      const mockBookingId = 'booking-' + Math.random().toString(36).substring(2, 9);\n      \n      // Create a mock booking that will be visible in the UI\n      const mockBooking = {\n        _id: mockBookingId,\n        ...bookingData,\n        status: 'confirmed',\n        createdAt: new Date().toISOString()\n      };\n      \n      // If localStorage has bookings, update it\n      const storedBookings = localStorage.getItem('mockBookings');\n      let bookings = storedBookings ? JSON.parse(storedBookings) : [];\n      bookings.push(mockBooking);\n      localStorage.setItem('mockBookings', JSON.stringify(bookings));\n      \n      return Promise.resolve({\n        data: {\n          booking: mockBooking\n        }\n      });\n    }\n    \n    // Otherwise, make the actual API call\n    return api.post('/bookings', bookingData);\n  },\n  updateBooking: (id, bookingData) => api.put(`/bookings/${id}`, bookingData),\n  cancelBooking: (id, reason) => \n    api.put(`/bookings/${id}/cancel`, { reason }),\n  completeBooking: (id) => api.put(`/bookings/${id}/complete`),\n  \n  // Payment endpoints\n  createPaymentIntent: (bookingId) => \n    api.post('/payments/create-intent', { bookingId }),\n  \n  // Reviews\n  createReview: (bookingId, reviewData) => \n    api.post(`/bookings/${bookingId}/review`, reviewData),\n    \n  // Customer endpoints\n  createOrUpdateCustomer: (customerData) => {\n    // In development mode, return mock customer data\n    if (process.env.NODE_ENV === 'development') {\n      return Promise.resolve({\n        data: {\n          customer: {\n            _id: 'mock-customer-id',\n            name: customerData.name,\n            email: customerData.email,\n            phone: customerData.phone\n          }\n        }\n      });\n    }\n    \n    // Otherwise, make the actual API call\n    return api.post('/customers', customerData);\n  },\n  \n  // Direct axios methods for custom requests\n  get: (url, config) => api.get(url, config),\n  post: (url, data, config) => api.post(url, data, config),\n  put: (url, data, config) => api.put(url, data, config),\n  delete: (url, config) => api.delete(url, config),\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAIA,KAAK,EAAE;IACTR,GAAG,CAACS,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUF,KAAK,EAAE;EAClE;AACF,CAAC;;AAED;AACA,MAAMG,eAAe,GAAGA,CAAA,KAAM;EAC5B,OAAOX,GAAG,CAACS,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC;AACrD,CAAC;;AAED;AACAV,GAAG,CAACY,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAClB,MAAM;MAAEG,MAAM;MAAEC;IAAK,CAAC,GAAGF,KAAK,CAACF,QAAQ;;IAEvC;IACA,IAAIG,MAAM,KAAK,GAAG,EAAE;MAClB;MACA,MAAMR,KAAK,GAAGU,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIX,KAAK,IAAI,CAACA,KAAK,CAACY,UAAU,CAAC,oBAAoB,CAAC,EAAE;QACpDF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;QAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;IACF;;IAEA;IACAC,OAAO,CAACV,KAAK,CAAC,YAAY,EAAE;MAC1BC,MAAM;MACNU,OAAO,EAAET,IAAI,CAACF,KAAK,IAAI,mBAAmB;MAC1CY,GAAG,EAAEZ,KAAK,CAACa,MAAM,CAACD,GAAG;MACrBE,MAAM,EAAEd,KAAK,CAACa,MAAM,CAACC;IACvB,CAAC,CAAC;EACJ,CAAC,MAAM,IAAId,KAAK,CAACe,OAAO,EAAE;IACxB;IACAL,OAAO,CAACV,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACe,OAAO,CAAC;EAChD,CAAC,MAAM;IACL;IACAL,OAAO,CAACV,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAACW,OAAO,CAAC;EAChD;EAEA,OAAOK,OAAO,CAACC,MAAM,CAACjB,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,eAAe;EACb;EACAR,YAAY;EACZI,eAAe;EAEf;EACAsB,QAAQ,EAAGC,QAAQ,IAAKlC,GAAG,CAACmC,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;EAC5DE,KAAK,EAAGC,WAAW,IAAKrC,GAAG,CAACmC,IAAI,CAAC,aAAa,EAAEE,WAAW,CAAC;EAC5DC,WAAW,EAAG9B,KAAK,IAAKR,GAAG,CAACmC,IAAI,CAAC,oBAAoB,EAAE;IAAE3B;EAAM,CAAC,CAAC;EACjE+B,cAAc,EAAGC,KAAK,IAAKxC,GAAG,CAACmC,IAAI,CAAC,uBAAuB,EAAE;IAAEK;EAAM,CAAC,CAAC;EACvEC,aAAa,EAAEA,CAACjC,KAAK,EAAEkC,WAAW,KAChC1C,GAAG,CAACmC,IAAI,CAAC,sBAAsB,EAAE;IAAE3B,KAAK;IAAEkC;EAAY,CAAC,CAAC;EAE1D;EACAC,OAAO,EAAEA,CAAA,KAAM3C,GAAG,CAAC4C,GAAG,CAAC,WAAW,CAAC;EACnCC,aAAa,EAAGX,QAAQ,IAAKlC,GAAG,CAAC8C,GAAG,CAAC,gBAAgB,EAAEZ,QAAQ,CAAC;EAEhE;EACAa,SAAS,EAAGC,MAAM,IAAK;IACrB;IACA,IAAI7C,OAAO,CAACC,GAAG,CAAC6C,QAAQ,KAAK,aAAa,EAAE;MAC1C,OAAOlB,OAAO,CAACmB,OAAO,CAAC;QACrBjC,IAAI,EAAE;UACJkC,MAAM,EAAE,CACN;YACEC,EAAE,EAAE,GAAG;YACPC,IAAI,EAAE,gBAAgB;YACtBC,QAAQ,EAAE,MAAM;YAChBC,WAAW,EAAE,sFAAsF;YACnGC,OAAO,EAAE;cACPC,MAAM,EAAE,aAAa;cACrBC,IAAI,EAAE,YAAY;cAClBC,KAAK,EAAE,IAAI;cACXC,OAAO,EAAE,OAAO;cAChBC,OAAO,EAAE;YACX,CAAC;YACDC,WAAW,EAAE,GAAG;YAChBC,SAAS,EAAE,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,EAAE,SAAS,EAAE,qBAAqB,CAAC;YAChFC,qBAAqB,EAAE,CAAC,mBAAmB,EAAE,cAAc,EAAE,sBAAsB,CAAC;YACpFC,OAAO,EAAE,CACP;cAAEb,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,SAAS;cAAEa,QAAQ,EAAE;YAAI,CAAC,EAC7C;cAAEd,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,SAAS;cAAEa,QAAQ,EAAE;YAAI,CAAC,EAC7C;cAAEd,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,WAAW;cAAEa,QAAQ,EAAE;YAAI,CAAC,CAChD;YACDC,OAAO,EAAE;cACPC,QAAQ,EAAE;gBAAEC,MAAM,EAAE,GAAG;gBAAEC,IAAI,EAAE;cAAO,CAAC;cACvCC,UAAU,EAAE;gBAAEF,MAAM,EAAE,GAAG;gBAAEC,IAAI,EAAE;cAAO,CAAC;cACzCE,SAAS,EAAE;gBAAEH,MAAM,EAAE,GAAG;gBAAEC,IAAI,EAAE;cAAO;YACzC,CAAC;YACDG,QAAQ,EAAE,KAAK;YACfC,MAAM,EAAE,CACN;cAAE/C,GAAG,EAAE,kCAAkC;cAAEgD,SAAS,EAAE;YAAK,CAAC,EAC5D;cAAEhD,GAAG,EAAE;YAAmC,CAAC,CAC5C;YACDiD,OAAO,EAAE;cACPC,OAAO,EAAE,GAAG;cACZC,KAAK,EAAE;YACT,CAAC;YACDC,QAAQ,EAAE;cACRC,KAAK,EAAE,EAAE;cACTC,QAAQ,EAAE;YACZ;UACF,CAAC,EACD;YACE7B,EAAE,EAAE,GAAG;YACPC,IAAI,EAAE,mBAAmB;YACzBC,QAAQ,EAAE,SAAS;YACnBC,WAAW,EAAE,sFAAsF;YACnGC,OAAO,EAAE;cACPC,MAAM,EAAE,kBAAkB;cAC1BC,IAAI,EAAE,YAAY;cAClBC,KAAK,EAAE,IAAI;cACXC,OAAO,EAAE,OAAO;cAChBC,OAAO,EAAE;YACX,CAAC;YACDC,WAAW,EAAE,EAAE;YACfC,SAAS,EAAE,CAAC,MAAM,EAAE,oBAAoB,EAAE,YAAY,EAAE,gBAAgB,CAAC;YACzEC,qBAAqB,EAAE,CAAC,mBAAmB,EAAE,sBAAsB,CAAC;YACpEC,OAAO,EAAE,CACP;cAAEb,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,WAAW;cAAEa,QAAQ,EAAE;YAAG,CAAC,EAC9C;cAAEd,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,SAAS;cAAEa,QAAQ,EAAE;YAAG,CAAC,CAC7C;YACDC,OAAO,EAAE;cACPC,QAAQ,EAAE;gBAAEC,MAAM,EAAE,EAAE;gBAAEC,IAAI,EAAE;cAAO,CAAC;cACtCC,UAAU,EAAE;gBAAEF,MAAM,EAAE,GAAG;gBAAEC,IAAI,EAAE;cAAO,CAAC;cACzCE,SAAS,EAAE;gBAAEH,MAAM,EAAE,EAAE;gBAAEC,IAAI,EAAE;cAAO;YACxC,CAAC;YACDG,QAAQ,EAAE,KAAK;YACfC,MAAM,EAAE,CACN;cAAE/C,GAAG,EAAE,kCAAkC;cAAEgD,SAAS,EAAE;YAAK,CAAC,CAC7D;YACDC,OAAO,EAAE;cACPC,OAAO,EAAE,GAAG;cACZC,KAAK,EAAE;YACT,CAAC;YACDC,QAAQ,EAAE;cACRC,KAAK,EAAE,EAAE;cACTC,QAAQ,EAAE;YACZ;UACF,CAAC,EACD;YACE7B,EAAE,EAAE,GAAG;YACPC,IAAI,EAAE,cAAc;YACpBC,QAAQ,EAAE,SAAS;YACnBC,WAAW,EAAE,wEAAwE;YACrFC,OAAO,EAAE;cACPC,MAAM,EAAE,sBAAsB;cAC9BC,IAAI,EAAE,WAAW;cACjBC,KAAK,EAAE,IAAI;cACXC,OAAO,EAAE,OAAO;cAChBC,OAAO,EAAE;YACX,CAAC;YACDC,WAAW,EAAE,GAAG;YAChBC,SAAS,EAAE,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,CAAC;YAC/EC,qBAAqB,EAAE,CAAC,mBAAmB,EAAE,oBAAoB,EAAE,sBAAsB,CAAC;YAC1FC,OAAO,EAAE,CACP;cAAEb,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,SAAS;cAAEa,QAAQ,EAAE;YAAI,CAAC,EAC7C;cAAEd,EAAE,EAAE,KAAK;cAAEC,IAAI,EAAE,WAAW;cAAEa,QAAQ,EAAE;YAAI,CAAC,CAChD;YACDC,OAAO,EAAE;cACPC,QAAQ,EAAE;gBAAEC,MAAM,EAAE,IAAI;gBAAEC,IAAI,EAAE;cAAM,CAAC;cACvCC,UAAU,EAAE;gBAAEF,MAAM,EAAE,IAAI;gBAAEC,IAAI,EAAE;cAAM,CAAC;cACzCE,SAAS,EAAE;gBAAEH,MAAM,EAAE,IAAI;gBAAEC,IAAI,EAAE;cAAM;YACzC,CAAC;YACDG,QAAQ,EAAE,IAAI;YACdC,MAAM,EAAE,CACN;cAAE/C,GAAG,EAAE,kCAAkC;cAAEgD,SAAS,EAAE;YAAK,CAAC,EAC5D;cAAEhD,GAAG,EAAE;YAAmC,CAAC,CAC5C;YACDiD,OAAO,EAAE;cACPC,OAAO,EAAE,GAAG;cACZC,KAAK,EAAE;YACT,CAAC;YACDC,QAAQ,EAAE;cACRC,KAAK,EAAE,GAAG;cACVC,QAAQ,EAAE;YACZ;UACF,CAAC;QAEL;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAOjF,GAAG,CAAC4C,GAAG,CAAC,SAAS,EAAE;MAAEI;IAAO,CAAC,CAAC;EACvC,CAAC;EACDkC,QAAQ,EAAG9B,EAAE,IAAKpD,GAAG,CAAC4C,GAAG,CAAC,WAAWQ,EAAE,EAAE,CAAC;EAC1C+B,WAAW,EAAGC,SAAS,IAAKpF,GAAG,CAACmC,IAAI,CAAC,SAAS,EAAEiD,SAAS,CAAC;EAC1DC,WAAW,EAAEA,CAACjC,EAAE,EAAEgC,SAAS,KAAKpF,GAAG,CAAC8C,GAAG,CAAC,WAAWM,EAAE,EAAE,EAAEgC,SAAS,CAAC;EACnEE,WAAW,EAAGlC,EAAE,IAAKpD,GAAG,CAACuF,MAAM,CAAC,WAAWnC,EAAE,EAAE,CAAC;EAEhD;EACAoC,eAAe,EAAGC,OAAO,IAAKzF,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,UAAU,CAAC;EACnEC,cAAc,EAAEA,CAACD,OAAO,EAAEE,QAAQ,KAAK3F,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,YAAYE,QAAQ,EAAE,CAAC;EACxFC,iBAAiB,EAAEA,CAACH,OAAO,EAAEI,UAAU,KAAK7F,GAAG,CAACmC,IAAI,CAAC,WAAWsD,OAAO,UAAU,EAAEI,UAAU,CAAC;EAC9FC,iBAAiB,EAAEA,CAACL,OAAO,EAAEE,QAAQ,EAAEE,UAAU,KAAK7F,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,YAAYE,QAAQ,EAAE,EAAEE,UAAU,CAAC;EACnHE,iBAAiB,EAAEA,CAACN,OAAO,EAAEE,QAAQ,KAAK3F,GAAG,CAACuF,MAAM,CAAC,WAAWE,OAAO,YAAYE,QAAQ,EAAE,CAAC;EAE9F;EACAK,iBAAiB,EAAGP,OAAO,IAAKzF,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,YAAY,CAAC;EACvEQ,qBAAqB,EAAEA,CAACR,OAAO,EAAES,WAAW,KAAKlG,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,cAAcS,WAAW,EAAE,CAAC;EACvGC,oBAAoB,EAAEA,CAACV,OAAO,EAAEW,aAAa,KAAKpG,GAAG,CAACmC,IAAI,CAAC,WAAWsD,OAAO,YAAY,EAAEW,aAAa,CAAC;EACzGC,oBAAoB,EAAEA,CAACZ,OAAO,EAAES,WAAW,EAAEE,aAAa,KAAKpG,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,cAAcS,WAAW,EAAE,EAAEE,aAAa,CAAC;EACpIE,oBAAoB,EAAEA,CAACb,OAAO,EAAES,WAAW,KAAKlG,GAAG,CAACuF,MAAM,CAAC,WAAWE,OAAO,cAAcS,WAAW,EAAE,CAAC;EAEzG;EACAK,aAAa,EAAGd,OAAO,IAAKzF,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,QAAQ,CAAC;EAC/De,YAAY,EAAEA,CAACf,OAAO,EAAEgB,MAAM,KAAKzG,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,UAAUgB,MAAM,EAAE,CAAC;EAChFC,eAAe,EAAEA,CAACjB,OAAO,EAAEkB,QAAQ,KAAK3G,GAAG,CAACmC,IAAI,CAAC,WAAWsD,OAAO,QAAQ,EAAEkB,QAAQ,CAAC;EACtFC,eAAe,EAAEA,CAACnB,OAAO,EAAEgB,MAAM,EAAEE,QAAQ,KAAK3G,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,UAAUgB,MAAM,EAAE,EAAEE,QAAQ,CAAC;EACvGE,eAAe,EAAEA,CAACpB,OAAO,EAAEgB,MAAM,KAAKzG,GAAG,CAACuF,MAAM,CAAC,WAAWE,OAAO,UAAUgB,MAAM,EAAE,CAAC;EAEtF;EACAK,oBAAoB,EAAEA,CAACrB,OAAO,EAAEzC,MAAM,KAAKhD,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,eAAe,EAAE;IAAEzC;EAAO,CAAC,CAAC;EACjG+D,uBAAuB,EAAEA,CAACtB,OAAO,EAAEuB,gBAAgB,KAAKhH,GAAG,CAACmC,IAAI,CAAC,WAAWsD,OAAO,eAAe,EAAEuB,gBAAgB,CAAC;EACrHC,uBAAuB,EAAEA,CAACxB,OAAO,EAAEyB,cAAc,EAAEF,gBAAgB,KAAKhH,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,iBAAiByB,cAAc,EAAE,EAAEF,gBAAgB,CAAC;EACtJG,uBAAuB,EAAEA,CAAC1B,OAAO,EAAEyB,cAAc,KAAKlH,GAAG,CAACuF,MAAM,CAAC,WAAWE,OAAO,iBAAiByB,cAAc,EAAE,CAAC;EAErH;EACAE,cAAc,EAAG3B,OAAO,IAAKzF,GAAG,CAAC4C,GAAG,CAAC,WAAW6C,OAAO,SAAS,CAAC;EACjE4B,gBAAgB,EAAEA,CAAC5B,OAAO,EAAE6B,SAAS,KAAK;IACxC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAACI,IAAI,CAAC;IACxC,IAAIJ,SAAS,CAAC/D,WAAW,EAAEgE,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,SAAS,CAAC/D,WAAW,CAAC;IAChF,IAAI+D,SAAS,CAAC3C,SAAS,KAAKgD,SAAS,EAAEJ,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEH,SAAS,CAAC3C,SAAS,CAAC;IAEzF,OAAO3E,GAAG,CAACmC,IAAI,CAAC,WAAWsD,OAAO,SAAS,EAAE8B,QAAQ,EAAE;MACrDjH,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC;EACDsH,gBAAgB,EAAEA,CAACnC,OAAO,EAAEoC,OAAO,EAAEP,SAAS,KAAKtH,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,WAAWoC,OAAO,EAAE,EAAEP,SAAS,CAAC;EAC7GQ,gBAAgB,EAAEA,CAACrC,OAAO,EAAEoC,OAAO,KAAK7H,GAAG,CAACuF,MAAM,CAAC,WAAWE,OAAO,WAAWoC,OAAO,EAAE,CAAC;EAC1FE,oBAAoB,EAAEA,CAACtC,OAAO,EAAEoC,OAAO,KAAK7H,GAAG,CAAC8C,GAAG,CAAC,WAAW2C,OAAO,WAAWoC,OAAO,cAAc,CAAC;EAEvG;EACAG,WAAW,EAAGhF,MAAM,IAAK;IACvB;IACA,IAAI7C,OAAO,CAACC,GAAG,CAAC6C,QAAQ,KAAK,aAAa,EAAE;MAC1C,MAAMgF,cAAc,GAAG/G,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC3D,IAAI4D,QAAQ,GAAGkD,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACF,cAAc,CAAC,GAAG,EAAE;;MAE/D;MACA,IAAIjF,MAAM,EAAE;QACV,IAAIA,MAAM,CAAChC,MAAM,EAAE;UACjB,MAAMoH,WAAW,GAAGC,KAAK,CAACC,OAAO,CAACtF,MAAM,CAAChC,MAAM,CAAC,GAAGgC,MAAM,CAAChC,MAAM,GAAG,CAACgC,MAAM,CAAChC,MAAM,CAAC;UAClF+D,QAAQ,GAAGA,QAAQ,CAACwD,MAAM,CAACC,OAAO,IAAIJ,WAAW,CAACK,QAAQ,CAACD,OAAO,CAACxH,MAAM,CAAC,CAAC;QAC7E;QAEA,IAAIgC,MAAM,CAAC0F,SAAS,EAAE;UACpB,MAAMA,SAAS,GAAG,IAAIC,IAAI,CAAC3F,MAAM,CAAC0F,SAAS,CAAC;UAC5C3D,QAAQ,GAAGA,QAAQ,CAACwD,MAAM,CAACC,OAAO,IAAI,IAAIG,IAAI,CAACH,OAAO,CAACI,SAAS,CAAC,IAAIF,SAAS,CAAC;QACjF;QAEA,IAAI1F,MAAM,CAAC6F,OAAO,EAAE;UAClB,MAAMA,OAAO,GAAG,IAAIF,IAAI,CAAC3F,MAAM,CAAC6F,OAAO,CAAC;UACxC9D,QAAQ,GAAGA,QAAQ,CAACwD,MAAM,CAACC,OAAO,IAAI,IAAIG,IAAI,CAACH,OAAO,CAACI,SAAS,CAAC,IAAIC,OAAO,CAAC;QAC/E;MACF;MAEA,OAAO9G,OAAO,CAACmB,OAAO,CAAC;QACrBjC,IAAI,EAAE;UACJ8D,QAAQ,EAAEA;QACZ;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO/E,GAAG,CAAC4C,GAAG,CAAC,WAAW,EAAE;MAAEI;IAAO,CAAC,CAAC;EACzC,CAAC;EACD8F,UAAU,EAAG1F,EAAE,IAAK;IAClB;IACA,IAAIjD,OAAO,CAACC,GAAG,CAAC6C,QAAQ,KAAK,aAAa,EAAE;MAC1C,MAAMgF,cAAc,GAAG/G,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC3D,IAAI4D,QAAQ,GAAGkD,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACF,cAAc,CAAC,GAAG,EAAE;MAC/D,MAAMO,OAAO,GAAGzD,QAAQ,CAACgE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAK7F,EAAE,CAAC;MAEhD,IAAIoF,OAAO,EAAE;QACX,OAAOzG,OAAO,CAACmB,OAAO,CAAC;UACrBjC,IAAI,EAAE;YACJuH,OAAO,EAAEA;UACX;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAIpF,EAAE,KAAK,UAAU,IAAIA,EAAE,KAAK,UAAU,EAAE;QAC1C;QACA,OAAOrB,OAAO,CAACmB,OAAO,CAAC;UACrBjC,IAAI,EAAE;YACJuH,OAAO,EAAE;cACPS,GAAG,EAAE7F,EAAE;cACP8F,KAAK,EAAE9F,EAAE,KAAK,UAAU,GAAG,oBAAoB,GAAG,qBAAqB;cACvEpC,MAAM,EAAE,WAAW;cACnB4H,SAAS,EAAE,IAAID,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC,CAAC;cACnCC,OAAO,EAAE,IAAIT,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACU,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACF,WAAW,CAAC;YACvE;UACF;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,OAAOpH,OAAO,CAACC,MAAM,CAAC;QACpBnB,QAAQ,EAAE;UACRG,MAAM,EAAE,GAAG;UACXC,IAAI,EAAE;YAAEF,KAAK,EAAE;UAAoB;QACrC;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAOf,GAAG,CAAC4C,GAAG,CAAC,aAAaQ,EAAE,EAAE,CAAC;EACnC,CAAC;EACDkG,aAAa,EAAGC,WAAW,IAAK;IAC9B;IACA,IAAIpJ,OAAO,CAACC,GAAG,CAAC6C,QAAQ,KAAK,aAAa,EAAE;MAC1C,MAAMuG,aAAa,GAAG,UAAU,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;MAE7E;MACA,MAAMC,WAAW,GAAG;QAClBZ,GAAG,EAAEO,aAAa;QAClB,GAAGD,WAAW;QACdvI,MAAM,EAAE,WAAW;QACnB8I,SAAS,EAAE,IAAInB,IAAI,CAAC,CAAC,CAACQ,WAAW,CAAC;MACpC,CAAC;;MAED;MACA,MAAMlB,cAAc,GAAG/G,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MAC3D,IAAI4D,QAAQ,GAAGkD,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACF,cAAc,CAAC,GAAG,EAAE;MAC/DlD,QAAQ,CAACgF,IAAI,CAACF,WAAW,CAAC;MAC1B3I,YAAY,CAAC8I,OAAO,CAAC,cAAc,EAAE9B,IAAI,CAAC+B,SAAS,CAAClF,QAAQ,CAAC,CAAC;MAE9D,OAAOhD,OAAO,CAACmB,OAAO,CAAC;QACrBjC,IAAI,EAAE;UACJuH,OAAO,EAAEqB;QACX;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO7J,GAAG,CAACmC,IAAI,CAAC,WAAW,EAAEoH,WAAW,CAAC;EAC3C,CAAC;EACDW,aAAa,EAAEA,CAAC9G,EAAE,EAAEmG,WAAW,KAAKvJ,GAAG,CAAC8C,GAAG,CAAC,aAAaM,EAAE,EAAE,EAAEmG,WAAW,CAAC;EAC3EY,aAAa,EAAEA,CAAC/G,EAAE,EAAEgH,MAAM,KACxBpK,GAAG,CAAC8C,GAAG,CAAC,aAAaM,EAAE,SAAS,EAAE;IAAEgH;EAAO,CAAC,CAAC;EAC/CC,eAAe,EAAGjH,EAAE,IAAKpD,GAAG,CAAC8C,GAAG,CAAC,aAAaM,EAAE,WAAW,CAAC;EAE5D;EACAkH,mBAAmB,EAAGC,SAAS,IAC7BvK,GAAG,CAACmC,IAAI,CAAC,yBAAyB,EAAE;IAAEoI;EAAU,CAAC,CAAC;EAEpD;EACAC,YAAY,EAAEA,CAACD,SAAS,EAAEE,UAAU,KAClCzK,GAAG,CAACmC,IAAI,CAAC,aAAaoI,SAAS,SAAS,EAAEE,UAAU,CAAC;EAEvD;EACAC,sBAAsB,EAAGC,YAAY,IAAK;IACxC;IACA,IAAIxK,OAAO,CAACC,GAAG,CAAC6C,QAAQ,KAAK,aAAa,EAAE;MAC1C,OAAOlB,OAAO,CAACmB,OAAO,CAAC;QACrBjC,IAAI,EAAE;UACJ2J,QAAQ,EAAE;YACR3B,GAAG,EAAE,kBAAkB;YACvB5F,IAAI,EAAEsH,YAAY,CAACtH,IAAI;YACvBb,KAAK,EAAEmI,YAAY,CAACnI,KAAK;YACzBqI,KAAK,EAAEF,YAAY,CAACE;UACtB;QACF;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO7K,GAAG,CAACmC,IAAI,CAAC,YAAY,EAAEwI,YAAY,CAAC;EAC7C,CAAC;EAED;EACA/H,GAAG,EAAEA,CAACjB,GAAG,EAAEC,MAAM,KAAK5B,GAAG,CAAC4C,GAAG,CAACjB,GAAG,EAAEC,MAAM,CAAC;EAC1CO,IAAI,EAAEA,CAACR,GAAG,EAAEV,IAAI,EAAEW,MAAM,KAAK5B,GAAG,CAACmC,IAAI,CAACR,GAAG,EAAEV,IAAI,EAAEW,MAAM,CAAC;EACxDkB,GAAG,EAAEA,CAACnB,GAAG,EAAEV,IAAI,EAAEW,MAAM,KAAK5B,GAAG,CAAC8C,GAAG,CAACnB,GAAG,EAAEV,IAAI,EAAEW,MAAM,CAAC;EACtD2D,MAAM,EAAEA,CAAC5D,GAAG,EAAEC,MAAM,KAAK5B,GAAG,CAACuF,MAAM,CAAC5D,GAAG,EAAEC,MAAM;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}