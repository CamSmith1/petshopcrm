{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppointmentForm = () => {\n  _s();\n  const {\n    appointmentId\n  } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: ''\n  });\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n\n        // Fetch customers (using mock data for now)\n        const customersData = [{\n          _id: 'cust1',\n          name: 'John Smith',\n          email: 'john@example.com'\n        }, {\n          _id: 'cust2',\n          name: 'Mary Johnson',\n          email: 'mary@example.com'\n        }, {\n          _id: 'cust3',\n          name: 'David Williams',\n          email: 'david@example.com'\n        }, {\n          _id: 'cust4',\n          name: 'Sarah Miller',\n          email: 'sarah@example.com'\n        }];\n        setCustomers(customersData);\n\n        // Pets data removed\n\n        // If editing, fetch appointment data\n        if (isEditing) {\n          var _appointment$client, _appointment$service, _appointment$client2, _appointment$subject, _appointment$notes;\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n\n          // Set customer\n          if ((_appointment$client = appointment.client) !== null && _appointment$client !== void 0 && _appointment$client._id) {\n            setSelectedCustomer(appointment.client._id);\n          }\n\n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n\n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          setFormData({\n            serviceId: ((_appointment$service = appointment.service) === null || _appointment$service === void 0 ? void 0 : _appointment$service._id) || '',\n            customerId: ((_appointment$client2 = appointment.client) === null || _appointment$client2 === void 0 ? void 0 : _appointment$client2._id) || '',\n            petId: ((_appointment$subject = appointment.subject) === null || _appointment$subject === void 0 ? void 0 : _appointment$subject._id) || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: ((_appointment$notes = appointment.notes) === null || _appointment$notes === void 0 ? void 0 : _appointment$notes.client) || ''\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFormData();\n  }, [appointmentId, isEditing]);\n\n  // Update customer pets when customer changes\n  useEffect(() => {\n    if (selectedCustomer) {\n      setCustomerPets(pets.filter(pet => pet.customerId === selectedCustomer));\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        petId: '' // Reset pet selection when customer changes\n      }));\n    }\n  }, [selectedCustomer, pets]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n\n    // If customer is changed, update selected customer\n    if (name === 'customerId') {\n      setSelectedCustomer(value);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n      const appointmentData = {\n        service: formData.serviceId,\n        client: formData.customerId,\n        subject: formData.petId,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes\n        },\n        status: 'pending'\n      };\n\n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n\n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error saving appointment:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: isEditing ? 'Edit Appointment' : 'New Appointment',\n      backLink: \"/appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Service Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"serviceId\",\n                children: \"Service\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"serviceId\",\n                name: \"serviceId\",\n                className: \"form-control\",\n                value: formData.serviceId,\n                onChange: handleInputChange,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a service\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 19\n                }, this), services.map(service => {\n                  var _service$price;\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: service._id,\n                    children: [service.title, \" ($\", ((_service$price = service.price) === null || _service$price === void 0 ? void 0 : _service$price.amount) || 0, \")\"]\n                  }, service._id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 21\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Customer & Pet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"customerId\",\n                children: \"Customer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"customerId\",\n                name: \"customerId\",\n                className: \"form-control\",\n                value: formData.customerId,\n                onChange: handleInputChange,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 19\n                }, this), customers.map(customer => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: customer._id,\n                  children: [customer.name, \" (\", customer.email, \")\"]\n                }, customer._id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"petId\",\n                children: \"Pet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"petId\",\n                name: \"petId\",\n                className: \"form-control\",\n                value: formData.petId,\n                onChange: handleInputChange,\n                required: true,\n                disabled: !formData.customerId,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a pet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this), customerPets.map(pet => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: pet._id,\n                  children: [pet.name, \" (\", pet.breed, \")\"]\n                }, pet._id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Appointment Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group col-md-6\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"date\",\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"date\",\n                  id: \"date\",\n                  name: \"date\",\n                  className: \"form-control\",\n                  value: formData.date,\n                  onChange: handleInputChange,\n                  required: true,\n                  min: new Date().toISOString().split('T')[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group col-md-6\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"time\",\n                  children: \"Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"time\",\n                  id: \"time\",\n                  name: \"time\",\n                  className: \"form-control\",\n                  value: formData.time,\n                  onChange: handleInputChange,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"duration\",\n                children: \"Duration (minutes)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                id: \"duration\",\n                name: \"duration\",\n                className: \"form-control\",\n                value: formData.duration,\n                onChange: handleInputChange,\n                min: \"15\",\n                max: \"240\",\n                step: \"15\",\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Additional Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"notes\",\n                children: \"Notes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"notes\",\n                name: \"notes\",\n                className: \"form-control\",\n                value: formData.notes,\n                onChange: handleInputChange,\n                rows: \"3\",\n                placeholder: \"Add any special instructions or notes for this appointment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-outline-secondary\",\n              onClick: () => navigate('/appointments'),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: isEditing ? 'Update Appointment' : 'Create Appointment'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(AppointmentForm, \"78Or1EXTKfhlQmzRziXyERgvvzc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = AppointmentForm;\nexport default AppointmentForm;\nvar _c;\n$RefreshReg$(_c, \"AppointmentForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","toast","PageHeader","LoadingSpinner","api","jsxDEV","_jsxDEV","AppointmentForm","_s","appointmentId","navigate","isEditing","loading","setLoading","services","setServices","customers","setCustomers","selectedCustomer","setSelectedCustomer","formData","setFormData","serviceId","customerId","date","time","duration","notes","fetchFormData","servicesResponse","getServices","data","customersData","_id","name","email","_appointment$client","_appointment$service","_appointment$client2","_appointment$subject","_appointment$notes","appointmentResponse","getBooking","appointment","booking","client","appointmentDate","Date","startTime","formattedDate","toISOString","split","formattedTime","toTimeString","slice","endTime","durationMinutes","Math","round","service","petId","subject","error","console","setCustomerPets","pets","filter","pet","prev","handleInputChange","e","value","target","handleSubmit","preventDefault","getTime","appointmentData","status","updateBooking","success","createBooking","_error$response","_error$response$data","response","fileName","_jsxFileName","lineNumber","columnNumber","className","children","title","backLink","onSubmit","htmlFor","id","onChange","required","map","_service$price","price","amount","customer","disabled","customerPets","breed","type","min","max","step","rows","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/AppointmentForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport PageHeader from '../components/common/PageHeader';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport api from '../services/api';\n\nconst AppointmentForm = () => {\n  const { appointmentId } = useParams();\n  const navigate = useNavigate();\n  const isEditing = appointmentId && appointmentId !== 'new';\n  \n  const [loading, setLoading] = useState(isEditing);\n  const [services, setServices] = useState([]);\n  const [customers, setCustomers] = useState([]);\n  const [selectedCustomer, setSelectedCustomer] = useState('');\n  \n  const [formData, setFormData] = useState({\n    serviceId: '',\n    customerId: '',\n    date: '',\n    time: '',\n    duration: 60,\n    notes: '',\n  });\n\n  useEffect(() => {\n    // Fetch services, customers and pets data\n    const fetchFormData = async () => {\n      try {\n        // Fetch services\n        const servicesResponse = await api.getServices();\n        setServices(servicesResponse.data.services || []);\n        \n        // Fetch customers (using mock data for now)\n        const customersData = [\n          { _id: 'cust1', name: 'John Smith', email: 'john@example.com' },\n          { _id: 'cust2', name: 'Mary Johnson', email: 'mary@example.com' },\n          { _id: 'cust3', name: 'David Williams', email: 'david@example.com' },\n          { _id: 'cust4', name: 'Sarah Miller', email: 'sarah@example.com' },\n        ];\n        setCustomers(customersData);\n        \n        // Pets data removed\n        \n        // If editing, fetch appointment data\n        if (isEditing) {\n          const appointmentResponse = await api.getBooking(appointmentId);\n          const appointment = appointmentResponse.data.booking;\n          \n          // Set customer\n          if (appointment.client?._id) {\n            setSelectedCustomer(appointment.client._id);\n          }\n          \n          // Format the date and time\n          const appointmentDate = new Date(appointment.startTime);\n          const formattedDate = appointmentDate.toISOString().split('T')[0];\n          const formattedTime = appointmentDate.toTimeString().slice(0, 5);\n          \n          // Calculate duration in minutes\n          const endTime = new Date(appointment.endTime);\n          const durationMinutes = Math.round((endTime - appointmentDate) / 60000);\n          \n          setFormData({\n            serviceId: appointment.service?._id || '',\n            customerId: appointment.client?._id || '',\n            petId: appointment.subject?._id || '',\n            date: formattedDate,\n            time: formattedTime,\n            duration: durationMinutes,\n            notes: appointment.notes?.client || '',\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching form data:', error);\n        toast.error('Failed to load appointment data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchFormData();\n  }, [appointmentId, isEditing]);\n  \n  // Update customer pets when customer changes\n  useEffect(() => {\n    if (selectedCustomer) {\n      setCustomerPets(pets.filter(pet => pet.customerId === selectedCustomer));\n      setFormData(prev => ({\n        ...prev,\n        customerId: selectedCustomer,\n        petId: '', // Reset pet selection when customer changes\n      }));\n    }\n  }, [selectedCustomer, pets]);\n  \n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    \n    // If customer is changed, update selected customer\n    if (name === 'customerId') {\n      setSelectedCustomer(value);\n    }\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      // Format date and time for API\n      const startTime = new Date(`${formData.date}T${formData.time}`);\n      const endTime = new Date(startTime.getTime() + formData.duration * 60000);\n      \n      const appointmentData = {\n        service: formData.serviceId,\n        client: formData.customerId,\n        subject: formData.petId,\n        startTime: startTime.toISOString(),\n        endTime: endTime.toISOString(),\n        notes: {\n          client: formData.notes,\n        },\n        status: 'pending',\n      };\n      \n      // Create or update appointment\n      if (isEditing) {\n        await api.updateBooking(appointmentId, appointmentData);\n        toast.success('Appointment updated successfully');\n      } else {\n        await api.createBooking(appointmentData);\n        toast.success('Appointment created successfully');\n      }\n      \n      // Navigate back to appointments list\n      navigate('/appointments');\n    } catch (error) {\n      console.error('Error saving appointment:', error);\n      toast.error(error.response?.data?.error || 'Failed to save appointment');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  if (loading) {\n    return <LoadingSpinner />;\n  }\n  \n  return (\n    <div className=\"page-container\">\n      <PageHeader \n        title={isEditing ? 'Edit Appointment' : 'New Appointment'} \n        backLink=\"/appointments\"\n      />\n      \n      <div className=\"card\">\n        <div className=\"card-body\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-section\">\n              <h3>Service Details</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"serviceId\">Service</label>\n                <select \n                  id=\"serviceId\" \n                  name=\"serviceId\" \n                  className=\"form-control\"\n                  value={formData.serviceId}\n                  onChange={handleInputChange}\n                  required\n                >\n                  <option value=\"\">Select a service</option>\n                  {services.map(service => (\n                    <option key={service._id} value={service._id}>\n                      {service.title} (${service.price?.amount || 0})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Customer & Pet</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"customerId\">Customer</label>\n                <select \n                  id=\"customerId\" \n                  name=\"customerId\" \n                  className=\"form-control\"\n                  value={formData.customerId}\n                  onChange={handleInputChange}\n                  required\n                >\n                  <option value=\"\">Select a customer</option>\n                  {customers.map(customer => (\n                    <option key={customer._id} value={customer._id}>\n                      {customer.name} ({customer.email})\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"petId\">Pet</label>\n                <select \n                  id=\"petId\" \n                  name=\"petId\" \n                  className=\"form-control\"\n                  value={formData.petId}\n                  onChange={handleInputChange}\n                  required\n                  disabled={!formData.customerId}\n                >\n                  <option value=\"\">Select a pet</option>\n                  {customerPets.map(pet => (\n                    <option key={pet._id} value={pet._id}>\n                      {pet.name} ({pet.breed})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Appointment Time</h3>\n              <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"date\">Date</label>\n                  <input \n                    type=\"date\" \n                    id=\"date\" \n                    name=\"date\" \n                    className=\"form-control\"\n                    value={formData.date}\n                    onChange={handleInputChange}\n                    required\n                    min={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label htmlFor=\"time\">Time</label>\n                  <input \n                    type=\"time\" \n                    id=\"time\" \n                    name=\"time\" \n                    className=\"form-control\"\n                    value={formData.time}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"duration\">Duration (minutes)</label>\n                <input \n                  type=\"number\" \n                  id=\"duration\" \n                  name=\"duration\" \n                  className=\"form-control\"\n                  value={formData.duration}\n                  onChange={handleInputChange}\n                  min=\"15\"\n                  max=\"240\"\n                  step=\"15\"\n                  required\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-section\">\n              <h3>Additional Information</h3>\n              <div className=\"form-group\">\n                <label htmlFor=\"notes\">Notes</label>\n                <textarea \n                  id=\"notes\" \n                  name=\"notes\" \n                  className=\"form-control\"\n                  value={formData.notes}\n                  onChange={handleInputChange}\n                  rows=\"3\"\n                  placeholder=\"Add any special instructions or notes for this appointment\"\n                ></textarea>\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              <button \n                type=\"button\" \n                className=\"btn btn-outline-secondary\"\n                onClick={() => navigate('/appointments')}\n              >\n                Cancel\n              </button>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                {isEditing ? 'Update Appointment' : 'Create Appointment'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppointmentForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,cAAc,MAAM,qCAAqC;AAChE,OAAOC,GAAG,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAc,CAAC,GAAGT,SAAS,CAAC,CAAC;EACrC,MAAMU,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,SAAS,GAAGF,aAAa,IAAIA,aAAa,KAAK,KAAK;EAE1D,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAACc,SAAS,CAAC;EACjD,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC;IACvCyB,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,EAAE;IACdC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF7B,SAAS,CAAC,MAAM;IACd;IACA,MAAM8B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,MAAMC,gBAAgB,GAAG,MAAMzB,GAAG,CAAC0B,WAAW,CAAC,CAAC;QAChDf,WAAW,CAACc,gBAAgB,CAACE,IAAI,CAACjB,QAAQ,IAAI,EAAE,CAAC;;QAEjD;QACA,MAAMkB,aAAa,GAAG,CACpB;UAAEC,GAAG,EAAE,OAAO;UAAEC,IAAI,EAAE,YAAY;UAAEC,KAAK,EAAE;QAAmB,CAAC,EAC/D;UAAEF,GAAG,EAAE,OAAO;UAAEC,IAAI,EAAE,cAAc;UAAEC,KAAK,EAAE;QAAmB,CAAC,EACjE;UAAEF,GAAG,EAAE,OAAO;UAAEC,IAAI,EAAE,gBAAgB;UAAEC,KAAK,EAAE;QAAoB,CAAC,EACpE;UAAEF,GAAG,EAAE,OAAO;UAAEC,IAAI,EAAE,cAAc;UAAEC,KAAK,EAAE;QAAoB,CAAC,CACnE;QACDlB,YAAY,CAACe,aAAa,CAAC;;QAE3B;;QAEA;QACA,IAAIrB,SAAS,EAAE;UAAA,IAAAyB,mBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,kBAAA;UACb,MAAMC,mBAAmB,GAAG,MAAMrC,GAAG,CAACsC,UAAU,CAACjC,aAAa,CAAC;UAC/D,MAAMkC,WAAW,GAAGF,mBAAmB,CAACV,IAAI,CAACa,OAAO;;UAEpD;UACA,KAAAR,mBAAA,GAAIO,WAAW,CAACE,MAAM,cAAAT,mBAAA,eAAlBA,mBAAA,CAAoBH,GAAG,EAAE;YAC3Bd,mBAAmB,CAACwB,WAAW,CAACE,MAAM,CAACZ,GAAG,CAAC;UAC7C;;UAEA;UACA,MAAMa,eAAe,GAAG,IAAIC,IAAI,CAACJ,WAAW,CAACK,SAAS,CAAC;UACvD,MAAMC,aAAa,GAAGH,eAAe,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACjE,MAAMC,aAAa,GAAGN,eAAe,CAACO,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;UAEhE;UACA,MAAMC,OAAO,GAAG,IAAIR,IAAI,CAACJ,WAAW,CAACY,OAAO,CAAC;UAC7C,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,OAAO,GAAGT,eAAe,IAAI,KAAK,CAAC;UAEvEzB,WAAW,CAAC;YACVC,SAAS,EAAE,EAAAe,oBAAA,GAAAM,WAAW,CAACgB,OAAO,cAAAtB,oBAAA,uBAAnBA,oBAAA,CAAqBJ,GAAG,KAAI,EAAE;YACzCV,UAAU,EAAE,EAAAe,oBAAA,GAAAK,WAAW,CAACE,MAAM,cAAAP,oBAAA,uBAAlBA,oBAAA,CAAoBL,GAAG,KAAI,EAAE;YACzC2B,KAAK,EAAE,EAAArB,oBAAA,GAAAI,WAAW,CAACkB,OAAO,cAAAtB,oBAAA,uBAAnBA,oBAAA,CAAqBN,GAAG,KAAI,EAAE;YACrCT,IAAI,EAAEyB,aAAa;YACnBxB,IAAI,EAAE2B,aAAa;YACnB1B,QAAQ,EAAE8B,eAAe;YACzB7B,KAAK,EAAE,EAAAa,kBAAA,GAAAG,WAAW,CAAChB,KAAK,cAAAa,kBAAA,uBAAjBA,kBAAA,CAAmBK,MAAM,KAAI;UACtC,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjD7D,KAAK,CAAC6D,KAAK,CAAC,iCAAiC,CAAC;MAChD,CAAC,SAAS;QACRjD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDe,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACnB,aAAa,EAAEE,SAAS,CAAC,CAAC;;EAE9B;EACAb,SAAS,CAAC,MAAM;IACd,IAAIoB,gBAAgB,EAAE;MACpB8C,eAAe,CAACC,IAAI,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAC5C,UAAU,KAAKL,gBAAgB,CAAC,CAAC;MACxEG,WAAW,CAAC+C,IAAI,KAAK;QACnB,GAAGA,IAAI;QACP7C,UAAU,EAAEL,gBAAgB;QAC5B0C,KAAK,EAAE,EAAE,CAAE;MACb,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAAC1C,gBAAgB,EAAE+C,IAAI,CAAC,CAAC;EAE5B,MAAMI,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEpC,IAAI;MAAEqC;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCnD,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACc,IAAI,GAAGqC;IACV,CAAC,CAAC;;IAEF;IACA,IAAIrC,IAAI,KAAK,YAAY,EAAE;MACzBf,mBAAmB,CAACoD,KAAK,CAAC;IAC5B;EACF,CAAC;EAED,MAAME,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB7D,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF;MACA,MAAMmC,SAAS,GAAG,IAAID,IAAI,CAAC,GAAG3B,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACK,IAAI,EAAE,CAAC;MAC/D,MAAM8B,OAAO,GAAG,IAAIR,IAAI,CAACC,SAAS,CAAC2B,OAAO,CAAC,CAAC,GAAGvD,QAAQ,CAACM,QAAQ,GAAG,KAAK,CAAC;MAEzE,MAAMkD,eAAe,GAAG;QACtBjB,OAAO,EAAEvC,QAAQ,CAACE,SAAS;QAC3BuB,MAAM,EAAEzB,QAAQ,CAACG,UAAU;QAC3BsC,OAAO,EAAEzC,QAAQ,CAACwC,KAAK;QACvBZ,SAAS,EAAEA,SAAS,CAACE,WAAW,CAAC,CAAC;QAClCK,OAAO,EAAEA,OAAO,CAACL,WAAW,CAAC,CAAC;QAC9BvB,KAAK,EAAE;UACLkB,MAAM,EAAEzB,QAAQ,CAACO;QACnB,CAAC;QACDkD,MAAM,EAAE;MACV,CAAC;;MAED;MACA,IAAIlE,SAAS,EAAE;QACb,MAAMP,GAAG,CAAC0E,aAAa,CAACrE,aAAa,EAAEmE,eAAe,CAAC;QACvD3E,KAAK,CAAC8E,OAAO,CAAC,kCAAkC,CAAC;MACnD,CAAC,MAAM;QACL,MAAM3E,GAAG,CAAC4E,aAAa,CAACJ,eAAe,CAAC;QACxC3E,KAAK,CAAC8E,OAAO,CAAC,kCAAkC,CAAC;MACnD;;MAEA;MACArE,QAAQ,CAAC,eAAe,CAAC;IAC3B,CAAC,CAAC,OAAOoD,KAAK,EAAE;MAAA,IAAAmB,eAAA,EAAAC,oBAAA;MACdnB,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD7D,KAAK,CAAC6D,KAAK,CAAC,EAAAmB,eAAA,GAAAnB,KAAK,CAACqB,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBlD,IAAI,cAAAmD,oBAAA,uBAApBA,oBAAA,CAAsBpB,KAAK,KAAI,4BAA4B,CAAC;IAC1E,CAAC,SAAS;MACRjD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,IAAID,OAAO,EAAE;IACX,oBAAON,OAAA,CAACH,cAAc;MAAAiF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3B;EAEA,oBACEjF,OAAA;IAAKkF,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BnF,OAAA,CAACJ,UAAU;MACTwF,KAAK,EAAE/E,SAAS,GAAG,kBAAkB,GAAG,iBAAkB;MAC1DgF,QAAQ,EAAC;IAAe;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eAEFjF,OAAA;MAAKkF,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnBnF,OAAA;QAAKkF,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBnF,OAAA;UAAMsF,QAAQ,EAAEnB,YAAa;UAAAgB,QAAA,gBAC3BnF,OAAA;YAAKkF,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BnF,OAAA;cAAAmF,QAAA,EAAI;YAAe;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxBjF,OAAA;cAAKkF,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBnF,OAAA;gBAAOuF,OAAO,EAAC,WAAW;gBAAAJ,QAAA,EAAC;cAAO;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC1CjF,OAAA;gBACEwF,EAAE,EAAC,WAAW;gBACd5D,IAAI,EAAC,WAAW;gBAChBsD,SAAS,EAAC,cAAc;gBACxBjB,KAAK,EAAEnD,QAAQ,CAACE,SAAU;gBAC1ByE,QAAQ,EAAE1B,iBAAkB;gBAC5B2B,QAAQ;gBAAAP,QAAA,gBAERnF,OAAA;kBAAQiE,KAAK,EAAC,EAAE;kBAAAkB,QAAA,EAAC;gBAAgB;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACzCzE,QAAQ,CAACmF,GAAG,CAACtC,OAAO;kBAAA,IAAAuC,cAAA;kBAAA,oBACnB5F,OAAA;oBAA0BiE,KAAK,EAAEZ,OAAO,CAAC1B,GAAI;oBAAAwD,QAAA,GAC1C9B,OAAO,CAAC+B,KAAK,EAAC,KAAG,EAAC,EAAAQ,cAAA,GAAAvC,OAAO,CAACwC,KAAK,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,MAAM,KAAI,CAAC,EAAC,GAChD;kBAAA,GAFazC,OAAO,CAAC1B,GAAG;oBAAAmD,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAEhB,CAAC;gBAAA,CACV,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAKkF,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BnF,OAAA;cAAAmF,QAAA,EAAI;YAAc;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACvBjF,OAAA;cAAKkF,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBnF,OAAA;gBAAOuF,OAAO,EAAC,YAAY;gBAAAJ,QAAA,EAAC;cAAQ;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC5CjF,OAAA;gBACEwF,EAAE,EAAC,YAAY;gBACf5D,IAAI,EAAC,YAAY;gBACjBsD,SAAS,EAAC,cAAc;gBACxBjB,KAAK,EAAEnD,QAAQ,CAACG,UAAW;gBAC3BwE,QAAQ,EAAE1B,iBAAkB;gBAC5B2B,QAAQ;gBAAAP,QAAA,gBAERnF,OAAA;kBAAQiE,KAAK,EAAC,EAAE;kBAAAkB,QAAA,EAAC;gBAAiB;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EAC1CvE,SAAS,CAACiF,GAAG,CAACI,QAAQ,iBACrB/F,OAAA;kBAA2BiE,KAAK,EAAE8B,QAAQ,CAACpE,GAAI;kBAAAwD,QAAA,GAC5CY,QAAQ,CAACnE,IAAI,EAAC,IAAE,EAACmE,QAAQ,CAAClE,KAAK,EAAC,GACnC;gBAAA,GAFakE,QAAQ,CAACpE,GAAG;kBAAAmD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEjB,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,eAENjF,OAAA;cAAKkF,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBnF,OAAA;gBAAOuF,OAAO,EAAC,OAAO;gBAAAJ,QAAA,EAAC;cAAG;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAClCjF,OAAA;gBACEwF,EAAE,EAAC,OAAO;gBACV5D,IAAI,EAAC,OAAO;gBACZsD,SAAS,EAAC,cAAc;gBACxBjB,KAAK,EAAEnD,QAAQ,CAACwC,KAAM;gBACtBmC,QAAQ,EAAE1B,iBAAkB;gBAC5B2B,QAAQ;gBACRM,QAAQ,EAAE,CAAClF,QAAQ,CAACG,UAAW;gBAAAkE,QAAA,gBAE/BnF,OAAA;kBAAQiE,KAAK,EAAC,EAAE;kBAAAkB,QAAA,EAAC;gBAAY;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACrCgB,YAAY,CAACN,GAAG,CAAC9B,GAAG,iBACnB7D,OAAA;kBAAsBiE,KAAK,EAAEJ,GAAG,CAAClC,GAAI;kBAAAwD,QAAA,GAClCtB,GAAG,CAACjC,IAAI,EAAC,IAAE,EAACiC,GAAG,CAACqC,KAAK,EAAC,GACzB;gBAAA,GAFarC,GAAG,CAAClC,GAAG;kBAAAmD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAEZ,CACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAKkF,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BnF,OAAA;cAAAmF,QAAA,EAAI;YAAgB;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzBjF,OAAA;cAAKkF,SAAS,EAAC,UAAU;cAAAC,QAAA,gBACvBnF,OAAA;gBAAKkF,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClCnF,OAAA;kBAAOuF,OAAO,EAAC,MAAM;kBAAAJ,QAAA,EAAC;gBAAI;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eAClCjF,OAAA;kBACEmG,IAAI,EAAC,MAAM;kBACXX,EAAE,EAAC,MAAM;kBACT5D,IAAI,EAAC,MAAM;kBACXsD,SAAS,EAAC,cAAc;kBACxBjB,KAAK,EAAEnD,QAAQ,CAACI,IAAK;kBACrBuE,QAAQ,EAAE1B,iBAAkB;kBAC5B2B,QAAQ;kBACRU,GAAG,EAAE,IAAI3D,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAAE;kBAAAiC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7C,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACNjF,OAAA;gBAAKkF,SAAS,EAAC,qBAAqB;gBAAAC,QAAA,gBAClCnF,OAAA;kBAAOuF,OAAO,EAAC,MAAM;kBAAAJ,QAAA,EAAC;gBAAI;kBAAAL,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eAClCjF,OAAA;kBACEmG,IAAI,EAAC,MAAM;kBACXX,EAAE,EAAC,MAAM;kBACT5D,IAAI,EAAC,MAAM;kBACXsD,SAAS,EAAC,cAAc;kBACxBjB,KAAK,EAAEnD,QAAQ,CAACK,IAAK;kBACrBsE,QAAQ,EAAE1B,iBAAkB;kBAC5B2B,QAAQ;gBAAA;kBAAAZ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACT,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAENjF,OAAA;cAAKkF,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBnF,OAAA;gBAAOuF,OAAO,EAAC,UAAU;gBAAAJ,QAAA,EAAC;cAAkB;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACpDjF,OAAA;gBACEmG,IAAI,EAAC,QAAQ;gBACbX,EAAE,EAAC,UAAU;gBACb5D,IAAI,EAAC,UAAU;gBACfsD,SAAS,EAAC,cAAc;gBACxBjB,KAAK,EAAEnD,QAAQ,CAACM,QAAS;gBACzBqE,QAAQ,EAAE1B,iBAAkB;gBAC5BqC,GAAG,EAAC,IAAI;gBACRC,GAAG,EAAC,KAAK;gBACTC,IAAI,EAAC,IAAI;gBACTZ,QAAQ;cAAA;gBAAAZ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAKkF,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BnF,OAAA;cAAAmF,QAAA,EAAI;YAAsB;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/BjF,OAAA;cAAKkF,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBnF,OAAA;gBAAOuF,OAAO,EAAC,OAAO;gBAAAJ,QAAA,EAAC;cAAK;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACpCjF,OAAA;gBACEwF,EAAE,EAAC,OAAO;gBACV5D,IAAI,EAAC,OAAO;gBACZsD,SAAS,EAAC,cAAc;gBACxBjB,KAAK,EAAEnD,QAAQ,CAACO,KAAM;gBACtBoE,QAAQ,EAAE1B,iBAAkB;gBAC5BwC,IAAI,EAAC,GAAG;gBACRC,WAAW,EAAC;cAA4D;gBAAA1B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/D,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENjF,OAAA;YAAKkF,SAAS,EAAC,cAAc;YAAAC,QAAA,gBAC3BnF,OAAA;cACEmG,IAAI,EAAC,QAAQ;cACbjB,SAAS,EAAC,2BAA2B;cACrCuB,OAAO,EAAEA,CAAA,KAAMrG,QAAQ,CAAC,eAAe,CAAE;cAAA+E,QAAA,EAC1C;YAED;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTjF,OAAA;cAAQmG,IAAI,EAAC,QAAQ;cAACjB,SAAS,EAAC,iBAAiB;cAAAC,QAAA,EAC9C9E,SAAS,GAAG,oBAAoB,GAAG;YAAoB;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/E,EAAA,CA7SID,eAAe;EAAA,QACOP,SAAS,EAClBD,WAAW;AAAA;AAAAiH,EAAA,GAFxBzG,eAAe;AA+SrB,eAAeA,eAAe;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}