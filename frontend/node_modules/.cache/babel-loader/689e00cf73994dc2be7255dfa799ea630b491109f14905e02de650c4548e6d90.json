{"ast":null,"code":"var _jsxFileName = \"/home/toebot/dog-services-saas/frontend/src/components/auth/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Protected Route component that redirects to login page if user is not authenticated.\n * Optionally redirects based on user role for role-specific routes.\n * \n * @param {Object} props - The component props\n * @param {React.ReactNode} props.children - The child components to render when authenticated\n * @param {String} props.requiredRole - Optional role requirement for accessing the route\n * @param {String} props.redirectPath - Custom redirect path (defaults to /login)\n * @returns {React.ReactElement} - The rendered component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole = null,\n  redirectPath = '/login'\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    currentUser,\n    authLoading\n  } = useAuth();\n  const location = useLocation();\n\n  // Show loading state if auth is still being checked\n  if (authLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Checking authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated) {\n    // Redirect to login, but save the attempted location\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: redirectPath,\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If a specific role is required, check user's role\n  if (requiredRole && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) !== requiredRole) {\n    // Special case: if the route requires 'client' role and the user is 'admin',\n    // allow access as admin can view client-specific routes\n    if (!(requiredRole === 'client' && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin')) {\n      // Redirect based on role\n      if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin') {\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/admin/dashboard\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n      } else if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'business') {\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/dashboard\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/appointments\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  }\n\n  // User is authenticated and has required role (if any)\n  return children;\n};\n_s(ProtectedRoute, \"GQqzgaA+EAQ3J7gmd4yCkcdAksg=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","requiredRole","redirectPath","_s","isAuthenticated","currentUser","authLoading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","role","_c","$RefreshReg$"],"sources":["/home/toebot/dog-services-saas/frontend/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Protected Route component that redirects to login page if user is not authenticated.\n * Optionally redirects based on user role for role-specific routes.\n * \n * @param {Object} props - The component props\n * @param {React.ReactNode} props.children - The child components to render when authenticated\n * @param {String} props.requiredRole - Optional role requirement for accessing the route\n * @param {String} props.redirectPath - Custom redirect path (defaults to /login)\n * @returns {React.ReactElement} - The rendered component\n */\nconst ProtectedRoute = ({ \n  children, \n  requiredRole = null,\n  redirectPath = '/login'\n}) => {\n  const { isAuthenticated, currentUser, authLoading } = useAuth();\n  const location = useLocation();\n  \n  // Show loading state if auth is still being checked\n  if (authLoading) {\n    return (\n      <div className=\"auth-loading\">\n        <div className=\"spinner\"></div>\n        <p>Checking authentication...</p>\n      </div>\n    );\n  }\n  \n  // Check if user is authenticated\n  if (!isAuthenticated) {\n    // Redirect to login, but save the attempted location\n    return <Navigate to={redirectPath} state={{ from: location }} replace />;\n  }\n  \n  // If a specific role is required, check user's role\n  if (requiredRole && currentUser?.role !== requiredRole) {\n    // Special case: if the route requires 'client' role and the user is 'admin',\n    // allow access as admin can view client-specific routes\n    if (!(requiredRole === 'client' && currentUser?.role === 'admin')) {\n      // Redirect based on role\n      if (currentUser?.role === 'admin') {\n        return <Navigate to=\"/admin/dashboard\" replace />;\n      } else if (currentUser?.role === 'business') {\n        return <Navigate to=\"/dashboard\" replace />;\n      } else {\n        return <Navigate to=\"/appointments\" replace />;\n      }\n    }\n  }\n  \n  // User is authenticated and has required role (if any)\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,2BAA2B;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAAAC,MAAA,IAAAC,OAAA;AAUA,MAAMC,cAAc,GAAGA,CAAC;EACtBC,QAAQ;EACRC,YAAY,GAAG,IAAI;EACnBC,YAAY,GAAG;AACjB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC,eAAe;IAAEC,WAAW;IAAEC;EAAY,CAAC,GAAGV,OAAO,CAAC,CAAC;EAC/D,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIW,WAAW,EAAE;IACf,oBACER,OAAA;MAAKU,SAAS,EAAC,cAAc;MAAAR,QAAA,gBAC3BF,OAAA;QAAKU,SAAS,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC/Bd,OAAA;QAAAE,QAAA,EAAG;MAA0B;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAEV;;EAEA;EACA,IAAI,CAACR,eAAe,EAAE;IACpB;IACA,oBAAON,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAEX,YAAa;MAACY,KAAK,EAAE;QAAEC,IAAI,EAAER;MAAS,CAAE;MAACS,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1E;;EAEA;EACA,IAAIX,YAAY,IAAI,CAAAI,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,IAAI,MAAKhB,YAAY,EAAE;IACtD;IACA;IACA,IAAI,EAAEA,YAAY,KAAK,QAAQ,IAAI,CAAAI,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,IAAI,MAAK,OAAO,CAAC,EAAE;MACjE;MACA,IAAI,CAAAZ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,IAAI,MAAK,OAAO,EAAE;QACjC,oBAAOnB,OAAA,CAACJ,QAAQ;UAACmB,EAAE,EAAC,kBAAkB;UAACG,OAAO;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACnD,CAAC,MAAM,IAAI,CAAAP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,IAAI,MAAK,UAAU,EAAE;QAC3C,oBAAOnB,OAAA,CAACJ,QAAQ;UAACmB,EAAE,EAAC,YAAY;UAACG,OAAO;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC7C,CAAC,MAAM;QACL,oBAAOd,OAAA,CAACJ,QAAQ;UAACmB,EAAE,EAAC,eAAe;UAACG,OAAO;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAChD;IACF;EACF;;EAEA;EACA,OAAOZ,QAAQ;AACjB,CAAC;AAACG,EAAA,CA1CIJ,cAAc;EAAA,QAKoCH,OAAO,EAC5CD,WAAW;AAAA;AAAAuB,EAAA,GANxBnB,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}