{"ast":null,"code":"import React from'react';import{Navigate,useLocation}from'react-router-dom';import{useAuth}from'../../context/AuthContext';/**\n * Protected Route component that redirects to login page if user is not authenticated.\n * Optionally redirects based on user role for role-specific routes.\n * \n * @param {Object} props - The component props\n * @param {React.ReactNode} props.children - The child components to render when authenticated\n * @param {String} props.requiredRole - Optional role requirement for accessing the route\n * @param {String} props.redirectPath - Custom redirect path (defaults to /login)\n * @returns {React.ReactElement} - The rendered component\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children,requiredRole=null,redirectPath='/login'}=_ref;const{isAuthenticated,userRole,isLoading}=useAuth();const location=useLocation();// Show loading state if auth is still being checked\nif(isLoading){return/*#__PURE__*/_jsxs(\"div\",{className:\"auth-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Checking authentication...\"})]});}// Check if user is authenticated\nif(!isAuthenticated){// Redirect to login, but save the attempted location\nreturn/*#__PURE__*/_jsx(Navigate,{to:redirectPath,state:{from:location},replace:true});}// If a specific role is required, check user's role\nif(requiredRole&&userRole!==requiredRole){// Redirect based on role\nif(userRole==='admin'){return/*#__PURE__*/_jsx(Navigate,{to:\"/admin/dashboard\",replace:true});}else{return/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}}// User is authenticated and has required role (if any)\nreturn children;};export default ProtectedRoute;","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","children","requiredRole","redirectPath","isAuthenticated","userRole","isLoading","location","className","to","state","from","replace"],"sources":["/home/toebot/dog-services-saas/frontend/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n/**\n * Protected Route component that redirects to login page if user is not authenticated.\n * Optionally redirects based on user role for role-specific routes.\n * \n * @param {Object} props - The component props\n * @param {React.ReactNode} props.children - The child components to render when authenticated\n * @param {String} props.requiredRole - Optional role requirement for accessing the route\n * @param {String} props.redirectPath - Custom redirect path (defaults to /login)\n * @returns {React.ReactElement} - The rendered component\n */\nconst ProtectedRoute = ({ \n  children, \n  requiredRole = null,\n  redirectPath = '/login'\n}) => {\n  const { isAuthenticated, userRole, isLoading } = useAuth();\n  const location = useLocation();\n  \n  // Show loading state if auth is still being checked\n  if (isLoading) {\n    return (\n      <div className=\"auth-loading\">\n        <div className=\"spinner\"></div>\n        <p>Checking authentication...</p>\n      </div>\n    );\n  }\n  \n  // Check if user is authenticated\n  if (!isAuthenticated) {\n    // Redirect to login, but save the attempted location\n    return <Navigate to={redirectPath} state={{ from: location }} replace />;\n  }\n  \n  // If a specific role is required, check user's role\n  if (requiredRole && userRole !== requiredRole) {\n    // Redirect based on role\n    if (userRole === 'admin') {\n      return <Navigate to=\"/admin/dashboard\" replace />;\n    } else {\n      return <Navigate to=\"/dashboard\" replace />;\n    }\n  }\n  \n  // User is authenticated and has required role (if any)\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,CAAEC,WAAW,KAAQ,kBAAkB,CACxD,OAASC,OAAO,KAAQ,2BAA2B,CAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAUA,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAIjB,IAJkB,CACtBC,QAAQ,CACRC,YAAY,CAAG,IAAI,CACnBC,YAAY,CAAG,QACjB,CAAC,CAAAH,IAAA,CACC,KAAM,CAAEI,eAAe,CAAEC,QAAQ,CAAEC,SAAU,CAAC,CAAGZ,OAAO,CAAC,CAAC,CAC1D,KAAM,CAAAa,QAAQ,CAAGd,WAAW,CAAC,CAAC,CAE9B;AACA,GAAIa,SAAS,CAAE,CACb,mBACER,KAAA,QAAKU,SAAS,CAAC,cAAc,CAAAP,QAAA,eAC3BL,IAAA,QAAKY,SAAS,CAAC,SAAS,CAAM,CAAC,cAC/BZ,IAAA,MAAAK,QAAA,CAAG,4BAA0B,CAAG,CAAC,EAC9B,CAAC,CAEV,CAEA;AACA,GAAI,CAACG,eAAe,CAAE,CACpB;AACA,mBAAOR,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAEN,YAAa,CAACO,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAS,CAAE,CAACK,OAAO,MAAE,CAAC,CAC1E,CAEA;AACA,GAAIV,YAAY,EAAIG,QAAQ,GAAKH,YAAY,CAAE,CAC7C;AACA,GAAIG,QAAQ,GAAK,OAAO,CAAE,CACxB,mBAAOT,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,kBAAkB,CAACG,OAAO,MAAE,CAAC,CACnD,CAAC,IAAM,CACL,mBAAOhB,IAAA,CAACJ,QAAQ,EAACiB,EAAE,CAAC,YAAY,CAACG,OAAO,MAAE,CAAC,CAC7C,CACF,CAEA;AACA,MAAO,CAAAX,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}