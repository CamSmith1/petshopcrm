{"ast":null,"code":"import supabase from './supabaseClient';\n\n// Auth methods\nexport const auth = {\n  // Register a new user\n  register: async userData => {\n    var _data$user;\n    const {\n      email,\n      password,\n      name,\n      role,\n      businessName,\n      businessCategory,\n      phone,\n      address\n    } = userData;\n\n    // Create metadata\n    const metadata = {\n      name,\n      role: role || 'client',\n      phone,\n      businessName,\n      businessCategory\n    };\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Additional profile data\n    if (data !== null && data !== void 0 && (_data$user = data.user) !== null && _data$user !== void 0 && _data$user.id) {\n      if (role === 'business' && businessName) {\n        const {\n          error: profileError\n        } = await supabase.from('users').update({\n          business_name: businessName,\n          business_category: businessCategory\n        }).eq('id', data.user.id);\n        if (profileError) {\n          console.error('Error updating business profile:', profileError);\n        }\n      }\n      if (address) {\n        const {\n          error: addressError\n        } = await supabase.from('users').update({\n          street: address.street,\n          city: address.city,\n          state: address.state,\n          zip_code: address.zipCode,\n          country: address.country\n        }).eq('id', data.user.id);\n        if (addressError) {\n          console.error('Error updating address:', addressError);\n        }\n      }\n    }\n    return {\n      user: {\n        id: data.user.id,\n        name,\n        email: data.user.email,\n        role: role || 'client'\n      },\n      session: data.session\n    };\n  },\n  // Sign in with email and password\n  login: async credentials => {\n    var _data$user$user_metad, _data$user$user_metad2;\n    const {\n      email,\n      password\n    } = credentials;\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Get user profile data\n    const {\n      data: userData,\n      error: profileError\n    } = await supabase.from('users').select('*').eq('id', data.user.id).single();\n    if (profileError) {\n      console.error('Error fetching user profile:', profileError);\n    }\n    return {\n      user: {\n        id: data.user.id,\n        name: (userData === null || userData === void 0 ? void 0 : userData.name) || ((_data$user$user_metad = data.user.user_metadata) === null || _data$user$user_metad === void 0 ? void 0 : _data$user$user_metad.name),\n        email: data.user.email,\n        role: (userData === null || userData === void 0 ? void 0 : userData.role) || ((_data$user$user_metad2 = data.user.user_metadata) === null || _data$user$user_metad2 === void 0 ? void 0 : _data$user$user_metad2.role) || 'client',\n        isVerified: data.user.email_confirmed_at ? true : false,\n        avatar: userData === null || userData === void 0 ? void 0 : userData.avatar_url,\n        businessName: userData === null || userData === void 0 ? void 0 : userData.business_name\n      },\n      session: data.session\n    };\n  },\n  // Sign out\n  logout: async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  },\n  // Get the current session\n  getSession: async () => {\n    const {\n      data,\n      error\n    } = await supabase.auth.getSession();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data.session;\n  },\n  // Reset password\n  resetPassword: async email => {\n    const {\n      error\n    } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  },\n  // Update password\n  updatePassword: async newPassword => {\n    const {\n      error\n    } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  }\n};\n\n// User methods\nexport const users = {\n  // Get current user profile\n  getCurrentUser: async () => {\n    var _user$user_metadata, _user$user_metadata2;\n    // First get the auth user\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Then get the profile data\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').eq('id', user.id).single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return {\n      id: user.id,\n      name: data.name || ((_user$user_metadata = user.user_metadata) === null || _user$user_metadata === void 0 ? void 0 : _user$user_metadata.name),\n      email: user.email,\n      role: data.role || ((_user$user_metadata2 = user.user_metadata) === null || _user$user_metadata2 === void 0 ? void 0 : _user$user_metadata2.role) || 'client',\n      phone: data.phone,\n      avatar: data.avatar_url,\n      address: {\n        street: data.street,\n        city: data.city,\n        state: data.state,\n        zipCode: data.zip_code,\n        country: data.country\n      },\n      businessName: data.business_name,\n      businessCategory: data.business_category,\n      businessDescription: data.business_description,\n      website: data.website\n    };\n  },\n  // Update user profile\n  updateProfile: async profileData => {\n    var _profileData$address, _profileData$address2, _profileData$address3, _profileData$address4, _profileData$address5;\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Format data for Supabase\n    const updateData = {\n      name: profileData.name,\n      phone: profileData.phone,\n      street: (_profileData$address = profileData.address) === null || _profileData$address === void 0 ? void 0 : _profileData$address.street,\n      city: (_profileData$address2 = profileData.address) === null || _profileData$address2 === void 0 ? void 0 : _profileData$address2.city,\n      state: (_profileData$address3 = profileData.address) === null || _profileData$address3 === void 0 ? void 0 : _profileData$address3.state,\n      zip_code: (_profileData$address4 = profileData.address) === null || _profileData$address4 === void 0 ? void 0 : _profileData$address4.zipCode,\n      country: (_profileData$address5 = profileData.address) === null || _profileData$address5 === void 0 ? void 0 : _profileData$address5.country\n    };\n\n    // Add business fields if needed\n    if (profileData.businessName) {\n      updateData.business_name = profileData.businessName;\n      updateData.business_category = profileData.businessCategory;\n      updateData.business_description = profileData.businessDescription;\n      updateData.website = profileData.website;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('users').update(updateData).eq('id', user.id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Format the response to match the existing API format\n    return {\n      user: {\n        id: user.id,\n        name: data.name,\n        email: user.email,\n        role: data.role,\n        phone: data.phone,\n        avatar: data.avatar_url,\n        address: {\n          street: data.street,\n          city: data.city,\n          state: data.state,\n          zipCode: data.zip_code,\n          country: data.country\n        },\n        businessName: data.business_name,\n        businessCategory: data.business_category,\n        businessDescription: data.business_description,\n        website: data.website\n      }\n    };\n  },\n  // Upload avatar\n  uploadAvatar: async file => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${user.id}/${Date.now()}.${fileExt}`;\n    const filePath = `avatars/${fileName}`;\n\n    // Upload to Supabase Storage\n    const {\n      error: uploadError\n    } = await supabase.storage.from('profiles').upload(filePath, file);\n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n\n    // Get the public URL\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from('profiles').getPublicUrl(filePath);\n\n    // Update user profile with avatar URL\n    const {\n      error: updateError\n    } = await supabase.from('users').update({\n      avatar_url: publicUrl\n    }).eq('id', user.id);\n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    return publicUrl;\n  }\n};\n\n// Pet methods\nexport const pets = {\n  // Get all pets for current user\n  getPets: async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('pets').select('*').eq('owner_id', user.id);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Get a specific pet\n  getPet: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('pets').select(`\n        *,\n        pet_emergency_contacts(*)\n      `).eq('id', id).single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Create a new pet\n  createPet: async petData => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Format data for Supabase\n    const newPet = {\n      owner_id: user.id,\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('pets').insert(newPet).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // If emergency contacts were provided, add them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: data.id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      const {\n        error: contactsError\n      } = await supabase.from('pet_emergency_contacts').insert(emergencyContacts);\n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    return data;\n  },\n  // Update an existing pet\n  updatePet: async (id, petData) => {\n    // Format data for Supabase\n    const updateData = {\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('pets').update(updateData).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // If emergency contacts were provided, update them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      // First delete existing contacts\n      const {\n        error: deleteError\n      } = await supabase.from('pet_emergency_contacts').delete().eq('pet_id', id);\n      if (deleteError) {\n        console.error('Error deleting emergency contacts:', deleteError);\n      }\n\n      // Then add new ones\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      const {\n        error: contactsError\n      } = await supabase.from('pet_emergency_contacts').insert(emergencyContacts);\n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    return data;\n  },\n  // Delete a pet\n  deletePet: async id => {\n    const {\n      error\n    } = await supabase.from('pets').delete().eq('id', id);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  },\n  // Upload pet photo\n  uploadPetPhoto: async (id, file) => {\n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${id}/${Date.now()}.${fileExt}`;\n    const filePath = `pets/${fileName}`;\n\n    // Upload to Supabase Storage\n    const {\n      error: uploadError\n    } = await supabase.storage.from('pet-photos').upload(filePath, file);\n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n\n    // Get the public URL\n    const {\n      data: {\n        publicUrl\n      }\n    } = supabase.storage.from('pet-photos').getPublicUrl(filePath);\n\n    // Update pet with photo URL\n    const {\n      error: updateError\n    } = await supabase.from('pets').update({\n      photo_url: publicUrl\n    }).eq('id', id);\n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    return publicUrl;\n  }\n};\n\n// Service methods\nexport const services = {\n  // Get all services with optional filters\n  getServices: async params => {\n    let query = supabase.from('services').select('*');\n\n    // Apply filters if provided\n    if (params) {\n      if (params.providerId) {\n        query = query.eq('provider_id', params.providerId);\n      }\n      if (params.category) {\n        query = query.eq('category', params.category);\n      }\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Get a specific service with all related data\n  getService: async id => {\n    const {\n      data: service,\n      error: serviceError\n    } = await supabase.from('services').select('*').eq('id', id).single();\n    if (serviceError) {\n      throw new Error(serviceError.message);\n    }\n\n    // Get availability\n    const {\n      data: availability,\n      error: availabilityError\n    } = await supabase.from('service_availability').select('*').eq('service_id', id);\n    if (availabilityError) {\n      console.error('Error fetching availability:', availabilityError);\n    }\n\n    // Get custom form schema if exists\n    const {\n      data: customForm,\n      error: formError\n    } = await supabase.from('service_custom_forms').select('*').eq('service_id', id).maybeSingle();\n    if (formError && formError.code !== 'PGRST116') {\n      console.error('Error fetching custom form:', formError);\n    }\n    return {\n      ...service,\n      availability: availability || [],\n      customForm: customForm ? customForm.form_schema : null\n    };\n  },\n  // Create a new service\n  createService: async serviceData => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Format data for Supabase\n    const newService = {\n      provider_id: user.id,\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('services').insert(newService).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Add availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      const availability = serviceData.availability.map(slot => ({\n        service_id: data.id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      const {\n        error: availabilityError\n      } = await supabase.from('service_availability').insert(availability);\n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n\n    // Add custom form if provided\n    if (serviceData.customForm) {\n      const {\n        error: formError\n      } = await supabase.from('service_custom_forms').insert({\n        service_id: data.id,\n        form_schema: serviceData.customForm\n      });\n      if (formError) {\n        console.error('Error adding custom form:', formError);\n      }\n    }\n    return data;\n  },\n  // Update an existing service\n  updateService: async (id, serviceData) => {\n    // Format data for Supabase\n    const updateData = {\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('services').update(updateData).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    // Update availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      // First delete existing availability\n      const {\n        error: deleteError\n      } = await supabase.from('service_availability').delete().eq('service_id', id);\n      if (deleteError) {\n        console.error('Error deleting availability:', deleteError);\n      }\n\n      // Then add new availability\n      const availability = serviceData.availability.map(slot => ({\n        service_id: id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      const {\n        error: availabilityError\n      } = await supabase.from('service_availability').insert(availability);\n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n\n    // Update custom form if provided\n    if (serviceData.customForm) {\n      // Check if form already exists\n      const {\n        data: existingForm,\n        error: checkError\n      } = await supabase.from('service_custom_forms').select('id').eq('service_id', id).maybeSingle();\n      if (checkError && checkError.code !== 'PGRST116') {\n        console.error('Error checking custom form:', checkError);\n      }\n      if (existingForm) {\n        // Update existing form\n        const {\n          error: updateError\n        } = await supabase.from('service_custom_forms').update({\n          form_schema: serviceData.customForm\n        }).eq('id', existingForm.id);\n        if (updateError) {\n          console.error('Error updating custom form:', updateError);\n        }\n      } else {\n        // Insert new form\n        const {\n          error: insertError\n        } = await supabase.from('service_custom_forms').insert({\n          service_id: id,\n          form_schema: serviceData.customForm\n        });\n        if (insertError) {\n          console.error('Error adding custom form:', insertError);\n        }\n      }\n    }\n    return data;\n  },\n  // Delete a service\n  deleteService: async id => {\n    const {\n      error\n    } = await supabase.from('services').delete().eq('id', id);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return true;\n  }\n};\n\n// Booking methods\nexport const bookings = {\n  // Get all bookings with filters\n  getBookings: async params => {\n    var _user$user_metadata3, _user$user_metadata4;\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    let query = supabase.from('bookings').select(`\n        *,\n        services(title, description, price_amount, price_currency),\n        pets(name, type, breed)\n      `);\n\n    // Apply filters based on user role and params\n    if (((_user$user_metadata3 = user.user_metadata) === null || _user$user_metadata3 === void 0 ? void 0 : _user$user_metadata3.role) === 'client') {\n      query = query.eq('client_id', user.id);\n    } else if (((_user$user_metadata4 = user.user_metadata) === null || _user$user_metadata4 === void 0 ? void 0 : _user$user_metadata4.role) === 'business') {\n      query = query.eq('provider_id', user.id);\n    }\n    if (params) {\n      if (params.status) {\n        query = query.eq('status', params.status);\n      }\n      if (params.startDate && params.endDate) {\n        query = query.gte('start_time', params.startDate).lte('start_time', params.endDate);\n      }\n    }\n\n    // Order by start time, newest first\n    query = query.order('start_time', {\n      ascending: false\n    });\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Get a specific booking\n  getBooking: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('bookings').select(`\n        *,\n        services(*),\n        reviews(*)\n      `).eq('id', id).single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Create a new booking\n  createBooking: async bookingData => {\n    var _bookingData$notes, _bookingData$notes2, _bookingData$notes3;\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Get service to verify provider and price\n    const {\n      data: service,\n      error: serviceError\n    } = await supabase.from('services').select('provider_id, price_amount, price_currency').eq('id', bookingData.serviceId).single();\n    if (serviceError) {\n      throw new Error('Service not found');\n    }\n\n    // Format booking data for Supabase\n    const newBooking = {\n      service_id: bookingData.serviceId,\n      provider_id: bookingData.providerId || service.provider_id,\n      client_id: user.id,\n      pet_id: bookingData.petId,\n      start_time: new Date(bookingData.startTime).toISOString(),\n      end_time: new Date(bookingData.endTime).toISOString(),\n      location: bookingData.location,\n      total_price_amount: service.price_amount,\n      total_price_currency: service.price_currency || 'USD',\n      client_notes: ((_bookingData$notes = bookingData.notes) === null || _bookingData$notes === void 0 ? void 0 : _bookingData$notes.client) || null,\n      provider_notes: ((_bookingData$notes2 = bookingData.notes) === null || _bookingData$notes2 === void 0 ? void 0 : _bookingData$notes2.provider) || null,\n      internal_notes: ((_bookingData$notes3 = bookingData.notes) === null || _bookingData$notes3 === void 0 ? void 0 : _bookingData$notes3.internal) || null,\n      custom_form_data: bookingData.customFormData || null,\n      status: 'pending'\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('bookings').insert(newBooking).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Update an existing booking\n  updateBooking: async (id, bookingData) => {\n    // Format data for Supabase\n    const updateData = {};\n    if (bookingData.startTime) {\n      updateData.start_time = new Date(bookingData.startTime).toISOString();\n    }\n    if (bookingData.endTime) {\n      updateData.end_time = new Date(bookingData.endTime).toISOString();\n    }\n    if (bookingData.status) {\n      updateData.status = bookingData.status;\n    }\n    if (bookingData.notes) {\n      if (bookingData.notes.client !== undefined) {\n        updateData.client_notes = bookingData.notes.client;\n      }\n      if (bookingData.notes.provider !== undefined) {\n        updateData.provider_notes = bookingData.notes.provider;\n      }\n      if (bookingData.notes.internal !== undefined) {\n        updateData.internal_notes = bookingData.notes.internal;\n      }\n    }\n    if (bookingData.assignedStaff) {\n      updateData.assigned_staff_id = bookingData.assignedStaff;\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('bookings').update(updateData).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Cancel a booking\n  cancelBooking: async (id, reason) => {\n    var _user$user_metadata5;\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Get booking to determine who is cancelling\n    const {\n      data: booking,\n      error: bookingError\n    } = await supabase.from('bookings').select('client_id, provider_id').eq('id', id).single();\n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n\n    // Determine who is cancelling\n    let cancellationBy;\n    if (booking.client_id === user.id) {\n      cancellationBy = 'client';\n    } else if (booking.provider_id === user.id) {\n      cancellationBy = 'provider';\n    } else if (((_user$user_metadata5 = user.user_metadata) === null || _user$user_metadata5 === void 0 ? void 0 : _user$user_metadata5.role) === 'admin') {\n      cancellationBy = 'admin';\n    } else {\n      throw new Error('Not authorized to cancel this booking');\n    }\n\n    // Update booking\n    const {\n      data,\n      error\n    } = await supabase.from('bookings').update({\n      status: 'cancelled',\n      cancellation_reason: reason || 'No reason provided',\n      cancellation_time: new Date().toISOString(),\n      cancellation_by: cancellationBy\n    }).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Mark a booking as completed\n  completeBooking: async id => {\n    const {\n      data,\n      error\n    } = await supabase.from('bookings').update({\n      status: 'completed'\n    }).eq('id', id).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Add a review to a booking\n  addReview: async (bookingId, reviewData) => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Get booking to verify client and provider\n    const {\n      data: booking,\n      error: bookingError\n    } = await supabase.from('bookings').select('client_id, provider_id, status').eq('id', bookingId).single();\n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n\n    // Verify client is adding the review\n    if (booking.client_id !== user.id) {\n      throw new Error('Not authorized to review this booking');\n    }\n\n    // Verify booking is completed\n    if (booking.status !== 'completed') {\n      throw new Error('Can only review completed bookings');\n    }\n\n    // Create the review\n    const newReview = {\n      booking_id: bookingId,\n      client_id: user.id,\n      provider_id: booking.provider_id,\n      rating: reviewData.rating,\n      comment: reviewData.comment || ''\n    };\n    const {\n      data,\n      error\n    } = await supabase.from('reviews').insert(newReview).select().single();\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  }\n};\n\n// Payment methods\nexport const payments = {\n  // Create a payment intent\n  createPaymentIntent: async bookingId => {\n    // For now, we'll just make an API call to the existing endpoint\n    // This would ideally be replaced with a direct Supabase Edge Function call\n\n    const {\n      data: {\n        session\n      }\n    } = await supabase.auth.getSession();\n    if (!session) {\n      throw new Error('Not authenticated');\n    }\n    const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/payments/create-intent`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${session.access_token}`\n      },\n      body: JSON.stringify({\n        bookingId\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to create payment intent');\n    }\n    return data;\n  }\n};\n\n// Widget integration methods\nexport const widget = {\n  // Generate an API key\n  generateApiKey: async keyName => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Call the RPC function to generate an API key\n    const {\n      data,\n      error\n    } = await supabase.rpc('generate_api_key', {\n      business_id: user.id,\n      key_name: keyName || 'Widget API Key'\n    });\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  },\n  // Get embed code\n  getEmbedCode: async (options = {}) => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n\n    // Get API keys\n    const {\n      data: apiKeys,\n      error: keysError\n    } = await supabase.from('api_keys').select('key_value').eq('business_id', user.id).limit(1);\n    if (keysError || !apiKeys || apiKeys.length === 0) {\n      throw new Error('API key not found. Generate one first.');\n    }\n\n    // Get widget settings\n    const {\n      data: widgetSettings,\n      error: settingsError\n    } = await supabase.from('widget_settings').select('*').eq('business_id', user.id).maybeSingle();\n    if (settingsError && settingsError.code !== 'PGRST116') {\n      console.error('Error fetching widget settings:', settingsError);\n    }\n\n    // Get user data\n    const {\n      data: userData,\n      error: userError\n    } = await supabase.from('users').select('business_name, name').eq('id', user.id).single();\n    if (userError) {\n      console.error('Error fetching user data:', userError);\n    }\n\n    // Merge options with settings\n    const settings = {\n      ...(widgetSettings || {}),\n      ...options\n    };\n\n    // Generate the embed code\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n    const businessName = (userData === null || userData === void 0 ? void 0 : userData.business_name) || (userData === null || userData === void 0 ? void 0 : userData.name) || 'Our Business';\n    const embedCode = `\n<div id=\"dog-services-widget\"></div>\n<script>\n  (function() {\n    const script = document.createElement('script');\n    script.src = \"${serverUrl}/widget.js\";\n    script.async = true;\n    script.onload = function() {\n      DogServicesWidget.init({\n        apiKey: \"${apiKeys[0].key_value}\",\n        containerId: \"dog-services-widget\",\n        businessName: \"${businessName}\",\n        primaryColor: \"${settings.primary_color || '#4F46E5'}\",\n        secondaryColor: \"${settings.secondary_color || '#10B981'}\",\n        fontFamily: \"${settings.font_family || 'sans-serif'}\",\n        borderRadius: \"${settings.border_radius || '8px'}\",\n        layout: \"${settings.layout || 'default'}\"\n      });\n    };\n    document.head.appendChild(script);\n  })();\n</script>\n`;\n    return embedCode;\n  },\n  // Get services for widget\n  getWidgetServices: async apiKey => {\n    // Validate API key\n    const {\n      data: keyData,\n      error: keyError\n    } = await supabase.from('api_keys').select('business_id').eq('key_value', apiKey).single();\n    if (keyError) {\n      throw new Error('Invalid API key');\n    }\n\n    // Get business services\n    const {\n      data,\n      error\n    } = await supabase.from('services').select('*').eq('provider_id', keyData.business_id);\n    if (error) {\n      throw new Error(error.message);\n    }\n    return data;\n  }\n};\n\n// The primary export is used for compatibility with the existing API service\nexport default {\n  auth,\n  users,\n  pets,\n  services,\n  bookings,\n  payments,\n  widget\n};","map":{"version":3,"names":["supabase","auth","register","userData","_data$user","email","password","name","role","businessName","businessCategory","phone","address","metadata","data","error","signUp","options","Error","message","user","id","profileError","from","update","business_name","business_category","eq","console","addressError","street","city","state","zip_code","zipCode","country","session","login","credentials","_data$user$user_metad","_data$user$user_metad2","signInWithPassword","select","single","user_metadata","isVerified","email_confirmed_at","avatar","avatar_url","logout","signOut","getSession","resetPassword","resetPasswordForEmail","redirectTo","window","location","origin","updatePassword","newPassword","updateUser","users","getCurrentUser","_user$user_metadata","_user$user_metadata2","getUser","businessDescription","business_description","website","updateProfile","profileData","_profileData$address","_profileData$address2","_profileData$address3","_profileData$address4","_profileData$address5","updateData","uploadAvatar","file","fileExt","split","pop","fileName","Date","now","filePath","uploadError","storage","upload","publicUrl","getPublicUrl","updateError","pets","getPets","getPet","createPet","petData","newPet","owner_id","type","breed","age","gender","special_requirements","specialRequirements","insert","emergencyContacts","length","map","contact","pet_id","relationship","contactsError","updatePet","deleteError","delete","deletePet","uploadPetPhoto","photo_url","services","getServices","params","query","providerId","category","getService","service","serviceError","availability","availabilityError","customForm","formError","maybeSingle","code","form_schema","createService","serviceData","newService","provider_id","title","description","price_amount","price","amount","price_currency","currency","duration","location_options","locationOptions","capacity","buffer_time","bufferTime","slot","service_id","day_of_week","dayOfWeek","specific_date","specificDate","start_time","startTime","end_time","endTime","is_available","isAvailable","updateService","existingForm","checkError","insertError","deleteService","bookings","getBookings","_user$user_metadata3","_user$user_metadata4","status","startDate","endDate","gte","lte","order","ascending","getBooking","createBooking","bookingData","_bookingData$notes","_bookingData$notes2","_bookingData$notes3","serviceId","newBooking","client_id","petId","toISOString","total_price_amount","total_price_currency","client_notes","notes","client","provider_notes","provider","internal_notes","internal","custom_form_data","customFormData","updateBooking","undefined","assignedStaff","assigned_staff_id","cancelBooking","reason","_user$user_metadata5","booking","bookingError","cancellationBy","cancellation_reason","cancellation_time","cancellation_by","completeBooking","addReview","bookingId","reviewData","newReview","booking_id","rating","comment","payments","createPaymentIntent","response","fetch","process","env","REACT_APP_API_URL","method","headers","access_token","body","JSON","stringify","json","ok","widget","generateApiKey","keyName","rpc","business_id","key_name","getEmbedCode","apiKeys","keysError","limit","widgetSettings","settingsError","userError","settings","serverUrl","embedCode","key_value","primary_color","secondary_color","font_family","border_radius","layout","getWidgetServices","apiKey","keyData","keyError"],"sources":["/home/toebot/dog-services-saas/frontend/src/services/supabaseService.js"],"sourcesContent":["import supabase from './supabaseClient';\n\n// Auth methods\nexport const auth = {\n  // Register a new user\n  register: async (userData) => {\n    const { email, password, name, role, businessName, businessCategory, phone, address } = userData;\n    \n    // Create metadata\n    const metadata = {\n      name,\n      role: role || 'client',\n      phone,\n      businessName,\n      businessCategory\n    };\n    \n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: metadata\n      }\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Additional profile data\n    if (data?.user?.id) {\n      if (role === 'business' && businessName) {\n        const { error: profileError } = await supabase\n          .from('users')\n          .update({\n            business_name: businessName,\n            business_category: businessCategory\n          })\n          .eq('id', data.user.id);\n          \n        if (profileError) {\n          console.error('Error updating business profile:', profileError);\n        }\n      }\n      \n      if (address) {\n        const { error: addressError } = await supabase\n          .from('users')\n          .update({\n            street: address.street,\n            city: address.city,\n            state: address.state,\n            zip_code: address.zipCode,\n            country: address.country\n          })\n          .eq('id', data.user.id);\n          \n        if (addressError) {\n          console.error('Error updating address:', addressError);\n        }\n      }\n    }\n    \n    return { \n      user: {\n        id: data.user.id,\n        name,\n        email: data.user.email,\n        role: role || 'client',\n      },\n      session: data.session\n    };\n  },\n  \n  // Sign in with email and password\n  login: async (credentials) => {\n    const { email, password } = credentials;\n    \n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Get user profile data\n    const { data: userData, error: profileError } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', data.user.id)\n      .single();\n      \n    if (profileError) {\n      console.error('Error fetching user profile:', profileError);\n    }\n    \n    return {\n      user: {\n        id: data.user.id,\n        name: userData?.name || data.user.user_metadata?.name,\n        email: data.user.email,\n        role: userData?.role || data.user.user_metadata?.role || 'client',\n        isVerified: data.user.email_confirmed_at ? true : false,\n        avatar: userData?.avatar_url,\n        businessName: userData?.business_name\n      },\n      session: data.session\n    };\n  },\n  \n  // Sign out\n  logout: async () => {\n    const { error } = await supabase.auth.signOut();\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Get the current session\n  getSession: async () => {\n    const { data, error } = await supabase.auth.getSession();\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data.session;\n  },\n  \n  // Reset password\n  resetPassword: async (email) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/reset-password`\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Update password\n  updatePassword: async (newPassword) => {\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  }\n};\n\n// User methods\nexport const users = {\n  // Get current user profile\n  getCurrentUser: async () => {\n    // First get the auth user\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Then get the profile data\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', user.id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return {\n      id: user.id,\n      name: data.name || user.user_metadata?.name,\n      email: user.email,\n      role: data.role || user.user_metadata?.role || 'client',\n      phone: data.phone,\n      avatar: data.avatar_url,\n      address: {\n        street: data.street,\n        city: data.city,\n        state: data.state,\n        zipCode: data.zip_code,\n        country: data.country\n      },\n      businessName: data.business_name,\n      businessCategory: data.business_category,\n      businessDescription: data.business_description,\n      website: data.website\n    };\n  },\n  \n  // Update user profile\n  updateProfile: async (profileData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const updateData = {\n      name: profileData.name,\n      phone: profileData.phone,\n      street: profileData.address?.street,\n      city: profileData.address?.city,\n      state: profileData.address?.state,\n      zip_code: profileData.address?.zipCode,\n      country: profileData.address?.country\n    };\n    \n    // Add business fields if needed\n    if (profileData.businessName) {\n      updateData.business_name = profileData.businessName;\n      updateData.business_category = profileData.businessCategory;\n      updateData.business_description = profileData.businessDescription;\n      updateData.website = profileData.website;\n    }\n    \n    const { data, error } = await supabase\n      .from('users')\n      .update(updateData)\n      .eq('id', user.id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Format the response to match the existing API format\n    return {\n      user: {\n        id: user.id,\n        name: data.name,\n        email: user.email,\n        role: data.role,\n        phone: data.phone,\n        avatar: data.avatar_url,\n        address: {\n          street: data.street,\n          city: data.city,\n          state: data.state,\n          zipCode: data.zip_code,\n          country: data.country\n        },\n        businessName: data.business_name,\n        businessCategory: data.business_category,\n        businessDescription: data.business_description,\n        website: data.website\n      }\n    };\n  },\n  \n  // Upload avatar\n  uploadAvatar: async (file) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${user.id}/${Date.now()}.${fileExt}`;\n    const filePath = `avatars/${fileName}`;\n    \n    // Upload to Supabase Storage\n    const { error: uploadError } = await supabase.storage\n      .from('profiles')\n      .upload(filePath, file);\n      \n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n    \n    // Get the public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('profiles')\n      .getPublicUrl(filePath);\n      \n    // Update user profile with avatar URL\n    const { error: updateError } = await supabase\n      .from('users')\n      .update({ avatar_url: publicUrl })\n      .eq('id', user.id);\n      \n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    \n    return publicUrl;\n  }\n};\n\n// Pet methods\nexport const pets = {\n  // Get all pets for current user\n  getPets: async () => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .select('*')\n      .eq('owner_id', user.id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific pet\n  getPet: async (id) => {\n    const { data, error } = await supabase\n      .from('pets')\n      .select(`\n        *,\n        pet_emergency_contacts(*)\n      `)\n      .eq('id', id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Create a new pet\n  createPet: async (petData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const newPet = {\n      owner_id: user.id,\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .insert(newPet)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // If emergency contacts were provided, add them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: data.id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      \n      const { error: contactsError } = await supabase\n        .from('pet_emergency_contacts')\n        .insert(emergencyContacts);\n        \n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Update an existing pet\n  updatePet: async (id, petData) => {\n    // Format data for Supabase\n    const updateData = {\n      name: petData.name,\n      type: petData.type,\n      breed: petData.breed,\n      age: petData.age,\n      gender: petData.gender,\n      special_requirements: petData.specialRequirements\n    };\n    \n    const { data, error } = await supabase\n      .from('pets')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // If emergency contacts were provided, update them\n    if (petData.emergencyContacts && petData.emergencyContacts.length > 0) {\n      // First delete existing contacts\n      const { error: deleteError } = await supabase\n        .from('pet_emergency_contacts')\n        .delete()\n        .eq('pet_id', id);\n        \n      if (deleteError) {\n        console.error('Error deleting emergency contacts:', deleteError);\n      }\n      \n      // Then add new ones\n      const emergencyContacts = petData.emergencyContacts.map(contact => ({\n        pet_id: id,\n        name: contact.name,\n        phone: contact.phone,\n        email: contact.email,\n        relationship: contact.relationship\n      }));\n      \n      const { error: contactsError } = await supabase\n        .from('pet_emergency_contacts')\n        .insert(emergencyContacts);\n        \n      if (contactsError) {\n        console.error('Error adding emergency contacts:', contactsError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Delete a pet\n  deletePet: async (id) => {\n    const { error } = await supabase\n      .from('pets')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  },\n  \n  // Upload pet photo\n  uploadPetPhoto: async (id, file) => {\n    // Create a unique filename\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${id}/${Date.now()}.${fileExt}`;\n    const filePath = `pets/${fileName}`;\n    \n    // Upload to Supabase Storage\n    const { error: uploadError } = await supabase.storage\n      .from('pet-photos')\n      .upload(filePath, file);\n      \n    if (uploadError) {\n      throw new Error(uploadError.message);\n    }\n    \n    // Get the public URL\n    const { data: { publicUrl } } = supabase.storage\n      .from('pet-photos')\n      .getPublicUrl(filePath);\n      \n    // Update pet with photo URL\n    const { error: updateError } = await supabase\n      .from('pets')\n      .update({ photo_url: publicUrl })\n      .eq('id', id);\n      \n    if (updateError) {\n      throw new Error(updateError.message);\n    }\n    \n    return publicUrl;\n  }\n};\n\n// Service methods\nexport const services = {\n  // Get all services with optional filters\n  getServices: async (params) => {\n    let query = supabase\n      .from('services')\n      .select('*');\n      \n    // Apply filters if provided\n    if (params) {\n      if (params.providerId) {\n        query = query.eq('provider_id', params.providerId);\n      }\n      \n      if (params.category) {\n        query = query.eq('category', params.category);\n      }\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific service with all related data\n  getService: async (id) => {\n    const { data: service, error: serviceError } = await supabase\n      .from('services')\n      .select('*')\n      .eq('id', id)\n      .single();\n      \n    if (serviceError) {\n      throw new Error(serviceError.message);\n    }\n    \n    // Get availability\n    const { data: availability, error: availabilityError } = await supabase\n      .from('service_availability')\n      .select('*')\n      .eq('service_id', id);\n      \n    if (availabilityError) {\n      console.error('Error fetching availability:', availabilityError);\n    }\n    \n    // Get custom form schema if exists\n    const { data: customForm, error: formError } = await supabase\n      .from('service_custom_forms')\n      .select('*')\n      .eq('service_id', id)\n      .maybeSingle();\n      \n    if (formError && formError.code !== 'PGRST116') {\n      console.error('Error fetching custom form:', formError);\n    }\n    \n    return {\n      ...service,\n      availability: availability || [],\n      customForm: customForm ? customForm.form_schema : null\n    };\n  },\n  \n  // Create a new service\n  createService: async (serviceData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Format data for Supabase\n    const newService = {\n      provider_id: user.id,\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    \n    const { data, error } = await supabase\n      .from('services')\n      .insert(newService)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Add availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      const availability = serviceData.availability.map(slot => ({\n        service_id: data.id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      \n      const { error: availabilityError } = await supabase\n        .from('service_availability')\n        .insert(availability);\n        \n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n    \n    // Add custom form if provided\n    if (serviceData.customForm) {\n      const { error: formError } = await supabase\n        .from('service_custom_forms')\n        .insert({\n          service_id: data.id,\n          form_schema: serviceData.customForm\n        });\n        \n      if (formError) {\n        console.error('Error adding custom form:', formError);\n      }\n    }\n    \n    return data;\n  },\n  \n  // Update an existing service\n  updateService: async (id, serviceData) => {\n    // Format data for Supabase\n    const updateData = {\n      title: serviceData.title,\n      description: serviceData.description,\n      category: serviceData.category,\n      price_amount: serviceData.price.amount,\n      price_currency: serviceData.price.currency || 'USD',\n      duration: serviceData.duration,\n      location_options: serviceData.locationOptions,\n      capacity: serviceData.capacity || 1,\n      buffer_time: serviceData.bufferTime || 0\n    };\n    \n    const { data, error } = await supabase\n      .from('services')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    // Update availability if provided\n    if (serviceData.availability && serviceData.availability.length > 0) {\n      // First delete existing availability\n      const { error: deleteError } = await supabase\n        .from('service_availability')\n        .delete()\n        .eq('service_id', id);\n        \n      if (deleteError) {\n        console.error('Error deleting availability:', deleteError);\n      }\n      \n      // Then add new availability\n      const availability = serviceData.availability.map(slot => ({\n        service_id: id,\n        day_of_week: slot.dayOfWeek,\n        specific_date: slot.specificDate,\n        start_time: slot.startTime,\n        end_time: slot.endTime,\n        is_available: slot.isAvailable !== false\n      }));\n      \n      const { error: availabilityError } = await supabase\n        .from('service_availability')\n        .insert(availability);\n        \n      if (availabilityError) {\n        console.error('Error adding availability:', availabilityError);\n      }\n    }\n    \n    // Update custom form if provided\n    if (serviceData.customForm) {\n      // Check if form already exists\n      const { data: existingForm, error: checkError } = await supabase\n        .from('service_custom_forms')\n        .select('id')\n        .eq('service_id', id)\n        .maybeSingle();\n        \n      if (checkError && checkError.code !== 'PGRST116') {\n        console.error('Error checking custom form:', checkError);\n      }\n      \n      if (existingForm) {\n        // Update existing form\n        const { error: updateError } = await supabase\n          .from('service_custom_forms')\n          .update({ form_schema: serviceData.customForm })\n          .eq('id', existingForm.id);\n          \n        if (updateError) {\n          console.error('Error updating custom form:', updateError);\n        }\n      } else {\n        // Insert new form\n        const { error: insertError } = await supabase\n          .from('service_custom_forms')\n          .insert({\n            service_id: id,\n            form_schema: serviceData.customForm\n          });\n          \n        if (insertError) {\n          console.error('Error adding custom form:', insertError);\n        }\n      }\n    }\n    \n    return data;\n  },\n  \n  // Delete a service\n  deleteService: async (id) => {\n    const { error } = await supabase\n      .from('services')\n      .delete()\n      .eq('id', id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return true;\n  }\n};\n\n// Booking methods\nexport const bookings = {\n  // Get all bookings with filters\n  getBookings: async (params) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    let query = supabase\n      .from('bookings')\n      .select(`\n        *,\n        services(title, description, price_amount, price_currency),\n        pets(name, type, breed)\n      `);\n      \n    // Apply filters based on user role and params\n    if (user.user_metadata?.role === 'client') {\n      query = query.eq('client_id', user.id);\n    } else if (user.user_metadata?.role === 'business') {\n      query = query.eq('provider_id', user.id);\n    }\n    \n    if (params) {\n      if (params.status) {\n        query = query.eq('status', params.status);\n      }\n      \n      if (params.startDate && params.endDate) {\n        query = query\n          .gte('start_time', params.startDate)\n          .lte('start_time', params.endDate);\n      }\n    }\n    \n    // Order by start time, newest first\n    query = query.order('start_time', { ascending: false });\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get a specific booking\n  getBooking: async (id) => {\n    const { data, error } = await supabase\n      .from('bookings')\n      .select(`\n        *,\n        services(*),\n        reviews(*)\n      `)\n      .eq('id', id)\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Create a new booking\n  createBooking: async (bookingData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get service to verify provider and price\n    const { data: service, error: serviceError } = await supabase\n      .from('services')\n      .select('provider_id, price_amount, price_currency')\n      .eq('id', bookingData.serviceId)\n      .single();\n      \n    if (serviceError) {\n      throw new Error('Service not found');\n    }\n    \n    // Format booking data for Supabase\n    const newBooking = {\n      service_id: bookingData.serviceId,\n      provider_id: bookingData.providerId || service.provider_id,\n      client_id: user.id,\n      pet_id: bookingData.petId,\n      start_time: new Date(bookingData.startTime).toISOString(),\n      end_time: new Date(bookingData.endTime).toISOString(),\n      location: bookingData.location,\n      total_price_amount: service.price_amount,\n      total_price_currency: service.price_currency || 'USD',\n      client_notes: bookingData.notes?.client || null,\n      provider_notes: bookingData.notes?.provider || null,\n      internal_notes: bookingData.notes?.internal || null,\n      custom_form_data: bookingData.customFormData || null,\n      status: 'pending'\n    };\n    \n    const { data, error } = await supabase\n      .from('bookings')\n      .insert(newBooking)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Update an existing booking\n  updateBooking: async (id, bookingData) => {\n    // Format data for Supabase\n    const updateData = {};\n    \n    if (bookingData.startTime) {\n      updateData.start_time = new Date(bookingData.startTime).toISOString();\n    }\n    \n    if (bookingData.endTime) {\n      updateData.end_time = new Date(bookingData.endTime).toISOString();\n    }\n    \n    if (bookingData.status) {\n      updateData.status = bookingData.status;\n    }\n    \n    if (bookingData.notes) {\n      if (bookingData.notes.client !== undefined) {\n        updateData.client_notes = bookingData.notes.client;\n      }\n      \n      if (bookingData.notes.provider !== undefined) {\n        updateData.provider_notes = bookingData.notes.provider;\n      }\n      \n      if (bookingData.notes.internal !== undefined) {\n        updateData.internal_notes = bookingData.notes.internal;\n      }\n    }\n    \n    if (bookingData.assignedStaff) {\n      updateData.assigned_staff_id = bookingData.assignedStaff;\n    }\n    \n    const { data, error } = await supabase\n      .from('bookings')\n      .update(updateData)\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Cancel a booking\n  cancelBooking: async (id, reason) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get booking to determine who is cancelling\n    const { data: booking, error: bookingError } = await supabase\n      .from('bookings')\n      .select('client_id, provider_id')\n      .eq('id', id)\n      .single();\n      \n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n    \n    // Determine who is cancelling\n    let cancellationBy;\n    if (booking.client_id === user.id) {\n      cancellationBy = 'client';\n    } else if (booking.provider_id === user.id) {\n      cancellationBy = 'provider';\n    } else if (user.user_metadata?.role === 'admin') {\n      cancellationBy = 'admin';\n    } else {\n      throw new Error('Not authorized to cancel this booking');\n    }\n    \n    // Update booking\n    const { data, error } = await supabase\n      .from('bookings')\n      .update({\n        status: 'cancelled',\n        cancellation_reason: reason || 'No reason provided',\n        cancellation_time: new Date().toISOString(),\n        cancellation_by: cancellationBy\n      })\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Mark a booking as completed\n  completeBooking: async (id) => {\n    const { data, error } = await supabase\n      .from('bookings')\n      .update({ status: 'completed' })\n      .eq('id', id)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Add a review to a booking\n  addReview: async (bookingId, reviewData) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get booking to verify client and provider\n    const { data: booking, error: bookingError } = await supabase\n      .from('bookings')\n      .select('client_id, provider_id, status')\n      .eq('id', bookingId)\n      .single();\n      \n    if (bookingError) {\n      throw new Error('Booking not found');\n    }\n    \n    // Verify client is adding the review\n    if (booking.client_id !== user.id) {\n      throw new Error('Not authorized to review this booking');\n    }\n    \n    // Verify booking is completed\n    if (booking.status !== 'completed') {\n      throw new Error('Can only review completed bookings');\n    }\n    \n    // Create the review\n    const newReview = {\n      booking_id: bookingId,\n      client_id: user.id,\n      provider_id: booking.provider_id,\n      rating: reviewData.rating,\n      comment: reviewData.comment || ''\n    };\n    \n    const { data, error } = await supabase\n      .from('reviews')\n      .insert(newReview)\n      .select()\n      .single();\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  }\n};\n\n// Payment methods\nexport const payments = {\n  // Create a payment intent\n  createPaymentIntent: async (bookingId) => {\n    // For now, we'll just make an API call to the existing endpoint\n    // This would ideally be replaced with a direct Supabase Edge Function call\n    \n    const { data: { session } } = await supabase.auth.getSession();\n    \n    if (!session) {\n      throw new Error('Not authenticated');\n    }\n    \n    const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}/payments/create-intent`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${session.access_token}`\n      },\n      body: JSON.stringify({ bookingId })\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.error || 'Failed to create payment intent');\n    }\n    \n    return data;\n  }\n};\n\n// Widget integration methods\nexport const widget = {\n  // Generate an API key\n  generateApiKey: async (keyName) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Call the RPC function to generate an API key\n    const { data, error } = await supabase.rpc('generate_api_key', {\n      business_id: user.id,\n      key_name: keyName || 'Widget API Key'\n    });\n    \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  },\n  \n  // Get embed code\n  getEmbedCode: async (options = {}) => {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      throw new Error('Not authenticated');\n    }\n    \n    // Get API keys\n    const { data: apiKeys, error: keysError } = await supabase\n      .from('api_keys')\n      .select('key_value')\n      .eq('business_id', user.id)\n      .limit(1);\n      \n    if (keysError || !apiKeys || apiKeys.length === 0) {\n      throw new Error('API key not found. Generate one first.');\n    }\n    \n    // Get widget settings\n    const { data: widgetSettings, error: settingsError } = await supabase\n      .from('widget_settings')\n      .select('*')\n      .eq('business_id', user.id)\n      .maybeSingle();\n      \n    if (settingsError && settingsError.code !== 'PGRST116') {\n      console.error('Error fetching widget settings:', settingsError);\n    }\n    \n    // Get user data\n    const { data: userData, error: userError } = await supabase\n      .from('users')\n      .select('business_name, name')\n      .eq('id', user.id)\n      .single();\n      \n    if (userError) {\n      console.error('Error fetching user data:', userError);\n    }\n    \n    // Merge options with settings\n    const settings = {\n      ...(widgetSettings || {}),\n      ...options\n    };\n    \n    // Generate the embed code\n    const serverUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n    const businessName = userData?.business_name || userData?.name || 'Our Business';\n    \n    const embedCode = `\n<div id=\"dog-services-widget\"></div>\n<script>\n  (function() {\n    const script = document.createElement('script');\n    script.src = \"${serverUrl}/widget.js\";\n    script.async = true;\n    script.onload = function() {\n      DogServicesWidget.init({\n        apiKey: \"${apiKeys[0].key_value}\",\n        containerId: \"dog-services-widget\",\n        businessName: \"${businessName}\",\n        primaryColor: \"${settings.primary_color || '#4F46E5'}\",\n        secondaryColor: \"${settings.secondary_color || '#10B981'}\",\n        fontFamily: \"${settings.font_family || 'sans-serif'}\",\n        borderRadius: \"${settings.border_radius || '8px'}\",\n        layout: \"${settings.layout || 'default'}\"\n      });\n    };\n    document.head.appendChild(script);\n  })();\n</script>\n`;\n    \n    return embedCode;\n  },\n  \n  // Get services for widget\n  getWidgetServices: async (apiKey) => {\n    // Validate API key\n    const { data: keyData, error: keyError } = await supabase\n      .from('api_keys')\n      .select('business_id')\n      .eq('key_value', apiKey)\n      .single();\n      \n    if (keyError) {\n      throw new Error('Invalid API key');\n    }\n    \n    // Get business services\n    const { data, error } = await supabase\n      .from('services')\n      .select('*')\n      .eq('provider_id', keyData.business_id);\n      \n    if (error) {\n      throw new Error(error.message);\n    }\n    \n    return data;\n  }\n};\n\n// The primary export is used for compatibility with the existing API service\nexport default {\n  auth,\n  users,\n  pets,\n  services,\n  bookings,\n  payments,\n  widget\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}