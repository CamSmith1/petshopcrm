{"ast":null,"code":"import React,{useState,useEffect}from'react';import{toast}from'react-toastify';import{format,startOfWeek,endOfWeek,eachDayOfInterval,parseISO,formatISO,addWeeks,subWeeks,isSameDay}from'date-fns';import{useBusiness}from'../context/BusinessContext';// Components\nimport PageHeader from'../components/common/PageHeader';import Button from'../components/common/Button';import LoadingSpinner from'../components/common/LoadingSpinner';import Modal from'../components/common/Modal';import EmptyState from'../components/common/EmptyState';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const StaffScheduling=()=>{// State\nconst[isLoading,setIsLoading]=useState(true);const[staff,setStaff]=useState([]);const[selectedStaff,setSelectedStaff]=useState(null);const[currentWeek,setCurrentWeek]=useState(new Date());const[weekDays,setWeekDays]=useState([]);const[schedules,setSchedules]=useState({});const[showAddModal,setShowAddModal]=useState(false);const[showEditModal,setShowEditModal]=useState(false);const[currentSchedule,setCurrentSchedule]=useState(null);const[scheduleForm,setScheduleForm]=useState({staffId:'',date:'',startTime:'09:00',endTime:'17:00',isRecurring:false,recurrencePattern:'weekly',maxBookings:8,breakTimes:[]});const[showBreakModal,setShowBreakModal]=useState(false);const[breakForm,setBreakForm]=useState({startTime:'12:00',endTime:'13:00',description:'Lunch Break'});// Context\nconst{fetchStaff,businessLoading}=useBusiness();// Initialize and load data\nuseEffect(()=>{const loadData=async()=>{setIsLoading(true);try{// Fetch staff\nconst staffData=await fetchStaff();setStaff(staffData);if(staffData.length>0){setSelectedStaff(staffData[0]._id);}// Generate week days\ngenerateWeekDays(currentWeek);// Fetch schedules (this would connect to your API)\nawait fetchSchedules();}catch(error){console.error('Error loading scheduling data:',error);toast.error('Failed to load scheduling data');}finally{setIsLoading(false);}};loadData();},[fetchStaff]);// Generate days for the current week view\nconst generateWeekDays=dateInWeek=>{const start=startOfWeek(dateInWeek,{weekStartsOn:1});// Monday\nconst end=endOfWeek(dateInWeek,{weekStartsOn:1});// Sunday\nconst days=eachDayOfInterval({start,end});setWeekDays(days);};// Navigate to previous week\nconst goToPreviousWeek=()=>{const prevWeek=subWeeks(currentWeek,1);setCurrentWeek(prevWeek);generateWeekDays(prevWeek);fetchSchedules(prevWeek);};// Navigate to next week\nconst goToNextWeek=()=>{const nextWeek=addWeeks(currentWeek,1);setCurrentWeek(nextWeek);generateWeekDays(nextWeek);fetchSchedules(nextWeek);};// Fetch schedules for the selected week and staff\nconst fetchSchedules=async function(){let week=arguments.length>0&&arguments[0]!==undefined?arguments[0]:currentWeek;// This would be an API call in a real application\n// For now, we'll use mock data\n// Example mock data structure\nconst mockSchedules={// Staff ID -> Date -> Schedule\n'staff1':{'2025-03-04':{startTime:'09:00',endTime:'17:00',maxBookings:8,breakTimes:[{startTime:'12:00',endTime:'13:00',description:'Lunch Break'}]},'2025-03-05':{startTime:'10:00',endTime:'18:00',maxBookings:10,breakTimes:[{startTime:'13:00',endTime:'14:00',description:'Lunch Break'}]}},'staff2':{'2025-03-04':{startTime:'08:00',endTime:'16:00',maxBookings:6,breakTimes:[]}}};setSchedules(mockSchedules);};// Handle staff change\nconst handleStaffChange=staffId=>{setSelectedStaff(staffId);};// Handle schedule form input change\nconst handleScheduleFormChange=e=>{const{name,value,type,checked}=e.target;setScheduleForm({...scheduleForm,[name]:type==='checkbox'?checked:value});};// Handle break form input change\nconst handleBreakFormChange=e=>{const{name,value}=e.target;setBreakForm({...breakForm,[name]:value});};// Add a break to the schedule\nconst addBreak=()=>{// Validate break times\nif(breakForm.startTime>=breakForm.endTime){toast.error('Break end time must be after start time');return;}const updatedBreaks=[...scheduleForm.breakTimes,{...breakForm}];setScheduleForm({...scheduleForm,breakTimes:updatedBreaks});setBreakForm({startTime:'12:00',endTime:'13:00',description:'Break'});setShowBreakModal(false);};// Remove a break from the schedule\nconst removeBreak=index=>{const updatedBreaks=[...scheduleForm.breakTimes];updatedBreaks.splice(index,1);setScheduleForm({...scheduleForm,breakTimes:updatedBreaks});};// Open the add schedule modal\nconst handleOpenAddModal=date=>{const formattedDate=formatISO(date,{representation:'date'});setScheduleForm({staffId:selectedStaff,date:formattedDate,startTime:'09:00',endTime:'17:00',isRecurring:false,recurrencePattern:'weekly',maxBookings:8,breakTimes:[]});setShowAddModal(true);};// Open the edit schedule modal\nconst handleOpenEditModal=(staffId,date,schedule)=>{setCurrentSchedule({staffId,date});setScheduleForm({staffId:staffId,date:date,startTime:schedule.startTime,endTime:schedule.endTime,isRecurring:false,recurrencePattern:'weekly',maxBookings:schedule.maxBookings,breakTimes:[...schedule.breakTimes]});setShowEditModal(true);};// Save a new schedule\nconst handleSaveSchedule=async()=>{try{// Validate form\nif(scheduleForm.startTime>=scheduleForm.endTime){toast.error('End time must be after start time');return;}// This would be an API call in a real application\n// For now, we'll update our local state\nconst{staffId,date}=scheduleForm;const updatedSchedules={...schedules};if(!updatedSchedules[staffId]){updatedSchedules[staffId]={};}updatedSchedules[staffId][date]={startTime:scheduleForm.startTime,endTime:scheduleForm.endTime,maxBookings:scheduleForm.maxBookings,breakTimes:[...scheduleForm.breakTimes]};setSchedules(updatedSchedules);toast.success('Schedule saved successfully');setShowAddModal(false);}catch(error){console.error('Error saving schedule:',error);toast.error('Failed to save schedule');}};// Update an existing schedule\nconst handleUpdateSchedule=async()=>{try{// Validate form\nif(scheduleForm.startTime>=scheduleForm.endTime){toast.error('End time must be after start time');return;}// This would be an API call in a real application\n// For now, we'll update our local state\nconst{staffId,date}=currentSchedule;const updatedSchedules={...schedules};updatedSchedules[staffId][date]={startTime:scheduleForm.startTime,endTime:scheduleForm.endTime,maxBookings:scheduleForm.maxBookings,breakTimes:[...scheduleForm.breakTimes]};setSchedules(updatedSchedules);toast.success('Schedule updated successfully');setShowEditModal(false);}catch(error){console.error('Error updating schedule:',error);toast.error('Failed to update schedule');}};// Delete a schedule\nconst handleDeleteSchedule=async()=>{try{// This would be an API call in a real application\n// For now, we'll update our local state\nconst{staffId,date}=currentSchedule;const updatedSchedules={...schedules};delete updatedSchedules[staffId][date];setSchedules(updatedSchedules);toast.success('Schedule deleted successfully');setShowEditModal(false);}catch(error){console.error('Error deleting schedule:',error);toast.error('Failed to delete schedule');}};// Get the staff name by ID\nconst getStaffName=staffId=>{const staffMember=staff.find(s=>s._id===staffId);return staffMember?staffMember.name:'Unknown Staff';};// Check if there's a schedule for a specific day\nconst getScheduleForDay=(staffId,date)=>{const formattedDate=formatISO(date,{representation:'date'});if(schedules[staffId]&&schedules[staffId][formattedDate]){return schedules[staffId][formattedDate];}return null;};// Render time slots for a day\nconst renderTimeSlots=day=>{const schedule=getScheduleForDay(selectedStaff,day);if(!schedule){return/*#__PURE__*/_jsx(\"div\",{className:\"empty-schedule\",children:/*#__PURE__*/_jsx(Button,{small:true,secondary:true,onClick:()=>handleOpenAddModal(day),children:\"+ Add Hours\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"schedule-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"schedule-time\",children:[schedule.startTime,\" - \",schedule.endTime]}),/*#__PURE__*/_jsxs(\"div\",{className:\"schedule-capacity\",children:[\"Capacity: \",schedule.maxBookings,\" bookings\"]}),schedule.breakTimes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"schedule-breaks\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"break-title\",children:\"Breaks:\"}),schedule.breakTimes.map((breakTime,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"break-time\",children:[breakTime.description,\": \",breakTime.startTime,\" - \",breakTime.endTime]},index))]}),/*#__PURE__*/_jsx(Button,{small:true,secondary:true,onClick:()=>handleOpenEditModal(selectedStaff,formatISO(day,{representation:'date'}),schedule),children:\"Edit\"})]});};// If loading\nif(isLoading||businessLoading){return/*#__PURE__*/_jsx(LoadingSpinner,{text:\"Loading staff scheduling...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"staff-scheduling-page\",children:[/*#__PURE__*/_jsx(PageHeader,{title:\"Staff Scheduling\",description:\"Manage your staff's available working hours and capacity.\"}),staff.length===0?/*#__PURE__*/_jsx(EmptyState,{title:\"No Staff Members Yet\",description:\"Add staff members to start scheduling.\",actionButton:/*#__PURE__*/_jsx(Button,{to:\"/staff\",primary:true,children:\"Manage Staff\"}),icon:\"\\uD83D\\uDC65\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"scheduling-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"staff-selector\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"staff-select\",children:\"Select Staff Member:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"staff-select\",value:selectedStaff||'',onChange:e=>handleStaffChange(e.target.value),children:staff.map(staffMember=>/*#__PURE__*/_jsx(\"option\",{value:staffMember._id,children:staffMember.name},staffMember._id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"week-navigation\",children:[/*#__PURE__*/_jsx(Button,{secondary:true,small:true,onClick:goToPreviousWeek,leftIcon:\"\\u25C0\",children:\"Previous\"}),/*#__PURE__*/_jsxs(\"h3\",{className:\"current-week\",children:[format(weekDays[0],'MMM d'),\" - \",format(weekDays[weekDays.length-1],'MMM d, yyyy')]}),/*#__PURE__*/_jsx(Button,{secondary:true,small:true,onClick:goToNextWeek,rightIcon:\"\\u25B6\",children:\"Next\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"schedule-grid\",children:weekDays.map(day=>/*#__PURE__*/_jsxs(\"div\",{className:\"day-column\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"day-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"day-name\",children:format(day,'EEEE')}),/*#__PURE__*/_jsx(\"div\",{className:\"day-date\",children:format(day,'MMM d')})]}),/*#__PURE__*/_jsx(\"div\",{className:\"day-schedule\",children:renderTimeSlots(day)})]},day.toString()))})]}),/*#__PURE__*/_jsx(Modal,{show:showAddModal,onClose:()=>setShowAddModal(false),title:`Add Schedule for ${getStaffName(scheduleForm.staffId)}`,children:/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-text\",children:scheduleForm.date?format(parseISO(scheduleForm.date),'EEEE, MMMM d, yyyy'):''})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"startTime\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"startTime\",name:\"startTime\",value:scheduleForm.startTime,onChange:handleScheduleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"endTime\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"endTime\",name:\"endTime\",value:scheduleForm.endTime,onChange:handleScheduleFormChange})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"maxBookings\",children:\"Maximum Bookings\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"maxBookings\",name:\"maxBookings\",min:\"1\",value:scheduleForm.maxBookings,onChange:handleScheduleFormChange}),/*#__PURE__*/_jsx(\"div\",{className:\"form-help\",children:\"Maximum number of appointments this staff member can handle on this day\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",name:\"isRecurring\",checked:scheduleForm.isRecurring,onChange:handleScheduleFormChange}),\"Set as recurring schedule\"]})}),scheduleForm.isRecurring&&/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"recurrencePattern\",children:\"Recurrence Pattern\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"recurrencePattern\",name:\"recurrencePattern\",value:scheduleForm.recurrencePattern,onChange:handleScheduleFormChange,children:[/*#__PURE__*/_jsx(\"option\",{value:\"daily\",children:\"Daily\"}),/*#__PURE__*/_jsx(\"option\",{value:\"weekly\",children:\"Weekly (same day each week)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"biweekly\",children:\"Bi-weekly (every 2 weeks)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"monthly\",children:\"Monthly (same date each month)\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Breaks\"}),scheduleForm.breakTimes.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"no-breaks-message\",children:\"No breaks scheduled\"}):/*#__PURE__*/_jsx(\"div\",{className:\"breaks-list\",children:scheduleForm.breakTimes.map((breakTime,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"break-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"break-info\",children:[/*#__PURE__*/_jsx(\"strong\",{children:breakTime.description}),\": \",breakTime.startTime,\" - \",breakTime.endTime]}),/*#__PURE__*/_jsx(Button,{small:true,danger:true,onClick:()=>removeBreak(index),children:\"Remove\"})]},index))}),/*#__PURE__*/_jsx(Button,{secondary:true,small:true,type:\"button\",onClick:()=>setShowBreakModal(true),children:\"+ Add Break\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(Button,{secondary:true,onClick:()=>setShowAddModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{primary:true,onClick:handleSaveSchedule,children:\"Save Schedule\"})]})]})}),/*#__PURE__*/_jsx(Modal,{show:showEditModal,onClose:()=>setShowEditModal(false),title:`Edit Schedule for ${currentSchedule?getStaffName(currentSchedule.staffId):''}`,children:currentSchedule&&/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-text\",children:currentSchedule.date?format(parseISO(currentSchedule.date),'EEEE, MMMM d, yyyy'):''})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-startTime\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"edit-startTime\",name:\"startTime\",value:scheduleForm.startTime,onChange:handleScheduleFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-endTime\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"edit-endTime\",name:\"endTime\",value:scheduleForm.endTime,onChange:handleScheduleFormChange})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"edit-maxBookings\",children:\"Maximum Bookings\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"edit-maxBookings\",name:\"maxBookings\",min:\"1\",value:scheduleForm.maxBookings,onChange:handleScheduleFormChange}),/*#__PURE__*/_jsx(\"div\",{className:\"form-help\",children:\"Maximum number of appointments this staff member can handle on this day\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Breaks\"}),scheduleForm.breakTimes.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"no-breaks-message\",children:\"No breaks scheduled\"}):/*#__PURE__*/_jsx(\"div\",{className:\"breaks-list\",children:scheduleForm.breakTimes.map((breakTime,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"break-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"break-info\",children:[/*#__PURE__*/_jsx(\"strong\",{children:breakTime.description}),\": \",breakTime.startTime,\" - \",breakTime.endTime]}),/*#__PURE__*/_jsx(Button,{small:true,danger:true,onClick:()=>removeBreak(index),children:\"Remove\"})]},index))}),/*#__PURE__*/_jsx(Button,{secondary:true,small:true,type:\"button\",onClick:()=>setShowBreakModal(true),children:\"+ Add Break\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(Button,{danger:true,onClick:handleDeleteSchedule,children:\"Delete\"}),/*#__PURE__*/_jsx(Button,{secondary:true,onClick:()=>setShowEditModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{primary:true,onClick:handleUpdateSchedule,children:\"Update Schedule\"})]})]})}),/*#__PURE__*/_jsx(Modal,{show:showBreakModal,onClose:()=>setShowBreakModal(false),title:\"Add Break\",children:/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"break-description\",children:\"Description\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"break-description\",name:\"description\",value:breakForm.description,onChange:handleBreakFormChange,placeholder:\"e.g., Lunch Break\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"break-startTime\",children:\"Start Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"break-startTime\",name:\"startTime\",value:breakForm.startTime,onChange:handleBreakFormChange})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"break-endTime\",children:\"End Time\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",id:\"break-endTime\",name:\"endTime\",value:breakForm.endTime,onChange:handleBreakFormChange})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-actions\",children:[/*#__PURE__*/_jsx(Button,{secondary:true,onClick:()=>setShowBreakModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{primary:true,onClick:addBreak,children:\"Add Break\"})]})]})})]});};export default StaffScheduling;","map":{"version":3,"names":["React","useState","useEffect","toast","format","startOfWeek","endOfWeek","eachDayOfInterval","parseISO","formatISO","addWeeks","subWeeks","isSameDay","useBusiness","PageHeader","Button","LoadingSpinner","Modal","EmptyState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","StaffScheduling","isLoading","setIsLoading","staff","setStaff","selectedStaff","setSelectedStaff","currentWeek","setCurrentWeek","Date","weekDays","setWeekDays","schedules","setSchedules","showAddModal","setShowAddModal","showEditModal","setShowEditModal","currentSchedule","setCurrentSchedule","scheduleForm","setScheduleForm","staffId","date","startTime","endTime","isRecurring","recurrencePattern","maxBookings","breakTimes","showBreakModal","setShowBreakModal","breakForm","setBreakForm","description","fetchStaff","businessLoading","loadData","staffData","length","_id","generateWeekDays","fetchSchedules","error","console","dateInWeek","start","weekStartsOn","end","days","goToPreviousWeek","prevWeek","goToNextWeek","nextWeek","week","arguments","undefined","mockSchedules","handleStaffChange","handleScheduleFormChange","e","name","value","type","checked","target","handleBreakFormChange","addBreak","updatedBreaks","removeBreak","index","splice","handleOpenAddModal","formattedDate","representation","handleOpenEditModal","schedule","handleSaveSchedule","updatedSchedules","success","handleUpdateSchedule","handleDeleteSchedule","getStaffName","staffMember","find","s","getScheduleForDay","renderTimeSlots","day","className","children","small","secondary","onClick","map","breakTime","text","title","actionButton","to","primary","icon","htmlFor","id","onChange","leftIcon","rightIcon","toString","show","onClose","min","danger","placeholder"],"sources":["/home/toebot/dog-services-saas/frontend/src/pages/StaffScheduling.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { format, startOfWeek, endOfWeek, eachDayOfInterval, parseISO, formatISO, addWeeks, subWeeks, isSameDay } from 'date-fns';\nimport { useBusiness } from '../context/BusinessContext';\n\n// Components\nimport PageHeader from '../components/common/PageHeader';\nimport Button from '../components/common/Button';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport Modal from '../components/common/Modal';\nimport EmptyState from '../components/common/EmptyState';\n\nconst StaffScheduling = () => {\n  // State\n  const [isLoading, setIsLoading] = useState(true);\n  const [staff, setStaff] = useState([]);\n  const [selectedStaff, setSelectedStaff] = useState(null);\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [weekDays, setWeekDays] = useState([]);\n  const [schedules, setSchedules] = useState({});\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [currentSchedule, setCurrentSchedule] = useState(null);\n  const [scheduleForm, setScheduleForm] = useState({\n    staffId: '',\n    date: '',\n    startTime: '09:00',\n    endTime: '17:00',\n    isRecurring: false,\n    recurrencePattern: 'weekly',\n    maxBookings: 8,\n    breakTimes: []\n  });\n  const [showBreakModal, setShowBreakModal] = useState(false);\n  const [breakForm, setBreakForm] = useState({\n    startTime: '12:00',\n    endTime: '13:00',\n    description: 'Lunch Break'\n  });\n\n  // Context\n  const { fetchStaff, businessLoading } = useBusiness();\n\n  // Initialize and load data\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n      try {\n        // Fetch staff\n        const staffData = await fetchStaff();\n        setStaff(staffData);\n        \n        if (staffData.length > 0) {\n          setSelectedStaff(staffData[0]._id);\n        }\n        \n        // Generate week days\n        generateWeekDays(currentWeek);\n        \n        // Fetch schedules (this would connect to your API)\n        await fetchSchedules();\n        \n      } catch (error) {\n        console.error('Error loading scheduling data:', error);\n        toast.error('Failed to load scheduling data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadData();\n  }, [fetchStaff]);\n  \n  // Generate days for the current week view\n  const generateWeekDays = (dateInWeek) => {\n    const start = startOfWeek(dateInWeek, { weekStartsOn: 1 }); // Monday\n    const end = endOfWeek(dateInWeek, { weekStartsOn: 1 }); // Sunday\n    \n    const days = eachDayOfInterval({ start, end });\n    setWeekDays(days);\n  };\n  \n  // Navigate to previous week\n  const goToPreviousWeek = () => {\n    const prevWeek = subWeeks(currentWeek, 1);\n    setCurrentWeek(prevWeek);\n    generateWeekDays(prevWeek);\n    fetchSchedules(prevWeek);\n  };\n  \n  // Navigate to next week\n  const goToNextWeek = () => {\n    const nextWeek = addWeeks(currentWeek, 1);\n    setCurrentWeek(nextWeek);\n    generateWeekDays(nextWeek);\n    fetchSchedules(nextWeek);\n  };\n  \n  // Fetch schedules for the selected week and staff\n  const fetchSchedules = async (week = currentWeek) => {\n    // This would be an API call in a real application\n    // For now, we'll use mock data\n    \n    // Example mock data structure\n    const mockSchedules = {\n      // Staff ID -> Date -> Schedule\n      'staff1': {\n        '2025-03-04': {\n          startTime: '09:00',\n          endTime: '17:00',\n          maxBookings: 8,\n          breakTimes: [\n            { startTime: '12:00', endTime: '13:00', description: 'Lunch Break' }\n          ]\n        },\n        '2025-03-05': {\n          startTime: '10:00',\n          endTime: '18:00',\n          maxBookings: 10,\n          breakTimes: [\n            { startTime: '13:00', endTime: '14:00', description: 'Lunch Break' }\n          ]\n        }\n      },\n      'staff2': {\n        '2025-03-04': {\n          startTime: '08:00',\n          endTime: '16:00',\n          maxBookings: 6,\n          breakTimes: []\n        }\n      }\n    };\n    \n    setSchedules(mockSchedules);\n  };\n  \n  // Handle staff change\n  const handleStaffChange = (staffId) => {\n    setSelectedStaff(staffId);\n  };\n  \n  // Handle schedule form input change\n  const handleScheduleFormChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setScheduleForm({\n      ...scheduleForm,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  \n  // Handle break form input change\n  const handleBreakFormChange = (e) => {\n    const { name, value } = e.target;\n    setBreakForm({\n      ...breakForm,\n      [name]: value\n    });\n  };\n  \n  // Add a break to the schedule\n  const addBreak = () => {\n    // Validate break times\n    if (breakForm.startTime >= breakForm.endTime) {\n      toast.error('Break end time must be after start time');\n      return;\n    }\n    \n    const updatedBreaks = [\n      ...scheduleForm.breakTimes,\n      { ...breakForm }\n    ];\n    \n    setScheduleForm({\n      ...scheduleForm,\n      breakTimes: updatedBreaks\n    });\n    \n    setBreakForm({\n      startTime: '12:00',\n      endTime: '13:00',\n      description: 'Break'\n    });\n    \n    setShowBreakModal(false);\n  };\n  \n  // Remove a break from the schedule\n  const removeBreak = (index) => {\n    const updatedBreaks = [...scheduleForm.breakTimes];\n    updatedBreaks.splice(index, 1);\n    \n    setScheduleForm({\n      ...scheduleForm,\n      breakTimes: updatedBreaks\n    });\n  };\n  \n  // Open the add schedule modal\n  const handleOpenAddModal = (date) => {\n    const formattedDate = formatISO(date, { representation: 'date' });\n    \n    setScheduleForm({\n      staffId: selectedStaff,\n      date: formattedDate,\n      startTime: '09:00',\n      endTime: '17:00',\n      isRecurring: false,\n      recurrencePattern: 'weekly',\n      maxBookings: 8,\n      breakTimes: []\n    });\n    \n    setShowAddModal(true);\n  };\n  \n  // Open the edit schedule modal\n  const handleOpenEditModal = (staffId, date, schedule) => {\n    setCurrentSchedule({ staffId, date });\n    \n    setScheduleForm({\n      staffId: staffId,\n      date: date,\n      startTime: schedule.startTime,\n      endTime: schedule.endTime,\n      isRecurring: false,\n      recurrencePattern: 'weekly',\n      maxBookings: schedule.maxBookings,\n      breakTimes: [...schedule.breakTimes]\n    });\n    \n    setShowEditModal(true);\n  };\n  \n  // Save a new schedule\n  const handleSaveSchedule = async () => {\n    try {\n      // Validate form\n      if (scheduleForm.startTime >= scheduleForm.endTime) {\n        toast.error('End time must be after start time');\n        return;\n      }\n      \n      // This would be an API call in a real application\n      // For now, we'll update our local state\n      \n      const { staffId, date } = scheduleForm;\n      \n      const updatedSchedules = { ...schedules };\n      \n      if (!updatedSchedules[staffId]) {\n        updatedSchedules[staffId] = {};\n      }\n      \n      updatedSchedules[staffId][date] = {\n        startTime: scheduleForm.startTime,\n        endTime: scheduleForm.endTime,\n        maxBookings: scheduleForm.maxBookings,\n        breakTimes: [...scheduleForm.breakTimes]\n      };\n      \n      setSchedules(updatedSchedules);\n      \n      toast.success('Schedule saved successfully');\n      setShowAddModal(false);\n      \n    } catch (error) {\n      console.error('Error saving schedule:', error);\n      toast.error('Failed to save schedule');\n    }\n  };\n  \n  // Update an existing schedule\n  const handleUpdateSchedule = async () => {\n    try {\n      // Validate form\n      if (scheduleForm.startTime >= scheduleForm.endTime) {\n        toast.error('End time must be after start time');\n        return;\n      }\n      \n      // This would be an API call in a real application\n      // For now, we'll update our local state\n      \n      const { staffId, date } = currentSchedule;\n      \n      const updatedSchedules = { ...schedules };\n      \n      updatedSchedules[staffId][date] = {\n        startTime: scheduleForm.startTime,\n        endTime: scheduleForm.endTime,\n        maxBookings: scheduleForm.maxBookings,\n        breakTimes: [...scheduleForm.breakTimes]\n      };\n      \n      setSchedules(updatedSchedules);\n      \n      toast.success('Schedule updated successfully');\n      setShowEditModal(false);\n      \n    } catch (error) {\n      console.error('Error updating schedule:', error);\n      toast.error('Failed to update schedule');\n    }\n  };\n  \n  // Delete a schedule\n  const handleDeleteSchedule = async () => {\n    try {\n      // This would be an API call in a real application\n      // For now, we'll update our local state\n      \n      const { staffId, date } = currentSchedule;\n      \n      const updatedSchedules = { ...schedules };\n      \n      delete updatedSchedules[staffId][date];\n      \n      setSchedules(updatedSchedules);\n      \n      toast.success('Schedule deleted successfully');\n      setShowEditModal(false);\n      \n    } catch (error) {\n      console.error('Error deleting schedule:', error);\n      toast.error('Failed to delete schedule');\n    }\n  };\n  \n  // Get the staff name by ID\n  const getStaffName = (staffId) => {\n    const staffMember = staff.find(s => s._id === staffId);\n    return staffMember ? staffMember.name : 'Unknown Staff';\n  };\n  \n  // Check if there's a schedule for a specific day\n  const getScheduleForDay = (staffId, date) => {\n    const formattedDate = formatISO(date, { representation: 'date' });\n    \n    if (schedules[staffId] && schedules[staffId][formattedDate]) {\n      return schedules[staffId][formattedDate];\n    }\n    \n    return null;\n  };\n  \n  // Render time slots for a day\n  const renderTimeSlots = (day) => {\n    const schedule = getScheduleForDay(selectedStaff, day);\n    \n    if (!schedule) {\n      return (\n        <div className=\"empty-schedule\">\n          <Button \n            small \n            secondary \n            onClick={() => handleOpenAddModal(day)}\n          >\n            + Add Hours\n          </Button>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"schedule-card\">\n        <div className=\"schedule-time\">\n          {schedule.startTime} - {schedule.endTime}\n        </div>\n        <div className=\"schedule-capacity\">\n          Capacity: {schedule.maxBookings} bookings\n        </div>\n        \n        {schedule.breakTimes.length > 0 && (\n          <div className=\"schedule-breaks\">\n            <div className=\"break-title\">Breaks:</div>\n            {schedule.breakTimes.map((breakTime, index) => (\n              <div key={index} className=\"break-time\">\n                {breakTime.description}: {breakTime.startTime} - {breakTime.endTime}\n              </div>\n            ))}\n          </div>\n        )}\n        \n        <Button \n          small \n          secondary \n          onClick={() => handleOpenEditModal(selectedStaff, formatISO(day, { representation: 'date' }), schedule)}\n        >\n          Edit\n        </Button>\n      </div>\n    );\n  };\n  \n  // If loading\n  if (isLoading || businessLoading) {\n    return <LoadingSpinner text=\"Loading staff scheduling...\" />;\n  }\n  \n  return (\n    <div className=\"staff-scheduling-page\">\n      <PageHeader \n        title=\"Staff Scheduling\" \n        description=\"Manage your staff's available working hours and capacity.\"\n      />\n      \n      {staff.length === 0 ? (\n        <EmptyState\n          title=\"No Staff Members Yet\"\n          description=\"Add staff members to start scheduling.\"\n          actionButton={\n            <Button to=\"/staff\" primary>\n              Manage Staff\n            </Button>\n          }\n          icon=\"👥\"\n        />\n      ) : (\n        <>\n          <div className=\"scheduling-controls\">\n            <div className=\"staff-selector\">\n              <label htmlFor=\"staff-select\">Select Staff Member:</label>\n              <select\n                id=\"staff-select\"\n                value={selectedStaff || ''}\n                onChange={(e) => handleStaffChange(e.target.value)}\n              >\n                {staff.map(staffMember => (\n                  <option key={staffMember._id} value={staffMember._id}>\n                    {staffMember.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"week-navigation\">\n              <Button secondary small onClick={goToPreviousWeek} leftIcon=\"◀\">\n                Previous\n              </Button>\n              \n              <h3 className=\"current-week\">\n                {format(weekDays[0], 'MMM d')} - {format(weekDays[weekDays.length - 1], 'MMM d, yyyy')}\n              </h3>\n              \n              <Button secondary small onClick={goToNextWeek} rightIcon=\"▶\">\n                Next\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"schedule-grid\">\n            {weekDays.map(day => (\n              <div key={day.toString()} className=\"day-column\">\n                <div className=\"day-header\">\n                  <div className=\"day-name\">{format(day, 'EEEE')}</div>\n                  <div className=\"day-date\">{format(day, 'MMM d')}</div>\n                </div>\n                \n                <div className=\"day-schedule\">\n                  {renderTimeSlots(day)}\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n      \n      {/* Add Schedule Modal */}\n      <Modal\n        show={showAddModal}\n        onClose={() => setShowAddModal(false)}\n        title={`Add Schedule for ${getStaffName(scheduleForm.staffId)}`}\n      >\n        <form>\n          <div className=\"form-group\">\n            <label>Date</label>\n            <div className=\"form-text\">\n              {scheduleForm.date ? format(parseISO(scheduleForm.date), 'EEEE, MMMM d, yyyy') : ''}\n            </div>\n          </div>\n          \n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"startTime\">Start Time</label>\n              <input\n                type=\"time\"\n                id=\"startTime\"\n                name=\"startTime\"\n                value={scheduleForm.startTime}\n                onChange={handleScheduleFormChange}\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"endTime\">End Time</label>\n              <input\n                type=\"time\"\n                id=\"endTime\"\n                name=\"endTime\"\n                value={scheduleForm.endTime}\n                onChange={handleScheduleFormChange}\n              />\n            </div>\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"maxBookings\">Maximum Bookings</label>\n            <input\n              type=\"number\"\n              id=\"maxBookings\"\n              name=\"maxBookings\"\n              min=\"1\"\n              value={scheduleForm.maxBookings}\n              onChange={handleScheduleFormChange}\n            />\n            <div className=\"form-help\">Maximum number of appointments this staff member can handle on this day</div>\n          </div>\n          \n          <div className=\"form-group checkbox-group\">\n            <label>\n              <input\n                type=\"checkbox\"\n                name=\"isRecurring\"\n                checked={scheduleForm.isRecurring}\n                onChange={handleScheduleFormChange}\n              />\n              Set as recurring schedule\n            </label>\n          </div>\n          \n          {scheduleForm.isRecurring && (\n            <div className=\"form-group\">\n              <label htmlFor=\"recurrencePattern\">Recurrence Pattern</label>\n              <select\n                id=\"recurrencePattern\"\n                name=\"recurrencePattern\"\n                value={scheduleForm.recurrencePattern}\n                onChange={handleScheduleFormChange}\n              >\n                <option value=\"daily\">Daily</option>\n                <option value=\"weekly\">Weekly (same day each week)</option>\n                <option value=\"biweekly\">Bi-weekly (every 2 weeks)</option>\n                <option value=\"monthly\">Monthly (same date each month)</option>\n              </select>\n            </div>\n          )}\n          \n          <div className=\"form-group\">\n            <label>Breaks</label>\n            \n            {scheduleForm.breakTimes.length === 0 ? (\n              <div className=\"no-breaks-message\">No breaks scheduled</div>\n            ) : (\n              <div className=\"breaks-list\">\n                {scheduleForm.breakTimes.map((breakTime, index) => (\n                  <div key={index} className=\"break-item\">\n                    <div className=\"break-info\">\n                      <strong>{breakTime.description}</strong>: {breakTime.startTime} - {breakTime.endTime}\n                    </div>\n                    <Button \n                      small \n                      danger \n                      onClick={() => removeBreak(index)}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n            \n            <Button \n              secondary \n              small \n              type=\"button\" \n              onClick={() => setShowBreakModal(true)}\n            >\n              + Add Break\n            </Button>\n          </div>\n          \n          <div className=\"modal-actions\">\n            <Button secondary onClick={() => setShowAddModal(false)}>\n              Cancel\n            </Button>\n            <Button primary onClick={handleSaveSchedule}>\n              Save Schedule\n            </Button>\n          </div>\n        </form>\n      </Modal>\n      \n      {/* Edit Schedule Modal */}\n      <Modal\n        show={showEditModal}\n        onClose={() => setShowEditModal(false)}\n        title={`Edit Schedule for ${currentSchedule ? getStaffName(currentSchedule.staffId) : ''}`}\n      >\n        {currentSchedule && (\n          <form>\n            <div className=\"form-group\">\n              <label>Date</label>\n              <div className=\"form-text\">\n                {currentSchedule.date ? format(parseISO(currentSchedule.date), 'EEEE, MMMM d, yyyy') : ''}\n              </div>\n            </div>\n            \n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"edit-startTime\">Start Time</label>\n                <input\n                  type=\"time\"\n                  id=\"edit-startTime\"\n                  name=\"startTime\"\n                  value={scheduleForm.startTime}\n                  onChange={handleScheduleFormChange}\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label htmlFor=\"edit-endTime\">End Time</label>\n                <input\n                  type=\"time\"\n                  id=\"edit-endTime\"\n                  name=\"endTime\"\n                  value={scheduleForm.endTime}\n                  onChange={handleScheduleFormChange}\n                />\n              </div>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"edit-maxBookings\">Maximum Bookings</label>\n              <input\n                type=\"number\"\n                id=\"edit-maxBookings\"\n                name=\"maxBookings\"\n                min=\"1\"\n                value={scheduleForm.maxBookings}\n                onChange={handleScheduleFormChange}\n              />\n              <div className=\"form-help\">Maximum number of appointments this staff member can handle on this day</div>\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Breaks</label>\n              \n              {scheduleForm.breakTimes.length === 0 ? (\n                <div className=\"no-breaks-message\">No breaks scheduled</div>\n              ) : (\n                <div className=\"breaks-list\">\n                  {scheduleForm.breakTimes.map((breakTime, index) => (\n                    <div key={index} className=\"break-item\">\n                      <div className=\"break-info\">\n                        <strong>{breakTime.description}</strong>: {breakTime.startTime} - {breakTime.endTime}\n                      </div>\n                      <Button \n                        small \n                        danger \n                        onClick={() => removeBreak(index)}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n              \n              <Button \n                secondary \n                small \n                type=\"button\" \n                onClick={() => setShowBreakModal(true)}\n              >\n                + Add Break\n              </Button>\n            </div>\n            \n            <div className=\"modal-actions\">\n              <Button danger onClick={handleDeleteSchedule}>\n                Delete\n              </Button>\n              <Button secondary onClick={() => setShowEditModal(false)}>\n                Cancel\n              </Button>\n              <Button primary onClick={handleUpdateSchedule}>\n                Update Schedule\n              </Button>\n            </div>\n          </form>\n        )}\n      </Modal>\n      \n      {/* Add Break Modal */}\n      <Modal\n        show={showBreakModal}\n        onClose={() => setShowBreakModal(false)}\n        title=\"Add Break\"\n      >\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"break-description\">Description</label>\n            <input\n              type=\"text\"\n              id=\"break-description\"\n              name=\"description\"\n              value={breakForm.description}\n              onChange={handleBreakFormChange}\n              placeholder=\"e.g., Lunch Break\"\n            />\n          </div>\n          \n          <div className=\"form-row\">\n            <div className=\"form-group\">\n              <label htmlFor=\"break-startTime\">Start Time</label>\n              <input\n                type=\"time\"\n                id=\"break-startTime\"\n                name=\"startTime\"\n                value={breakForm.startTime}\n                onChange={handleBreakFormChange}\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"break-endTime\">End Time</label>\n              <input\n                type=\"time\"\n                id=\"break-endTime\"\n                name=\"endTime\"\n                value={breakForm.endTime}\n                onChange={handleBreakFormChange}\n              />\n            </div>\n          </div>\n          \n          <div className=\"modal-actions\">\n            <Button secondary onClick={() => setShowBreakModal(false)}>\n              Cancel\n            </Button>\n            <Button primary onClick={addBreak}>\n              Add Break\n            </Button>\n          </div>\n        </form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default StaffScheduling;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}